
solar_battery_led_lamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  0800c290  0800c290  0000d290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc24  0800cc24  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cc24  0800cc24  0000dc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc2c  0800cc2c  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc2c  0800cc2c  0000dc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc30  0800cc30  0000dc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800cc34  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006080  200001d8  0800ce0c  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006258  0800ce0c  0000e258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a095  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a0c  00000000  00000000  0002829d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  0002bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f9  00000000  00000000  0002d298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a774  00000000  00000000  0002e391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bb0  00000000  00000000  00048b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6b73  00000000  00000000  000616b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108228  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007148  00000000  00000000  0010826c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0010f3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c274 	.word	0x0800c274

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800c274 	.word	0x0800c274

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <App_Calibration_Init>:

#include "calibration.h"
#include "main.h"
// ADC értékek megadása, fény 0-3,3; akku 3,2-4,2
void App_Calibration_Init(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
    g_flashCalib.light.raw_min = 0;
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <App_Calibration_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	801a      	strh	r2, [r3, #0]
    g_flashCalib.light.raw_max = 3200;
 800105a:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <App_Calibration_Init+0x50>)
 800105c:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001060:	811a      	strh	r2, [r3, #8]
    g_flashCalib.light.measured_min = 0.0f;
 8001062:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <App_Calibration_Init+0x50>)
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
    g_flashCalib.light.measured_max = 3.3f;
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <App_Calibration_Init+0x50>)
 800106c:	4a0d      	ldr	r2, [pc, #52]	@ (80010a4 <App_Calibration_Init+0x54>)
 800106e:	60da      	str	r2, [r3, #12]

    g_flashCalib.battery.raw_min = 0;
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <App_Calibration_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	821a      	strh	r2, [r3, #16]
    g_flashCalib.battery.raw_max = 3200;
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <App_Calibration_Init+0x50>)
 8001078:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800107c:	831a      	strh	r2, [r3, #24]
    g_flashCalib.battery.measured_min = 3.2f;
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <App_Calibration_Init+0x50>)
 8001080:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <App_Calibration_Init+0x58>)
 8001082:	615a      	str	r2, [r3, #20]
    g_flashCalib.battery.measured_max = 4.2f;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <App_Calibration_Init+0x50>)
 8001086:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <App_Calibration_Init+0x5c>)
 8001088:	61da      	str	r2, [r3, #28]

    g_flashCalib.crc32 = 0;  // opcionális
 800108a:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <App_Calibration_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
    g_flashCalib.dummy = 0;  // opcionális
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <App_Calibration_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	200002a8 	.word	0x200002a8
 80010a4:	40533333 	.word	0x40533333
 80010a8:	404ccccd 	.word	0x404ccccd
 80010ac:	40866666 	.word	0x40866666

080010b0 <CalibrateValue>:


bool CalibrateValue(const CalibrationParams_t *params, uint16_t raw, float *result) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	460b      	mov	r3, r1
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	817b      	strh	r3, [r7, #10]
	if (params == 0 || result == 0) {		// NULL pointer védelem (NULL-safe)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <CalibrateValue+0x1a>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <CalibrateValue+0x1e>
		return false;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e03d      	b.n	800114a <CalibrateValue+0x9a>
	}

	if (!IsCalibrationValid(params)) { 		// Érvényesség-ellenőrzés!
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 f83f 	bl	8001152 <IsCalibrationValid>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f083 0301 	eor.w	r3, r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <CalibrateValue+0x34>
	        return false;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e032      	b.n	800114a <CalibrateValue+0x9a>
    }

	if (params->raw_max == params->raw_min) {
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	891a      	ldrh	r2, [r3, #8]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d101      	bne.n	80010f4 <CalibrateValue+0x44>
		return false; 						// elkerülni az osztást nullával (x1 - x0 == 0)
 80010f0:	2300      	movs	r3, #0
 80010f2:	e02a      	b.n	800114a <CalibrateValue+0x9a>
	}

	float alpha = (float) (raw - params->raw_min)
 80010f4:	897b      	ldrh	r3, [r7, #10]
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	8812      	ldrh	r2, [r2, #0]
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eef8 6ae7 	vcvt.f32.s32	s13, s15
			/ (params->raw_max - params->raw_min);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	891b      	ldrh	r3, [r3, #8]
 8001108:	461a      	mov	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float alpha = (float) (raw - params->raw_min)
 8001118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111c:	edc7 7a05 	vstr	s15, [r7, #20]
	*result = params->measured_min + alpha * (params->measured_max - params->measured_min); 	// Lineáris interpoláció kiszámítása
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	ed93 7a01 	vldr	s14, [r3, #4]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	edd3 6a03 	vldr	s13, [r3, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001132:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001136:	edd7 7a05 	vldr	s15, [r7, #20]
 800113a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	edc3 7a00 	vstr	s15, [r3]

	return true;				//ha sikerült minden akkor az eredmény a result-ban van
 8001148:	2301      	movs	r3, #1
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <IsCalibrationValid>:

bool IsCalibrationValid(const CalibrationParams_t *params) {
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
	if (params == 0) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <IsCalibrationValid+0x12>
		return false;
 8001160:	2300      	movs	r3, #0
 8001162:	e016      	b.n	8001192 <IsCalibrationValid+0x40>
	}

	return (params->raw_max > params->raw_min)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	891a      	ldrh	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	881b      	ldrh	r3, [r3, #0]
			&& (params->measured_max > params->measured_min);
 800116c:	429a      	cmp	r2, r3
 800116e:	d90c      	bls.n	800118a <IsCalibrationValid+0x38>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	ed93 7a03 	vldr	s14, [r3, #12]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	edd3 7a01 	vldr	s15, [r3, #4]
 800117c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	dd01      	ble.n	800118a <IsCalibrationValid+0x38>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <IsCalibrationValid+0x3a>
 800118a:	2300      	movs	r3, #0
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <__io_putchar>:
extern volatile uint8_t g_debug_enabled;
extern osMutexId_t uartMutexHandle;
extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)		//printf uartra
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80011a8:	1d39      	adds	r1, r7, #4
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	2201      	movs	r2, #1
 80011b0:	4803      	ldr	r0, [pc, #12]	@ (80011c0 <__io_putchar+0x20>)
 80011b2:	f002 fe13 	bl	8003ddc <HAL_UART_Transmit>
    return ch;
 80011b6:	687b      	ldr	r3, [r7, #4]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000023c 	.word	0x2000023c

080011c4 <cli_printf>:

//Wrapper fgv. a thread-save printf-hez, mutex-el védve
void cli_printf(const char *fmt, ...) {
 80011c4:	b40f      	push	{r0, r1, r2, r3}
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
	if (osMutexAcquire(uartMutexHandle, osWaitForever) == osOK) {
 80011cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <cli_printf+0x44>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fc14 	bl	8004a02 <osMutexAcquire>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d10b      	bne.n	80011f8 <cli_printf+0x34>
		va_list args;
		va_start(args, fmt);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	607b      	str	r3, [r7, #4]
		vprintf(fmt, args); // a printf variációja, elfogad va_listet
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	6938      	ldr	r0, [r7, #16]
 80011ea:	f007 fc01 	bl	80089f0 <viprintf>
		va_end(args);
		osMutexRelease(uartMutexHandle);
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <cli_printf+0x44>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fc50 	bl	8004a98 <osMutexRelease>
	}
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001202:	b004      	add	sp, #16
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000298 	.word	0x20000298

0800120c <CLI_ProcessCommand>:

// Parancssor értelmező függvény
bool CLI_ProcessCommand(const char *input) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af02      	add	r7, sp, #8
 8001212:	6078      	str	r0, [r7, #4]
	if (input == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <CLI_ProcessCommand+0x12>
		return false;
 800121a:	2300      	movs	r3, #0
 800121c:	e0bd      	b.n	800139a <CLI_ProcessCommand+0x18e>

	if (strcmp(input, "help") == 0) { /* help szöveg */
 800121e:	4961      	ldr	r1, [pc, #388]	@ (80013a4 <CLI_ProcessCommand+0x198>)
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7fe ffdd 	bl	80001e0 <strcmp>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d113      	bne.n	8001254 <CLI_ProcessCommand+0x48>
			cli_printf("Available commands:\r\n");
 800122c:	485e      	ldr	r0, [pc, #376]	@ (80013a8 <CLI_ProcessCommand+0x19c>)
 800122e:	f7ff ffc9 	bl	80011c4 <cli_printf>
			cli_printf("  help          - Show (this) command list.\r\n");
 8001232:	485e      	ldr	r0, [pc, #376]	@ (80013ac <CLI_ProcessCommand+0x1a0>)
 8001234:	f7ff ffc6 	bl	80011c4 <cli_printf>
			cli_printf("  led_status    - Current status of LED and CHARGE outputs.\r\n");
 8001238:	485d      	ldr	r0, [pc, #372]	@ (80013b0 <CLI_ProcessCommand+0x1a4>)
 800123a:	f7ff ffc3 	bl	80011c4 <cli_printf>
			cli_printf("  s_read        - Display of calibrated light/battery and voltage measurements.\r\n");
 800123e:	485d      	ldr	r0, [pc, #372]	@ (80013b4 <CLI_ProcessCommand+0x1a8>)
 8001240:	f7ff ffc0 	bl	80011c4 <cli_printf>
			cli_printf("  debug	        - Continuous debug messages ON.\r\n");
 8001244:	485c      	ldr	r0, [pc, #368]	@ (80013b8 <CLI_ProcessCommand+0x1ac>)
 8001246:	f7ff ffbd 	bl	80011c4 <cli_printf>
			cli_printf("  d             - Continuous debug messages OFF.\r\n");
 800124a:	485c      	ldr	r0, [pc, #368]	@ (80013bc <CLI_ProcessCommand+0x1b0>)
 800124c:	f7ff ffba 	bl	80011c4 <cli_printf>

			return true;
 8001250:	2301      	movs	r3, #1
 8001252:	e0a2      	b.n	800139a <CLI_ProcessCommand+0x18e>

	} else if (strcmp(input, "debug") == 0) {
 8001254:	495a      	ldr	r1, [pc, #360]	@ (80013c0 <CLI_ProcessCommand+0x1b4>)
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7fe ffc2 	bl	80001e0 <strcmp>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d107      	bne.n	8001272 <CLI_ProcessCommand+0x66>
			g_debug_enabled = 1;
 8001262:	4b58      	ldr	r3, [pc, #352]	@ (80013c4 <CLI_ProcessCommand+0x1b8>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
			cli_printf("Debug mode ON\r\n");
 8001268:	4857      	ldr	r0, [pc, #348]	@ (80013c8 <CLI_ProcessCommand+0x1bc>)
 800126a:	f7ff ffab 	bl	80011c4 <cli_printf>
			return true;
 800126e:	2301      	movs	r3, #1
 8001270:	e093      	b.n	800139a <CLI_ProcessCommand+0x18e>

	} else if (strcmp(input, "d") == 0) {
 8001272:	4956      	ldr	r1, [pc, #344]	@ (80013cc <CLI_ProcessCommand+0x1c0>)
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7fe ffb3 	bl	80001e0 <strcmp>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d107      	bne.n	8001290 <CLI_ProcessCommand+0x84>
			g_debug_enabled = 0;
 8001280:	4b50      	ldr	r3, [pc, #320]	@ (80013c4 <CLI_ProcessCommand+0x1b8>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
			cli_printf("Debug mode OFF\r\n");
 8001286:	4852      	ldr	r0, [pc, #328]	@ (80013d0 <CLI_ProcessCommand+0x1c4>)
 8001288:	f7ff ff9c 	bl	80011c4 <cli_printf>
			return true;
 800128c:	2301      	movs	r3, #1
 800128e:	e084      	b.n	800139a <CLI_ProcessCommand+0x18e>

	} else if (strcmp(input, "led_status") == 0) { /* led kiírás */
 8001290:	4950      	ldr	r1, [pc, #320]	@ (80013d4 <CLI_ProcessCommand+0x1c8>)
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7fe ffa4 	bl	80001e0 <strcmp>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d131      	bne.n	8001302 <CLI_ProcessCommand+0xf6>
		// Példa: LED-ek globális változóból kiolvasva, mutex védetten!
		uint8_t half = 0, full = 0, charge = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	72fb      	strb	r3, [r7, #11]
 80012a2:	2300      	movs	r3, #0
 80012a4:	72bb      	strb	r3, [r7, #10]
 80012a6:	2300      	movs	r3, #0
 80012a8:	727b      	strb	r3, [r7, #9]
		if (osMutexAcquire(ledMutexHandle, 50) == osOK) {
 80012aa:	4b4b      	ldr	r3, [pc, #300]	@ (80013d8 <CLI_ProcessCommand+0x1cc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2132      	movs	r1, #50	@ 0x32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 fba6 	bl	8004a02 <osMutexAcquire>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d11d      	bne.n	80012f8 <CLI_ProcessCommand+0xec>
			half = HAL_GPIO_ReadPin(LED_HALF_GPIO_Port, LED_HALF_Pin);
 80012bc:	2101      	movs	r1, #1
 80012be:	4847      	ldr	r0, [pc, #284]	@ (80013dc <CLI_ProcessCommand+0x1d0>)
 80012c0:	f001 fdd2 	bl	8002e68 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	72fb      	strb	r3, [r7, #11]
			full = HAL_GPIO_ReadPin(LED_FULL_GPIO_Port, LED_FULL_Pin);
 80012c8:	2102      	movs	r1, #2
 80012ca:	4844      	ldr	r0, [pc, #272]	@ (80013dc <CLI_ProcessCommand+0x1d0>)
 80012cc:	f001 fdcc 	bl	8002e68 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	72bb      	strb	r3, [r7, #10]
			charge = HAL_GPIO_ReadPin(CHARGE_GPIO_Port, CHARGE_Pin);
 80012d4:	2104      	movs	r1, #4
 80012d6:	4841      	ldr	r0, [pc, #260]	@ (80013dc <CLI_ProcessCommand+0x1d0>)
 80012d8:	f001 fdc6 	bl	8002e68 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	727b      	strb	r3, [r7, #9]
			osMutexRelease(ledMutexHandle);
 80012e0:	4b3d      	ldr	r3, [pc, #244]	@ (80013d8 <CLI_ProcessCommand+0x1cc>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 fbd7 	bl	8004a98 <osMutexRelease>
			cli_printf("LED_HALF: %d, LED_FULL: %d, CHARGE: %d\r\n", half, full,
 80012ea:	7af9      	ldrb	r1, [r7, #11]
 80012ec:	7aba      	ldrb	r2, [r7, #10]
 80012ee:	7a7b      	ldrb	r3, [r7, #9]
 80012f0:	483b      	ldr	r0, [pc, #236]	@ (80013e0 <CLI_ProcessCommand+0x1d4>)
 80012f2:	f7ff ff67 	bl	80011c4 <cli_printf>
 80012f6:	e002      	b.n	80012fe <CLI_ProcessCommand+0xf2>
					charge);
		} else {
			cli_printf("LED mutex acquire failed./r/n");
 80012f8:	483a      	ldr	r0, [pc, #232]	@ (80013e4 <CLI_ProcessCommand+0x1d8>)
 80012fa:	f7ff ff63 	bl	80011c4 <cli_printf>
		}
		return true;
 80012fe:	2301      	movs	r3, #1
 8001300:	e04b      	b.n	800139a <CLI_ProcessCommand+0x18e>

	} else if (strcmp(input, "s_read") == 0) { /* szenzoradatok */
 8001302:	4939      	ldr	r1, [pc, #228]	@ (80013e8 <CLI_ProcessCommand+0x1dc>)
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7fe ff6b 	bl	80001e0 <strcmp>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d140      	bne.n	8001392 <CLI_ProcessCommand+0x186>
		float light = 0.0f;
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
		float voltage = 0.0f;
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
		uint16_t raw_light = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	81fb      	strh	r3, [r7, #14]
		uint16_t raw_battery = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	81bb      	strh	r3, [r7, #12]

		if (osMutexAcquire(dataMutexHandle, 100) == osOK) {
 8001324:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <CLI_ProcessCommand+0x1e0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2164      	movs	r1, #100	@ 0x64
 800132a:	4618      	mov	r0, r3
 800132c:	f003 fb69 	bl	8004a02 <osMutexAcquire>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d128      	bne.n	8001388 <CLI_ProcessCommand+0x17c>
			light = g_sensorData.lightLevel;
 8001336:	4b2e      	ldr	r3, [pc, #184]	@ (80013f0 <CLI_ProcessCommand+0x1e4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	617b      	str	r3, [r7, #20]
			voltage = g_sensorData.batteryVoltage;
 800133c:	4b2c      	ldr	r3, [pc, #176]	@ (80013f0 <CLI_ProcessCommand+0x1e4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	613b      	str	r3, [r7, #16]
			raw_light = g_sensorData.raw_light;
 8001342:	4b2b      	ldr	r3, [pc, #172]	@ (80013f0 <CLI_ProcessCommand+0x1e4>)
 8001344:	891b      	ldrh	r3, [r3, #8]
 8001346:	81fb      	strh	r3, [r7, #14]
			raw_battery = g_sensorData.raw_battery;
 8001348:	4b29      	ldr	r3, [pc, #164]	@ (80013f0 <CLI_ProcessCommand+0x1e4>)
 800134a:	895b      	ldrh	r3, [r3, #10]
 800134c:	81bb      	strh	r3, [r7, #12]
			osMutexRelease(dataMutexHandle);
 800134e:	4b27      	ldr	r3, [pc, #156]	@ (80013ec <CLI_ProcessCommand+0x1e0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fba0 	bl	8004a98 <osMutexRelease>

			cli_printf("Sensor data:\r\n");
 8001358:	4826      	ldr	r0, [pc, #152]	@ (80013f4 <CLI_ProcessCommand+0x1e8>)
 800135a:	f7ff ff33 	bl	80011c4 <cli_printf>
			cli_printf("  Light: 	%.2f V (raw: %u)\r\n", light, raw_light);
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff f90a 	bl	8000578 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	89f9      	ldrh	r1, [r7, #14]
 800136a:	9100      	str	r1, [sp, #0]
 800136c:	4822      	ldr	r0, [pc, #136]	@ (80013f8 <CLI_ProcessCommand+0x1ec>)
 800136e:	f7ff ff29 	bl	80011c4 <cli_printf>
			cli_printf("  Battery: 	%.2f V (raw: %u)\r\n", voltage, raw_battery);
 8001372:	6938      	ldr	r0, [r7, #16]
 8001374:	f7ff f900 	bl	8000578 <__aeabi_f2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	89b9      	ldrh	r1, [r7, #12]
 800137e:	9100      	str	r1, [sp, #0]
 8001380:	481e      	ldr	r0, [pc, #120]	@ (80013fc <CLI_ProcessCommand+0x1f0>)
 8001382:	f7ff ff1f 	bl	80011c4 <cli_printf>
 8001386:	e002      	b.n	800138e <CLI_ProcessCommand+0x182>
		} else {
			cli_printf("Failed to read sensor data (mutex timeout).\r\n");
 8001388:	481d      	ldr	r0, [pc, #116]	@ (8001400 <CLI_ProcessCommand+0x1f4>)
 800138a:	f7ff ff1b 	bl	80011c4 <cli_printf>
		}
		return true;
 800138e:	2301      	movs	r3, #1
 8001390:	e003      	b.n	800139a <CLI_ProcessCommand+0x18e>
	}else {
		cli_printf("Unknown command\r\n");
 8001392:	481c      	ldr	r0, [pc, #112]	@ (8001404 <CLI_ProcessCommand+0x1f8>)
 8001394:	f7ff ff16 	bl	80011c4 <cli_printf>
		return false;
 8001398:	2300      	movs	r3, #0
	}return false;
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	0800c290 	.word	0x0800c290
 80013a8:	0800c298 	.word	0x0800c298
 80013ac:	0800c2b0 	.word	0x0800c2b0
 80013b0:	0800c2e0 	.word	0x0800c2e0
 80013b4:	0800c320 	.word	0x0800c320
 80013b8:	0800c374 	.word	0x0800c374
 80013bc:	0800c3a8 	.word	0x0800c3a8
 80013c0:	0800c3dc 	.word	0x0800c3dc
 80013c4:	200002d0 	.word	0x200002d0
 80013c8:	0800c3e4 	.word	0x0800c3e4
 80013cc:	0800c3f4 	.word	0x0800c3f4
 80013d0:	0800c3f8 	.word	0x0800c3f8
 80013d4:	0800c40c 	.word	0x0800c40c
 80013d8:	20000294 	.word	0x20000294
 80013dc:	40020400 	.word	0x40020400
 80013e0:	0800c418 	.word	0x0800c418
 80013e4:	0800c444 	.word	0x0800c444
 80013e8:	0800c464 	.word	0x0800c464
 80013ec:	20000290 	.word	0x20000290
 80013f0:	2000029c 	.word	0x2000029c
 80013f4:	0800c46c 	.word	0x0800c46c
 80013f8:	0800c47c 	.word	0x0800c47c
 80013fc:	0800c49c 	.word	0x0800c49c
 8001400:	0800c4bc 	.word	0x0800c4bc
 8001404:	0800c4ec 	.word	0x0800c4ec

08001408 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800140c:	f000 fe92 	bl	8002134 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001410:	f000 f860 	bl	80014d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001414:	f000 f92c 	bl	8001670 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001418:	f000 f900 	bl	800161c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800141c:	f000 f8c4 	bl	80015a8 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	App_Calibration_Init();
 8001420:	f7ff fe16 	bl	8001050 <App_Calibration_Init>
	HAL_UART_Transmit(&huart2, (uint8_t*) "START\r\n", 7, 100);	//csak debug miatt, induláskor egyetlen üzenet
 8001424:	2364      	movs	r3, #100	@ 0x64
 8001426:	2207      	movs	r2, #7
 8001428:	4919      	ldr	r1, [pc, #100]	@ (8001490 <main+0x88>)
 800142a:	481a      	ldr	r0, [pc, #104]	@ (8001494 <main+0x8c>)
 800142c:	f002 fcd6 	bl	8003ddc <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001430:	f003 f96a 	bl	8004708 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of dataMutex */
	dataMutexHandle = osMutexNew(&dataMutex_attributes);
 8001434:	4818      	ldr	r0, [pc, #96]	@ (8001498 <main+0x90>)
 8001436:	f003 fa5e 	bl	80048f6 <osMutexNew>
 800143a:	4603      	mov	r3, r0
 800143c:	4a17      	ldr	r2, [pc, #92]	@ (800149c <main+0x94>)
 800143e:	6013      	str	r3, [r2, #0]

	/* creation of ledMutex */
	ledMutexHandle = osMutexNew(&ledMutex_attributes);
 8001440:	4817      	ldr	r0, [pc, #92]	@ (80014a0 <main+0x98>)
 8001442:	f003 fa58 	bl	80048f6 <osMutexNew>
 8001446:	4603      	mov	r3, r0
 8001448:	4a16      	ldr	r2, [pc, #88]	@ (80014a4 <main+0x9c>)
 800144a:	6013      	str	r3, [r2, #0]

	/* creation of uartMutex */
	uartMutexHandle = osMutexNew(&uartMutex_attributes);
 800144c:	4816      	ldr	r0, [pc, #88]	@ (80014a8 <main+0xa0>)
 800144e:	f003 fa52 	bl	80048f6 <osMutexNew>
 8001452:	4603      	mov	r3, r0
 8001454:	4a15      	ldr	r2, [pc, #84]	@ (80014ac <main+0xa4>)
 8001456:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of SensorTask */
	SensorTaskHandle = osThreadNew(StartSensorTask, NULL,
 8001458:	4a15      	ldr	r2, [pc, #84]	@ (80014b0 <main+0xa8>)
 800145a:	2100      	movs	r1, #0
 800145c:	4815      	ldr	r0, [pc, #84]	@ (80014b4 <main+0xac>)
 800145e:	f003 f99d 	bl	800479c <osThreadNew>
 8001462:	4603      	mov	r3, r0
 8001464:	4a14      	ldr	r2, [pc, #80]	@ (80014b8 <main+0xb0>)
 8001466:	6013      	str	r3, [r2, #0]
			&SensorTask_attributes);

	/* creation of ControlTask */
	ControlTaskHandle = osThreadNew(StartControlTask, NULL,
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <main+0xb4>)
 800146a:	2100      	movs	r1, #0
 800146c:	4814      	ldr	r0, [pc, #80]	@ (80014c0 <main+0xb8>)
 800146e:	f003 f995 	bl	800479c <osThreadNew>
 8001472:	4603      	mov	r3, r0
 8001474:	4a13      	ldr	r2, [pc, #76]	@ (80014c4 <main+0xbc>)
 8001476:	6013      	str	r3, [r2, #0]
			&ControlTask_attributes);

	/* creation of DebugTask */
	DebugTaskHandle = osThreadNew(StartDebugTask, NULL, &DebugTask_attributes);
 8001478:	4a13      	ldr	r2, [pc, #76]	@ (80014c8 <main+0xc0>)
 800147a:	2100      	movs	r1, #0
 800147c:	4813      	ldr	r0, [pc, #76]	@ (80014cc <main+0xc4>)
 800147e:	f003 f98d 	bl	800479c <osThreadNew>
 8001482:	4603      	mov	r3, r0
 8001484:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <main+0xc8>)
 8001486:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001488:	f003 f962 	bl	8004750 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <main+0x84>
 8001490:	0800c548 	.word	0x0800c548
 8001494:	2000023c 	.word	0x2000023c
 8001498:	0800c7b0 	.word	0x0800c7b0
 800149c:	20000290 	.word	0x20000290
 80014a0:	0800c7c0 	.word	0x0800c7c0
 80014a4:	20000294 	.word	0x20000294
 80014a8:	0800c7d0 	.word	0x0800c7d0
 80014ac:	20000298 	.word	0x20000298
 80014b0:	0800c744 	.word	0x0800c744
 80014b4:	080017a9 	.word	0x080017a9
 80014b8:	20000284 	.word	0x20000284
 80014bc:	0800c768 	.word	0x0800c768
 80014c0:	08001949 	.word	0x08001949
 80014c4:	20000288 	.word	0x20000288
 80014c8:	0800c78c 	.word	0x0800c78c
 80014cc:	08001bb5 	.word	0x08001bb5
 80014d0:	2000028c 	.word	0x2000028c

080014d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	@ 0x50
 80014d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	2230      	movs	r2, #48	@ 0x30
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f007 fa8e 	bl	8008a04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	4b28      	ldr	r3, [pc, #160]	@ (80015a0 <SystemClock_Config+0xcc>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	4a27      	ldr	r2, [pc, #156]	@ (80015a0 <SystemClock_Config+0xcc>)
 8001502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001506:	6413      	str	r3, [r2, #64]	@ 0x40
 8001508:	4b25      	ldr	r3, [pc, #148]	@ (80015a0 <SystemClock_Config+0xcc>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <SystemClock_Config+0xd0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a21      	ldr	r2, [pc, #132]	@ (80015a4 <SystemClock_Config+0xd0>)
 800151e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <SystemClock_Config+0xd0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001530:	2302      	movs	r3, #2
 8001532:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001534:	2301      	movs	r3, #1
 8001536:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001538:	2310      	movs	r3, #16
 800153a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153c:	2302      	movs	r3, #2
 800153e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001540:	2300      	movs	r3, #0
 8001542:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001544:	2310      	movs	r3, #16
 8001546:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001548:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800154c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800154e:	2304      	movs	r3, #4
 8001550:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001552:	2304      	movs	r3, #4
 8001554:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	4618      	mov	r0, r3
 800155c:	f001 fcb6 	bl	8002ecc <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x96>
		Error_Handler();
 8001566:	f000 fb8d 	bl	8001c84 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800156a:	230f      	movs	r3, #15
 800156c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2302      	movs	r3, #2
 8001570:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800157a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2102      	movs	r1, #2
 8001586:	4618      	mov	r0, r3
 8001588:	f001 ff18 	bl	80033bc <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0xc2>
		Error_Handler();
 8001592:	f000 fb77 	bl	8001c84 <Error_Handler>
	}
}
 8001596:	bf00      	nop
 8001598:	3750      	adds	r7, #80	@ 0x50
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40007000 	.word	0x40007000

080015a8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80015ac:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015ae:	4a19      	ldr	r2, [pc, #100]	@ (8001614 <MX_ADC1_Init+0x6c>)
 80015b0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015b8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80015c6:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015cc:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001618 <MX_ADC1_Init+0x70>)
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015e8:	2202      	movs	r2, #2
 80015ea:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80015fa:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_ADC1_Init+0x68>)
 80015fc:	f000 fddc 	bl	80021b8 <HAL_ADC_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_ADC1_Init+0x62>
		Error_Handler();
 8001606:	f000 fb3d 	bl	8001c84 <Error_Handler>

	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200001f4 	.word	0x200001f4
 8001614:	40012000 	.word	0x40012000
 8001618:	0f000001 	.word	0x0f000001

0800161c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001622:	4a12      	ldr	r2, [pc, #72]	@ (800166c <MX_USART2_UART_Init+0x50>)
 8001624:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001652:	4805      	ldr	r0, [pc, #20]	@ (8001668 <MX_USART2_UART_Init+0x4c>)
 8001654:	f002 fb72 	bl	8003d3c <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800165e:	f000 fb11 	bl	8001c84 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000023c 	.word	0x2000023c
 800166c:	40004400 	.word	0x40004400

08001670 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b43      	ldr	r3, [pc, #268]	@ (8001798 <MX_GPIO_Init+0x128>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a42      	ldr	r2, [pc, #264]	@ (8001798 <MX_GPIO_Init+0x128>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b40      	ldr	r3, [pc, #256]	@ (8001798 <MX_GPIO_Init+0x128>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001798 <MX_GPIO_Init+0x128>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001798 <MX_GPIO_Init+0x128>)
 80016ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b39      	ldr	r3, [pc, #228]	@ (8001798 <MX_GPIO_Init+0x128>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b35      	ldr	r3, [pc, #212]	@ (8001798 <MX_GPIO_Init+0x128>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a34      	ldr	r2, [pc, #208]	@ (8001798 <MX_GPIO_Init+0x128>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b32      	ldr	r3, [pc, #200]	@ (8001798 <MX_GPIO_Init+0x128>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <MX_GPIO_Init+0x128>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001798 <MX_GPIO_Init+0x128>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <MX_GPIO_Init+0x128>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2120      	movs	r1, #32
 80016fa:	4828      	ldr	r0, [pc, #160]	@ (800179c <MX_GPIO_Init+0x12c>)
 80016fc:	f001 fbcc 	bl	8002e98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_HALF_Pin | LED_FULL_Pin | CHARGE_Pin,
 8001700:	2200      	movs	r2, #0
 8001702:	2107      	movs	r1, #7
 8001704:	4826      	ldr	r0, [pc, #152]	@ (80017a0 <MX_GPIO_Init+0x130>)
 8001706:	f001 fbc7 	bl	8002e98 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800170a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800170e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001710:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001714:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4820      	ldr	r0, [pc, #128]	@ (80017a4 <MX_GPIO_Init+0x134>)
 8001722:	f001 fa1d 	bl	8002b60 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001726:	2320      	movs	r3, #32
 8001728:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4817      	ldr	r0, [pc, #92]	@ (800179c <MX_GPIO_Init+0x12c>)
 800173e:	f001 fa0f 	bl	8002b60 <HAL_GPIO_Init>

	/*Configure GPIO pin : MOTION_Pin */
	GPIO_InitStruct.Pin = MOTION_Pin;
 8001742:	2310      	movs	r3, #16
 8001744:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(MOTION_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4813      	ldr	r0, [pc, #76]	@ (80017a4 <MX_GPIO_Init+0x134>)
 8001756:	f001 fa03 	bl	8002b60 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_HALF_Pin LED_FULL_Pin CHARGE_Pin */
	GPIO_InitStruct.Pin = LED_HALF_Pin | LED_FULL_Pin | CHARGE_Pin;
 800175a:	2307      	movs	r3, #7
 800175c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	480b      	ldr	r0, [pc, #44]	@ (80017a0 <MX_GPIO_Init+0x130>)
 8001772:	f001 f9f5 	bl	8002b60 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/*Configure GPIO pins : LIGHT_Pin BATTERY_Pin */
	GPIO_InitStruct.Pin = LIGHT_Pin | BATTERY_Pin;
 8001776:	23c0      	movs	r3, #192	@ 0xc0
 8001778:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177a:	2303      	movs	r3, #3
 800177c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4804      	ldr	r0, [pc, #16]	@ (800179c <MX_GPIO_Init+0x12c>)
 800178a:	f001 f9e9 	bl	8002b60 <HAL_GPIO_Init>
	/* USER CODE END MX_GPIO_Init_2 */
}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	@ 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40020800 	.word	0x40020800

080017a8 <StartSensorTask>:
 * @brief  Function implementing the SensorTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void *argument) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	// Nyers ADC értékek ide kerülnek beolvasáskor
	uint16_t raw_light = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t raw_battery = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	84bb      	strh	r3, [r7, #36]	@ 0x24

	// Kalibrált (interpolált) értékek ide kerülnek
	float calibrated_light = 0.0f;
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
	float calibrated_battery = 0.0f;
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
	// ADC csatorna konfigurációs struktúra (halhoz tartozik)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
	/* Infinite loop */
	for (;;) {
		// 1.: FÉNYÉRZÉKELŐ ADC (ADC_CHANNEL_6)
		sConfig.Channel = ADC_CHANNEL_6;      // ADC bemenet kiválasztása (első)
 80017d2:	2306      	movs	r3, #6
 80017d4:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1; // első a konverziós sorban (de az önálló mérések miatt mindíg rank1)
 80017d6:	2301      	movs	r3, #1
 80017d8:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES; // hosszú mintavételi idő, stabilabb
 80017da:	2307      	movs	r3, #7
 80017dc:	617b      	str	r3, [r7, #20]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) == HAL_OK) {
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	4619      	mov	r1, r3
 80017e4:	484d      	ldr	r0, [pc, #308]	@ (800191c <StartSensorTask+0x174>)
 80017e6:	f000 feab 	bl	8002540 <HAL_ADC_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d118      	bne.n	8001822 <StartSensorTask+0x7a>
			HAL_ADC_Start(&hadc1);  // mérés indítása
 80017f0:	484a      	ldr	r0, [pc, #296]	@ (800191c <StartSensorTask+0x174>)
 80017f2:	f000 fd25 	bl	8002240 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80017f6:	2164      	movs	r1, #100	@ 0x64
 80017f8:	4848      	ldr	r0, [pc, #288]	@ (800191c <StartSensorTask+0x174>)
 80017fa:	f000 fe08 	bl	800240e <HAL_ADC_PollForConversion>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <StartSensorTask+0x68>
				raw_light = HAL_ADC_GetValue(&hadc1); // nyers ADC érték kiolvasása
 8001804:	4845      	ldr	r0, [pc, #276]	@ (800191c <StartSensorTask+0x174>)
 8001806:	f000 fe8d 	bl	8002524 <HAL_ADC_GetValue>
 800180a:	4603      	mov	r3, r0
 800180c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800180e:	e004      	b.n	800181a <StartSensorTask+0x72>
			} else {
				cli_printf("SensorTask: light ADC conversion timeout!\r\n");
 8001810:	4843      	ldr	r0, [pc, #268]	@ (8001920 <StartSensorTask+0x178>)
 8001812:	f7ff fcd7 	bl	80011c4 <cli_printf>
				raw_light = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	84fb      	strh	r3, [r7, #38]	@ 0x26
			}
			HAL_ADC_Stop(&hadc1); // konverzió leállítása
 800181a:	4840      	ldr	r0, [pc, #256]	@ (800191c <StartSensorTask+0x174>)
 800181c:	f000 fdc4 	bl	80023a8 <HAL_ADC_Stop>
 8001820:	e004      	b.n	800182c <StartSensorTask+0x84>
		} else {
			cli_printf("SensorTask: light ADC config error!\r\n");
 8001822:	4840      	ldr	r0, [pc, #256]	@ (8001924 <StartSensorTask+0x17c>)
 8001824:	f7ff fcce 	bl	80011c4 <cli_printf>
			raw_light = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		// 2.: AKKUFESZÜLTSÉG ADC (ADC_CHANNEL_7)
		sConfig.Channel = ADC_CHANNEL_7;        // második ADC bemenet
 800182c:	2307      	movs	r3, #7
 800182e:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;                       // önálló mérések, mindig rank 1
 8001830:	2301      	movs	r3, #1
 8001832:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001834:	2307      	movs	r3, #7
 8001836:	617b      	str	r3, [r7, #20]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) == HAL_OK) {
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4619      	mov	r1, r3
 800183e:	4837      	ldr	r0, [pc, #220]	@ (800191c <StartSensorTask+0x174>)
 8001840:	f000 fe7e 	bl	8002540 <HAL_ADC_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <StartSensorTask+0xd4>
			HAL_ADC_Start(&hadc1);
 800184a:	4834      	ldr	r0, [pc, #208]	@ (800191c <StartSensorTask+0x174>)
 800184c:	f000 fcf8 	bl	8002240 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8001850:	2164      	movs	r1, #100	@ 0x64
 8001852:	4832      	ldr	r0, [pc, #200]	@ (800191c <StartSensorTask+0x174>)
 8001854:	f000 fddb 	bl	800240e <HAL_ADC_PollForConversion>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d105      	bne.n	800186a <StartSensorTask+0xc2>
				raw_battery = HAL_ADC_GetValue(&hadc1);
 800185e:	482f      	ldr	r0, [pc, #188]	@ (800191c <StartSensorTask+0x174>)
 8001860:	f000 fe60 	bl	8002524 <HAL_ADC_GetValue>
 8001864:	4603      	mov	r3, r0
 8001866:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001868:	e004      	b.n	8001874 <StartSensorTask+0xcc>
			} else {
				cli_printf("SensorTask: battery ADC conversion timeout!\r\n");
 800186a:	482f      	ldr	r0, [pc, #188]	@ (8001928 <StartSensorTask+0x180>)
 800186c:	f7ff fcaa 	bl	80011c4 <cli_printf>
				raw_battery = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}
			HAL_ADC_Stop(&hadc1);
 8001874:	4829      	ldr	r0, [pc, #164]	@ (800191c <StartSensorTask+0x174>)
 8001876:	f000 fd97 	bl	80023a8 <HAL_ADC_Stop>
 800187a:	e004      	b.n	8001886 <StartSensorTask+0xde>
		}
		else {
			cli_printf("SensorTask: battery ADC config error!\r\n");
 800187c:	482b      	ldr	r0, [pc, #172]	@ (800192c <StartSensorTask+0x184>)
 800187e:	f7ff fca1 	bl	80011c4 <cli_printf>
			raw_battery = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}

		// 3.: KALIBRÁCIÓ – interpolált értékek kiszámítása a calibration.c-ben
		//így garantáltan nem marad érvénytelen vagy értelmezhetetlen érték a mérés után!
		if (!CalibrateValue(&g_flashCalib.light, raw_light,
 8001886:	f107 0220 	add.w	r2, r7, #32
 800188a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800188c:	4619      	mov	r1, r3
 800188e:	4828      	ldr	r0, [pc, #160]	@ (8001930 <StartSensorTask+0x188>)
 8001890:	f7ff fc0e 	bl	80010b0 <CalibrateValue>
 8001894:	4603      	mov	r3, r0
 8001896:	f083 0301 	eor.w	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <StartSensorTask+0xfe>
				&calibrated_light)) {
			calibrated_light = 0.0f;
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
		}
		if (!CalibrateValue(&g_flashCalib.battery, raw_battery,
 80018a6:	f107 021c 	add.w	r2, r7, #28
 80018aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80018ac:	4619      	mov	r1, r3
 80018ae:	4821      	ldr	r0, [pc, #132]	@ (8001934 <StartSensorTask+0x18c>)
 80018b0:	f7ff fbfe 	bl	80010b0 <CalibrateValue>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f083 0301 	eor.w	r3, r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <StartSensorTask+0x11e>
				&calibrated_battery)) {
			calibrated_battery = 0.0f;
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
		}
		// Ha a kalibrációs adatok nem érvényesek, az eredmény 0 marad

		// 4.: ADATOK MENTÉSE A GLOBÁLIS STRUKTÚRÁBA (mutex védelem mellett)
		if (osMutexAcquire(dataMutexHandle, 100) == osOK) {
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <StartSensorTask+0x190>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2164      	movs	r1, #100	@ 0x64
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 f898 	bl	8004a02 <osMutexAcquire>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d110      	bne.n	80018fa <StartSensorTask+0x152>
			// Kritikus szakasz – csak 1 task férhet hozzá egyszerre
			g_sensorData.lightLevel = calibrated_light;
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	4a18      	ldr	r2, [pc, #96]	@ (800193c <StartSensorTask+0x194>)
 80018dc:	6013      	str	r3, [r2, #0]
			g_sensorData.batteryVoltage = calibrated_battery;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4a16      	ldr	r2, [pc, #88]	@ (800193c <StartSensorTask+0x194>)
 80018e2:	6053      	str	r3, [r2, #4]
			g_sensorData.raw_light = raw_light;
 80018e4:	4a15      	ldr	r2, [pc, #84]	@ (800193c <StartSensorTask+0x194>)
 80018e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018e8:	8113      	strh	r3, [r2, #8]
			g_sensorData.raw_battery = raw_battery;
 80018ea:	4a14      	ldr	r2, [pc, #80]	@ (800193c <StartSensorTask+0x194>)
 80018ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80018ee:	8153      	strh	r3, [r2, #10]
			osMutexRelease(dataMutexHandle);
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <StartSensorTask+0x190>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 f8cf 	bl	8004a98 <osMutexRelease>
		}
		if (g_debug_enabled) {
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <StartSensorTask+0x198>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <StartSensorTask+0x168>
					cli_printf("SensorTask: raw_light=%u, raw_battery=%u\r\n",
 8001904:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001906:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	480e      	ldr	r0, [pc, #56]	@ (8001944 <StartSensorTask+0x19c>)
 800190c:	f7ff fc5a 	bl	80011c4 <cli_printf>
							raw_light, raw_battery);
				}
		osDelay(500);
 8001910:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001914:	f002 ffd4 	bl	80048c0 <osDelay>
		sConfig.Channel = ADC_CHANNEL_6;      // ADC bemenet kiválasztása (első)
 8001918:	e75b      	b.n	80017d2 <StartSensorTask+0x2a>
 800191a:	bf00      	nop
 800191c:	200001f4 	.word	0x200001f4
 8001920:	0800c550 	.word	0x0800c550
 8001924:	0800c57c 	.word	0x0800c57c
 8001928:	0800c5a4 	.word	0x0800c5a4
 800192c:	0800c5d4 	.word	0x0800c5d4
 8001930:	200002a8 	.word	0x200002a8
 8001934:	200002b8 	.word	0x200002b8
 8001938:	20000290 	.word	0x20000290
 800193c:	2000029c 	.word	0x2000029c
 8001940:	200002d0 	.word	0x200002d0
 8001944:	0800c5fc 	.word	0x0800c5fc

08001948 <StartControlTask>:
 * @brief Function implementing the ControlTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	@ 0x28
 800194c:	af02      	add	r7, sp, #8
 800194e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartControlTask */
	//feltételezés: fényérzékelő 0-3.3V; akkumulátor 3.2-4.2V (standard 3.7V-os cella)
	{
		float light = 0.0f;
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
		float voltage = 0.0f;
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
		GPIO_PinState motion = GPIO_PIN_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
		uint8_t led_half = 0, led_full = 0, charging = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	75fb      	strb	r3, [r7, #23]
 8001964:	2300      	movs	r3, #0
 8001966:	75bb      	strb	r3, [r7, #22]
 8001968:	2300      	movs	r3, #0
 800196a:	757b      	strb	r3, [r7, #21]

		uint8_t was_motion = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	753b      	strb	r3, [r7, #20]
		uint32_t full_brightness_timer = 0; // ms-ben számlál, de osDelay(500) miatt ciklusszámlálóként használjuk
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]

		/* Infinite loop */
		for (;;) {
			// 1. Szenzoradatok mutex-el
			if (osMutexAcquire(dataMutexHandle, 100) == osOK) {
 8001974:	4b7e      	ldr	r3, [pc, #504]	@ (8001b70 <StartControlTask+0x228>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2164      	movs	r1, #100	@ 0x64
 800197a:	4618      	mov	r0, r3
 800197c:	f003 f841 	bl	8004a02 <osMutexAcquire>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10a      	bne.n	800199c <StartControlTask+0x54>
				light = g_sensorData.lightLevel;
 8001986:	4b7b      	ldr	r3, [pc, #492]	@ (8001b74 <StartControlTask+0x22c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	61fb      	str	r3, [r7, #28]
				voltage = g_sensorData.batteryVoltage;
 800198c:	4b79      	ldr	r3, [pc, #484]	@ (8001b74 <StartControlTask+0x22c>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	61bb      	str	r3, [r7, #24]
				osMutexRelease(dataMutexHandle);
 8001992:	4b77      	ldr	r3, [pc, #476]	@ (8001b70 <StartControlTask+0x228>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f003 f87e 	bl	8004a98 <osMutexRelease>
			}

			// 2. Mozgásérzékelő olvasása
			motion = HAL_GPIO_ReadPin(MOTION_GPIO_Port, MOTION_Pin);
 800199c:	2110      	movs	r1, #16
 800199e:	4876      	ldr	r0, [pc, #472]	@ (8001b78 <StartControlTask+0x230>)
 80019a0:	f001 fa62 	bl	8002e68 <HAL_GPIO_ReadPin>
 80019a4:	4603      	mov	r3, r0
 80019a6:	73fb      	strb	r3, [r7, #15]

			// 3. Logika: alapértelmezés (mindent kikapcsol)
			led_half = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	75fb      	strb	r3, [r7, #23]
			led_full = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	75bb      	strb	r3, [r7, #22]
			charging = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	757b      	strb	r3, [r7, #21]

			// 4. Akku < 15% → minden kikapcsol
			if (voltage < 3.35f) {	//3.2+0.15=3.35
 80019b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019b8:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001b7c <StartControlTask+0x234>
 80019bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c4:	d50e      	bpl.n	80019e4 <StartControlTask+0x9c>
				// Nincs világítás, töltés se
				led_half = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	75fb      	strb	r3, [r7, #23]
				led_full = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	75bb      	strb	r3, [r7, #22]
				charging = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	757b      	strb	r3, [r7, #21]

				if (g_debug_enabled) {
 80019d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001b80 <StartControlTask+0x238>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d06f      	beq.n	8001abc <StartControlTask+0x174>
					cli_printf("Battery depleted! Everything off.\r\n");
 80019dc:	4869      	ldr	r0, [pc, #420]	@ (8001b84 <StartControlTask+0x23c>)
 80019de:	f7ff fbf1 	bl	80011c4 <cli_printf>
 80019e2:	e06b      	b.n	8001abc <StartControlTask+0x174>
				}
			}
			// 5. Fény > 50% (1,65V) → töltés bekapcsol, LED-ek off
			else if (light > 1.65f) {	//3.3*0,5=1.65
 80019e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80019e8:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001b88 <StartControlTask+0x240>
 80019ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f4:	dd26      	ble.n	8001a44 <StartControlTask+0xfc>
				if (voltage < 4.15f) { // csak 95% battery alatt (3.2+0.95=4.15)
 80019f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019fa:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001b8c <StartControlTask+0x244>
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d50e      	bpl.n	8001a26 <StartControlTask+0xde>
					charging = 1;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	757b      	strb	r3, [r7, #21]
					led_half = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	75fb      	strb	r3, [r7, #23]
					led_full = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	75bb      	strb	r3, [r7, #22]

					if (g_debug_enabled) {
 8001a14:	4b5a      	ldr	r3, [pc, #360]	@ (8001b80 <StartControlTask+0x238>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d04e      	beq.n	8001abc <StartControlTask+0x174>
						cli_printf("Bright. Charging on.\r\n");
 8001a1e:	485c      	ldr	r0, [pc, #368]	@ (8001b90 <StartControlTask+0x248>)
 8001a20:	f7ff fbd0 	bl	80011c4 <cli_printf>
 8001a24:	e04a      	b.n	8001abc <StartControlTask+0x174>
					}

				} else {
					// Akku már elérte a 95%-ot → töltés leáll
					charging = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	757b      	strb	r3, [r7, #21]
					led_half = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]
					led_full = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	75bb      	strb	r3, [r7, #22]

					if (g_debug_enabled) {
 8001a32:	4b53      	ldr	r3, [pc, #332]	@ (8001b80 <StartControlTask+0x238>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d03f      	beq.n	8001abc <StartControlTask+0x174>
						cli_printf(
 8001a3c:	4855      	ldr	r0, [pc, #340]	@ (8001b94 <StartControlTask+0x24c>)
 8001a3e:	f7ff fbc1 	bl	80011c4 <cli_printf>
 8001a42:	e03b      	b.n	8001abc <StartControlTask+0x174>
								"Battery has reached 95%%, charging stops.\r\n");
					}
				}
			}
			// 6. Fény < 15% (0,495V) és akku >= 35% (3,55V) → fél fény
			else if ((light < 0.495f) && (voltage >= 3.55f)) {
 8001a44:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a48:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001b98 <StartControlTask+0x250>
 8001a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a54:	d52a      	bpl.n	8001aac <StartControlTask+0x164>
 8001a56:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a5a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001b9c <StartControlTask+0x254>
 8001a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a66:	db21      	blt.n	8001aac <StartControlTask+0x164>
				// Mozgás kezelés
				if (motion == GPIO_PIN_SET) {
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d103      	bne.n	8001a76 <StartControlTask+0x12e>
					was_motion = 1;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	753b      	strb	r3, [r7, #20]
					full_brightness_timer = 10; // debug miatt rövidebb: 10ciklus=5sec; (25s/0.5s = 50 ciklus a feladat szerint)
 8001a72:	230a      	movs	r3, #10
 8001a74:	613b      	str	r3, [r7, #16]
				}

				if (was_motion && full_brightness_timer > 0) {
 8001a76:	7d3b      	ldrb	r3, [r7, #20]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <StartControlTask+0x14a>
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <StartControlTask+0x14a>
					led_half = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]
					led_full = 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	75bb      	strb	r3, [r7, #22]
					full_brightness_timer--;
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	e003      	b.n	8001a9a <StartControlTask+0x152>
					// Ha új mozgás, időzítő újraindul
				} else {
					led_half = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	75fb      	strb	r3, [r7, #23]
					led_full = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75bb      	strb	r3, [r7, #22]
				}

				if (motion == GPIO_PIN_RESET && full_brightness_timer == 0) {
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10c      	bne.n	8001aba <StartControlTask+0x172>
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <StartControlTask+0x172>
					was_motion = 0; // visszaáll, ha letelt az időzítő és nincs mozgás
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	753b      	strb	r3, [r7, #20]
				if (motion == GPIO_PIN_RESET && full_brightness_timer == 0) {
 8001aaa:	e006      	b.n	8001aba <StartControlTask+0x172>
				}
			}
			// 7. Egyéb helyzetek: alapból minden lekapcsol
			else {
				led_half = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	75fb      	strb	r3, [r7, #23]
				led_full = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	75bb      	strb	r3, [r7, #22]
				charging = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	757b      	strb	r3, [r7, #21]
 8001ab8:	e000      	b.n	8001abc <StartControlTask+0x174>
				if (motion == GPIO_PIN_RESET && full_brightness_timer == 0) {
 8001aba:	bf00      	nop
			}

			// 8. GPIO kimenetek beállítása (mutex védelem!)
			if (osMutexAcquire(ledMutexHandle, 50) == osOK) {
 8001abc:	4b38      	ldr	r3, [pc, #224]	@ (8001ba0 <StartControlTask+0x258>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2132      	movs	r1, #50	@ 0x32
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 ff9d 	bl	8004a02 <osMutexAcquire>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d125      	bne.n	8001b1a <StartControlTask+0x1d2>
				HAL_GPIO_WritePin(LED_HALF_GPIO_Port, LED_HALF_Pin,
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf14      	ite	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	2300      	moveq	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	2101      	movs	r1, #1
 8001ade:	4831      	ldr	r0, [pc, #196]	@ (8001ba4 <StartControlTask+0x25c>)
 8001ae0:	f001 f9da 	bl	8002e98 <HAL_GPIO_WritePin>
						led_half ? GPIO_PIN_SET : GPIO_PIN_RESET);
				HAL_GPIO_WritePin(LED_FULL_GPIO_Port, LED_FULL_Pin,
 8001ae4:	7dbb      	ldrb	r3, [r7, #22]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf14      	ite	ne
 8001aea:	2301      	movne	r3, #1
 8001aec:	2300      	moveq	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	2102      	movs	r1, #2
 8001af4:	482b      	ldr	r0, [pc, #172]	@ (8001ba4 <StartControlTask+0x25c>)
 8001af6:	f001 f9cf 	bl	8002e98 <HAL_GPIO_WritePin>
						led_full ? GPIO_PIN_SET : GPIO_PIN_RESET);
				HAL_GPIO_WritePin(CHARGE_GPIO_Port, CHARGE_Pin,
 8001afa:	7d7b      	ldrb	r3, [r7, #21]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bf14      	ite	ne
 8001b00:	2301      	movne	r3, #1
 8001b02:	2300      	moveq	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	2104      	movs	r1, #4
 8001b0a:	4826      	ldr	r0, [pc, #152]	@ (8001ba4 <StartControlTask+0x25c>)
 8001b0c:	f001 f9c4 	bl	8002e98 <HAL_GPIO_WritePin>
						charging ? GPIO_PIN_SET : GPIO_PIN_RESET);
				osMutexRelease(ledMutexHandle);
 8001b10:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <StartControlTask+0x258>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 ffbf 	bl	8004a98 <osMutexRelease>
			}

			// 9. DEBUG kiírás (opcionális, csak parancsra indul, cli.c-ben "debug")

			if (g_debug_enabled) {
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <StartControlTask+0x238>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d01f      	beq.n	8001b64 <StartControlTask+0x21c>
				// Első sor: csak float
				cli_printf("ControlTask: Battery=%.2f V\r\n", voltage);
 8001b24:	69b8      	ldr	r0, [r7, #24]
 8001b26:	f7fe fd27 	bl	8000578 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	481e      	ldr	r0, [pc, #120]	@ (8001ba8 <StartControlTask+0x260>)
 8001b30:	f7ff fb48 	bl	80011c4 <cli_printf>
				cli_printf("ControlTask: Light=%.2f V\r\n", light);
 8001b34:	69f8      	ldr	r0, [r7, #28]
 8001b36:	f7fe fd1f 	bl	8000578 <__aeabi_f2d>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	481b      	ldr	r0, [pc, #108]	@ (8001bac <StartControlTask+0x264>)
 8001b40:	f7ff fb40 	bl	80011c4 <cli_printf>

				// Második sor: csak int
				cli_printf(
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	bf0c      	ite	eq
 8001b4a:	2301      	moveq	r3, #1
 8001b4c:	2300      	movne	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	7dfa      	ldrb	r2, [r7, #23]
 8001b54:	7db9      	ldrb	r1, [r7, #22]
 8001b56:	7d7b      	ldrb	r3, [r7, #21]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4601      	mov	r1, r0
 8001b5e:	4814      	ldr	r0, [pc, #80]	@ (8001bb0 <StartControlTask+0x268>)
 8001b60:	f7ff fb30 	bl	80011c4 <cli_printf>
						"ControlTask: Motion=%d, LED_HALF=%d, LED_FULL=%d, CHARGE=%d\r\n",
						(motion == GPIO_PIN_SET) ? 1 : 0, led_half, led_full,
						charging);
			}
			osDelay(500); // 500 ms periódus (2 Hz)
 8001b64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b68:	f002 feaa 	bl	80048c0 <osDelay>
			if (osMutexAcquire(dataMutexHandle, 100) == osOK) {
 8001b6c:	e702      	b.n	8001974 <StartControlTask+0x2c>
 8001b6e:	bf00      	nop
 8001b70:	20000290 	.word	0x20000290
 8001b74:	2000029c 	.word	0x2000029c
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40566666 	.word	0x40566666
 8001b80:	200002d0 	.word	0x200002d0
 8001b84:	0800c628 	.word	0x0800c628
 8001b88:	3fd33333 	.word	0x3fd33333
 8001b8c:	4084cccd 	.word	0x4084cccd
 8001b90:	0800c64c 	.word	0x0800c64c
 8001b94:	0800c664 	.word	0x0800c664
 8001b98:	3efd70a4 	.word	0x3efd70a4
 8001b9c:	40633333 	.word	0x40633333
 8001ba0:	20000294 	.word	0x20000294
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	0800c690 	.word	0x0800c690
 8001bac:	0800c6b0 	.word	0x0800c6b0
 8001bb0:	0800c6cc 	.word	0x0800c6cc

08001bb4 <StartDebugTask>:
 * @brief Function implementing the DebugTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void *argument) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b094      	sub	sp, #80	@ 0x50
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDebugTask */

	char buffer[64];
	uint8_t idx = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t ch = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	72fb      	strb	r3, [r7, #11]

	//cli_printf("DebugTask started!\r\n");	//debug miatt

	/* Infinite loop */
	for (;;) {
		idx = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		memset(buffer, 0, sizeof(buffer));
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	2240      	movs	r2, #64	@ 0x40
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f006 ff15 	bl	8008a04 <memset>

		// Karakteres beolvasás
		while (1) {
			if (HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001bda:	f107 010b 	add.w	r1, r7, #11
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	2201      	movs	r2, #1
 8001be4:	481c      	ldr	r0, [pc, #112]	@ (8001c58 <StartDebugTask+0xa4>)
 8001be6:	f002 f984 	bl	8003ef2 <HAL_UART_Receive>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f4      	bne.n	8001bda <StartDebugTask+0x26>
				HAL_UART_Transmit(&huart2, &ch, 1, 10); // Echo
 8001bf0:	f107 010b 	add.w	r1, r7, #11
 8001bf4:	230a      	movs	r3, #10
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4817      	ldr	r0, [pc, #92]	@ (8001c58 <StartDebugTask+0xa4>)
 8001bfa:	f002 f8ef 	bl	8003ddc <HAL_UART_Transmit>

				// Sorvégződés CR vagy LF
				if (ch == '\r' || ch == '\n') {
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	2b0d      	cmp	r3, #13
 8001c02:	d002      	beq.n	8001c0a <StartDebugTask+0x56>
 8001c04:	7afb      	ldrb	r3, [r7, #11]
 8001c06:	2b0a      	cmp	r3, #10
 8001c08:	d113      	bne.n	8001c32 <StartDebugTask+0x7e>
					buffer[idx] = '\0';
 8001c0a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c0e:	3350      	adds	r3, #80	@ 0x50
 8001c10:	443b      	add	r3, r7
 8001c12:	2200      	movs	r2, #0
 8001c14:	f803 2c44 	strb.w	r2, [r3, #-68]
					break;
 8001c18:	bf00      	nop
					buffer[idx++] = ch;
				}
			}
		}
		//CleanInput(buffer);		//cli-c-ben megírva, helper fgv.
		if (!CLI_ProcessCommand(buffer)) {
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff faf4 	bl	800120c <CLI_ProcessCommand>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f083 0301 	eor.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0ca      	beq.n	8001bc6 <StartDebugTask+0x12>
 8001c30:	e00e      	b.n	8001c50 <StartDebugTask+0x9c>
				} else if (idx < sizeof(buffer) - 1) {
 8001c32:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c36:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c38:	d8cf      	bhi.n	8001bda <StartDebugTask+0x26>
					buffer[idx++] = ch;
 8001c3a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	f887 204f 	strb.w	r2, [r7, #79]	@ 0x4f
 8001c44:	7afa      	ldrb	r2, [r7, #11]
 8001c46:	3350      	adds	r3, #80	@ 0x50
 8001c48:	443b      	add	r3, r7
 8001c4a:	f803 2c44 	strb.w	r2, [r3, #-68]
			if (HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001c4e:	e7c4      	b.n	8001bda <StartDebugTask+0x26>
			cli_printf("Command processing failed.\r\n");
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <StartDebugTask+0xa8>)
 8001c52:	f7ff fab7 	bl	80011c4 <cli_printf>
		idx = 0;
 8001c56:	e7b6      	b.n	8001bc6 <StartDebugTask+0x12>
 8001c58:	2000023c 	.word	0x2000023c
 8001c5c:	0800c70c 	.word	0x0800c70c

08001c60 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM11) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001c72:	f000 fa81 	bl	8002178 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40014800 	.word	0x40014800

08001c84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <Error_Handler+0x8>

08001c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <HAL_MspInit+0x54>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ce4 <HAL_MspInit+0x54>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <HAL_MspInit+0x54>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <HAL_MspInit+0x54>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <HAL_MspInit+0x54>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_MspInit+0x54>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	210f      	movs	r1, #15
 8001cd2:	f06f 0001 	mvn.w	r0, #1
 8001cd6:	f000 ff19 	bl	8002b0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <HAL_ADC_MspInit+0x7c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d127      	bne.n	8001d5a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	4a15      	ldr	r2, [pc, #84]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1a:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <HAL_ADC_MspInit+0x80>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = LIGHT_Pin|BATTERY_Pin;
 8001d42:	23c0      	movs	r3, #192	@ 0xc0
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d46:	2303      	movs	r3, #3
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <HAL_ADC_MspInit+0x84>)
 8001d56:	f000 ff03 	bl	8002b60 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	@ 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40012000 	.word	0x40012000
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020000 	.word	0x40020000

08001d70 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	@ 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	@ (8001df4 <HAL_UART_MspInit+0x84>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d12b      	bne.n	8001dea <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <HAL_UART_MspInit+0x88>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	4a17      	ldr	r2, [pc, #92]	@ (8001df8 <HAL_UART_MspInit+0x88>)
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da2:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <HAL_UART_MspInit+0x88>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <HAL_UART_MspInit+0x88>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	4a10      	ldr	r2, [pc, #64]	@ (8001df8 <HAL_UART_MspInit+0x88>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <HAL_UART_MspInit+0x88>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dca:	230c      	movs	r3, #12
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dda:	2307      	movs	r3, #7
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <HAL_UART_MspInit+0x8c>)
 8001de6:	f000 febb 	bl	8002b60 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	@ 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40004400 	.word	0x40004400
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020000 	.word	0x40020000

08001e00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	@ 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed0 <HAL_InitTick+0xd0>)
 8001e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e18:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed0 <HAL_InitTick+0xd0>)
 8001e1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e20:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed0 <HAL_InitTick+0xd0>)
 8001e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e2c:	f107 020c 	add.w	r2, r7, #12
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f001 fce0 	bl	80037fc <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e3c:	f001 fcca 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 8001e40:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e44:	4a23      	ldr	r2, [pc, #140]	@ (8001ed4 <HAL_InitTick+0xd4>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	0c9b      	lsrs	r3, r3, #18
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001e50:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_InitTick+0xd8>)
 8001e52:	4a22      	ldr	r2, [pc, #136]	@ (8001edc <HAL_InitTick+0xdc>)
 8001e54:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001e56:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <HAL_InitTick+0xd8>)
 8001e58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e5c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed8 <HAL_InitTick+0xd8>)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <HAL_InitTick+0xd8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <HAL_InitTick+0xd8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e70:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <HAL_InitTick+0xd8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001e76:	4818      	ldr	r0, [pc, #96]	@ (8001ed8 <HAL_InitTick+0xd8>)
 8001e78:	f001 fcf2 	bl	8003860 <HAL_TIM_Base_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001e82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d11b      	bne.n	8001ec2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001e8a:	4813      	ldr	r0, [pc, #76]	@ (8001ed8 <HAL_InitTick+0xd8>)
 8001e8c:	f001 fd42 	bl	8003914 <HAL_TIM_Base_Start_IT>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d111      	bne.n	8001ec2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e9e:	201a      	movs	r0, #26
 8001ea0:	f000 fe50 	bl	8002b44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b0f      	cmp	r3, #15
 8001ea8:	d808      	bhi.n	8001ebc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	201a      	movs	r0, #26
 8001eb0:	f000 fe2c 	bl	8002b0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <HAL_InitTick+0xe0>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e002      	b.n	8001ec2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3730      	adds	r7, #48	@ 0x30
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	431bde83 	.word	0x431bde83
 8001ed8:	200002d4 	.word	0x200002d4
 8001edc:	40014800 	.word	0x40014800
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <NMI_Handler+0x4>

08001eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001f20:	4802      	ldr	r0, [pc, #8]	@ (8001f2c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f22:	f001 fd59 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200002d4 	.word	0x200002d4

08001f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return 1;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_kill>:

int _kill(int pid, int sig)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f4a:	f006 fe0b 	bl	8008b64 <__errno>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2216      	movs	r2, #22
 8001f52:	601a      	str	r2, [r3, #0]
  return -1;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_exit>:

void _exit (int status)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ffe7 	bl	8001f40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f72:	bf00      	nop
 8001f74:	e7fd      	b.n	8001f72 <_exit+0x12>

08001f76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e00a      	b.n	8001f9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f88:	f3af 8000 	nop.w
 8001f8c:	4601      	mov	r1, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	60ba      	str	r2, [r7, #8]
 8001f94:	b2ca      	uxtb	r2, r1
 8001f96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	dbf0      	blt.n	8001f88 <_read+0x12>
  }

  return len;
 8001fa6:	687b      	ldr	r3, [r7, #4]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	e009      	b.n	8001fd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	60ba      	str	r2, [r7, #8]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff f8e8 	bl	80011a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	dbf1      	blt.n	8001fc2 <_write+0x12>
  }
  return len;
 8001fde:	687b      	ldr	r3, [r7, #4]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <_close>:

int _close(int file)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002010:	605a      	str	r2, [r3, #4]
  return 0;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <_isatty>:

int _isatty(int file)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002028:	2301      	movs	r3, #1
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002058:	4a14      	ldr	r2, [pc, #80]	@ (80020ac <_sbrk+0x5c>)
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <_sbrk+0x60>)
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002064:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <_sbrk+0x64>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <_sbrk+0x64>)
 800206e:	4a12      	ldr	r2, [pc, #72]	@ (80020b8 <_sbrk+0x68>)
 8002070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002072:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	429a      	cmp	r2, r3
 800207e:	d207      	bcs.n	8002090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002080:	f006 fd70 	bl	8008b64 <__errno>
 8002084:	4603      	mov	r3, r0
 8002086:	220c      	movs	r2, #12
 8002088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	e009      	b.n	80020a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002090:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002096:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	4a05      	ldr	r2, [pc, #20]	@ (80020b4 <_sbrk+0x64>)
 80020a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a2:	68fb      	ldr	r3, [r7, #12]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20020000 	.word	0x20020000
 80020b0:	00000400 	.word	0x00000400
 80020b4:	2000031c 	.word	0x2000031c
 80020b8:	20006258 	.word	0x20006258

080020bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <SystemInit+0x20>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c6:	4a05      	ldr	r2, [pc, #20]	@ (80020dc <SystemInit+0x20>)
 80020c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002118 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020e4:	f7ff ffea 	bl	80020bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e8:	480c      	ldr	r0, [pc, #48]	@ (800211c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ea:	490d      	ldr	r1, [pc, #52]	@ (8002120 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002124 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f0:	e002      	b.n	80020f8 <LoopCopyDataInit>

080020f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f6:	3304      	adds	r3, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020fc:	d3f9      	bcc.n	80020f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002100:	4c0a      	ldr	r4, [pc, #40]	@ (800212c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002104:	e001      	b.n	800210a <LoopFillZerobss>

08002106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002108:	3204      	adds	r2, #4

0800210a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800210c:	d3fb      	bcc.n	8002106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210e:	f006 fd2f 	bl	8008b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002112:	f7ff f979 	bl	8001408 <main>
  bx  lr    
 8002116:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002118:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800211c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002120:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002124:	0800cc34 	.word	0x0800cc34
  ldr r2, =_sbss
 8002128:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800212c:	20006258 	.word	0x20006258

08002130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002130:	e7fe      	b.n	8002130 <ADC_IRQHandler>
	...

08002134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002138:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0d      	ldr	r2, [pc, #52]	@ (8002174 <HAL_Init+0x40>)
 800213e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <HAL_Init+0x40>)
 800214a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800214e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a07      	ldr	r2, [pc, #28]	@ (8002174 <HAL_Init+0x40>)
 8002156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215c:	2003      	movs	r0, #3
 800215e:	f000 fcca 	bl	8002af6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002162:	200f      	movs	r0, #15
 8002164:	f7ff fe4c 	bl	8001e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002168:	f7ff fd92 	bl	8001c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023c00 	.word	0x40023c00

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008
 800219c:	20000320 	.word	0x20000320

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000320 	.word	0x20000320

080021b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e033      	b.n	8002236 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fd86 	bl	8001ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021fe:	f023 0302 	bic.w	r3, r3, #2
 8002202:	f043 0202 	orr.w	r2, r3, #2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 faca 	bl	80027a4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	f023 0303 	bic.w	r3, r3, #3
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	641a      	str	r2, [r3, #64]	@ 0x40
 8002226:	e001      	b.n	800222c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_ADC_Start+0x1a>
 8002256:	2302      	movs	r3, #2
 8002258:	e097      	b.n	800238a <HAL_ADC_Start+0x14a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d018      	beq.n	80022a2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002280:	4b45      	ldr	r3, [pc, #276]	@ (8002398 <HAL_ADC_Start+0x158>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a45      	ldr	r2, [pc, #276]	@ (800239c <HAL_ADC_Start+0x15c>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	0c9a      	lsrs	r2, r3, #18
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002294:	e002      	b.n	800229c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	3b01      	subs	r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f9      	bne.n	8002296 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d15f      	bne.n	8002370 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ee:	d106      	bne.n	80022fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f4:	f023 0206 	bic.w	r2, r3, #6
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80022fc:	e002      	b.n	8002304 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800230c:	4b24      	ldr	r3, [pc, #144]	@ (80023a0 <HAL_ADC_Start+0x160>)
 800230e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002318:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d129      	bne.n	8002388 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	e020      	b.n	8002388 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a16      	ldr	r2, [pc, #88]	@ (80023a4 <HAL_ADC_Start+0x164>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d11b      	bne.n	8002388 <HAL_ADC_Start+0x148>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d114      	bne.n	8002388 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	e00b      	b.n	8002388 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	f043 0210 	orr.w	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000000 	.word	0x20000000
 800239c:	431bde83 	.word	0x431bde83
 80023a0:	40012300 	.word	0x40012300
 80023a4:	40012000 	.word	0x40012000

080023a8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_ADC_Stop+0x16>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e021      	b.n	8002402 <HAL_ADC_Stop+0x5a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800242a:	d113      	bne.n	8002454 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800243a:	d10b      	bne.n	8002454 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e063      	b.n	800251c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002454:	f7ff fea4 	bl	80021a0 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800245a:	e021      	b.n	80024a0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002462:	d01d      	beq.n	80024a0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <HAL_ADC_PollForConversion+0x6c>
 800246a:	f7ff fe99 	bl	80021a0 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d212      	bcs.n	80024a0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b02      	cmp	r3, #2
 8002486:	d00b      	beq.n	80024a0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f043 0204 	orr.w	r2, r3, #4
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e03d      	b.n	800251c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d1d6      	bne.n	800245c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f06f 0212 	mvn.w	r2, #18
 80024b6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d123      	bne.n	800251a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11f      	bne.n	800251a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d111      	bne.n	800251a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d105      	bne.n	800251a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x1c>
 8002558:	2302      	movs	r3, #2
 800255a:	e113      	b.n	8002784 <HAL_ADC_ConfigChannel+0x244>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b09      	cmp	r3, #9
 800256a:	d925      	bls.n	80025b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68d9      	ldr	r1, [r3, #12]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	4613      	mov	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	3b1e      	subs	r3, #30
 8002582:	2207      	movs	r2, #7
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43da      	mvns	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	400a      	ands	r2, r1
 8002590:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68d9      	ldr	r1, [r3, #12]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	4603      	mov	r3, r0
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4403      	add	r3, r0
 80025aa:	3b1e      	subs	r3, #30
 80025ac:	409a      	lsls	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	e022      	b.n	80025fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6919      	ldr	r1, [r3, #16]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	2207      	movs	r2, #7
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	400a      	ands	r2, r1
 80025da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6919      	ldr	r1, [r3, #16]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4403      	add	r3, r0
 80025f4:	409a      	lsls	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b06      	cmp	r3, #6
 8002604:	d824      	bhi.n	8002650 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	3b05      	subs	r3, #5
 8002618:	221f      	movs	r2, #31
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	400a      	ands	r2, r1
 8002626:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	3b05      	subs	r3, #5
 8002642:	fa00 f203 	lsl.w	r2, r0, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	635a      	str	r2, [r3, #52]	@ 0x34
 800264e:	e04c      	b.n	80026ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d824      	bhi.n	80026a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	3b23      	subs	r3, #35	@ 0x23
 800266a:	221f      	movs	r2, #31
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43da      	mvns	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	400a      	ands	r2, r1
 8002678:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	4618      	mov	r0, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	3b23      	subs	r3, #35	@ 0x23
 8002694:	fa00 f203 	lsl.w	r2, r0, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	631a      	str	r2, [r3, #48]	@ 0x30
 80026a0:	e023      	b.n	80026ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	3b41      	subs	r3, #65	@ 0x41
 80026b4:	221f      	movs	r2, #31
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	400a      	ands	r2, r1
 80026c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	3b41      	subs	r3, #65	@ 0x41
 80026de:	fa00 f203 	lsl.w	r2, r0, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ea:	4b29      	ldr	r3, [pc, #164]	@ (8002790 <HAL_ADC_ConfigChannel+0x250>)
 80026ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a28      	ldr	r2, [pc, #160]	@ (8002794 <HAL_ADC_ConfigChannel+0x254>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d10f      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x1d8>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b12      	cmp	r3, #18
 80026fe:	d10b      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1d      	ldr	r2, [pc, #116]	@ (8002794 <HAL_ADC_ConfigChannel+0x254>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d12b      	bne.n	800277a <HAL_ADC_ConfigChannel+0x23a>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <HAL_ADC_ConfigChannel+0x258>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d003      	beq.n	8002734 <HAL_ADC_ConfigChannel+0x1f4>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b11      	cmp	r3, #17
 8002732:	d122      	bne.n	800277a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a11      	ldr	r2, [pc, #68]	@ (8002798 <HAL_ADC_ConfigChannel+0x258>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d111      	bne.n	800277a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002756:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_ADC_ConfigChannel+0x25c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <HAL_ADC_ConfigChannel+0x260>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	0c9a      	lsrs	r2, r3, #18
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800276c:	e002      	b.n	8002774 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3b01      	subs	r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f9      	bne.n	800276e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40012300 	.word	0x40012300
 8002794:	40012000 	.word	0x40012000
 8002798:	10000012 	.word	0x10000012
 800279c:	20000000 	.word	0x20000000
 80027a0:	431bde83 	.word	0x431bde83

080027a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ac:	4b79      	ldr	r3, [pc, #484]	@ (8002994 <ADC_Init+0x1f0>)
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	021a      	lsls	r2, r3, #8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800281e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6899      	ldr	r1, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002836:	4a58      	ldr	r2, [pc, #352]	@ (8002998 <ADC_Init+0x1f4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d022      	beq.n	8002882 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800284a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6899      	ldr	r1, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800286c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6899      	ldr	r1, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	e00f      	b.n	80028a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002890:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0202 	bic.w	r2, r2, #2
 80028b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6899      	ldr	r1, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7e1b      	ldrb	r3, [r3, #24]
 80028bc:	005a      	lsls	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028de:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	3b01      	subs	r3, #1
 80028fc:	035a      	lsls	r2, r3, #13
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	e007      	b.n	8002918 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002916:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002926:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	3b01      	subs	r3, #1
 8002934:	051a      	lsls	r2, r3, #20
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800294c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800295a:	025a      	lsls	r2, r3, #9
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002972:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	029a      	lsls	r2, r3, #10
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40012300 	.word	0x40012300
 8002998:	0f000001 	.word	0x0f000001

0800299c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ce:	4a04      	ldr	r2, [pc, #16]	@ (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e8:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <__NVIC_GetPriorityGrouping+0x18>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 0307 	and.w	r3, r3, #7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	db0b      	blt.n	8002a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4907      	ldr	r1, [pc, #28]	@ (8002a38 <__NVIC_EnableIRQ+0x38>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f202 	lsl.w	r2, r0, r2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db0a      	blt.n	8002a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	490c      	ldr	r1, [pc, #48]	@ (8002a88 <__NVIC_SetPriority+0x4c>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a64:	e00a      	b.n	8002a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4908      	ldr	r1, [pc, #32]	@ (8002a8c <__NVIC_SetPriority+0x50>)
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3b04      	subs	r3, #4
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	440b      	add	r3, r1
 8002a7a:	761a      	strb	r2, [r3, #24]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000e100 	.word	0xe000e100
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	@ 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f1c3 0307 	rsb	r3, r3, #7
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	bf28      	it	cs
 8002aae:	2304      	movcs	r3, #4
 8002ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d902      	bls.n	8002ac0 <NVIC_EncodePriority+0x30>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3b03      	subs	r3, #3
 8002abe:	e000      	b.n	8002ac2 <NVIC_EncodePriority+0x32>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	4313      	orrs	r3, r2
         );
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	@ 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ff4c 	bl	800299c <__NVIC_SetPriorityGrouping>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b1e:	f7ff ff61 	bl	80029e4 <__NVIC_GetPriorityGrouping>
 8002b22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	6978      	ldr	r0, [r7, #20]
 8002b2a:	f7ff ffb1 	bl	8002a90 <NVIC_EncodePriority>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff80 	bl	8002a3c <__NVIC_SetPriority>
}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff54 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	@ 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	e159      	b.n	8002e30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	f040 8148 	bne.w	8002e2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d005      	beq.n	8002bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d130      	bne.n	8002c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 0201 	and.w	r2, r3, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d017      	beq.n	8002c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d123      	bne.n	8002ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	08da      	lsrs	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3208      	adds	r2, #8
 8002c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	220f      	movs	r2, #15
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	69b9      	ldr	r1, [r7, #24]
 8002ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0203 	and.w	r2, r3, #3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80a2 	beq.w	8002e2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b57      	ldr	r3, [pc, #348]	@ (8002e48 <HAL_GPIO_Init+0x2e8>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	4a56      	ldr	r2, [pc, #344]	@ (8002e48 <HAL_GPIO_Init+0x2e8>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cf6:	4b54      	ldr	r3, [pc, #336]	@ (8002e48 <HAL_GPIO_Init+0x2e8>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d02:	4a52      	ldr	r2, [pc, #328]	@ (8002e4c <HAL_GPIO_Init+0x2ec>)
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a49      	ldr	r2, [pc, #292]	@ (8002e50 <HAL_GPIO_Init+0x2f0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d019      	beq.n	8002d62 <HAL_GPIO_Init+0x202>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a48      	ldr	r2, [pc, #288]	@ (8002e54 <HAL_GPIO_Init+0x2f4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_GPIO_Init+0x1fe>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a47      	ldr	r2, [pc, #284]	@ (8002e58 <HAL_GPIO_Init+0x2f8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00d      	beq.n	8002d5a <HAL_GPIO_Init+0x1fa>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a46      	ldr	r2, [pc, #280]	@ (8002e5c <HAL_GPIO_Init+0x2fc>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <HAL_GPIO_Init+0x1f6>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a45      	ldr	r2, [pc, #276]	@ (8002e60 <HAL_GPIO_Init+0x300>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d101      	bne.n	8002d52 <HAL_GPIO_Init+0x1f2>
 8002d4e:	2304      	movs	r3, #4
 8002d50:	e008      	b.n	8002d64 <HAL_GPIO_Init+0x204>
 8002d52:	2307      	movs	r3, #7
 8002d54:	e006      	b.n	8002d64 <HAL_GPIO_Init+0x204>
 8002d56:	2303      	movs	r3, #3
 8002d58:	e004      	b.n	8002d64 <HAL_GPIO_Init+0x204>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e002      	b.n	8002d64 <HAL_GPIO_Init+0x204>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_GPIO_Init+0x204>
 8002d62:	2300      	movs	r3, #0
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	f002 0203 	and.w	r2, r2, #3
 8002d6a:	0092      	lsls	r2, r2, #2
 8002d6c:	4093      	lsls	r3, r2
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d74:	4935      	ldr	r1, [pc, #212]	@ (8002e4c <HAL_GPIO_Init+0x2ec>)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	089b      	lsrs	r3, r3, #2
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d82:	4b38      	ldr	r3, [pc, #224]	@ (8002e64 <HAL_GPIO_Init+0x304>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da6:	4a2f      	ldr	r2, [pc, #188]	@ (8002e64 <HAL_GPIO_Init+0x304>)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dac:	4b2d      	ldr	r3, [pc, #180]	@ (8002e64 <HAL_GPIO_Init+0x304>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd0:	4a24      	ldr	r2, [pc, #144]	@ (8002e64 <HAL_GPIO_Init+0x304>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd6:	4b23      	ldr	r3, [pc, #140]	@ (8002e64 <HAL_GPIO_Init+0x304>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8002e64 <HAL_GPIO_Init+0x304>)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e00:	4b18      	ldr	r3, [pc, #96]	@ (8002e64 <HAL_GPIO_Init+0x304>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e24:	4a0f      	ldr	r2, [pc, #60]	@ (8002e64 <HAL_GPIO_Init+0x304>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b0f      	cmp	r3, #15
 8002e34:	f67f aea2 	bls.w	8002b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	3724      	adds	r7, #36	@ 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40013800 	.word	0x40013800
 8002e50:	40020000 	.word	0x40020000
 8002e54:	40020400 	.word	0x40020400
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40020c00 	.word	0x40020c00
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40013c00 	.word	0x40013c00

08002e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	887b      	ldrh	r3, [r7, #2]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	e001      	b.n	8002e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea8:	787b      	ldrb	r3, [r7, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb4:	e003      	b.n	8002ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eb6:	887b      	ldrh	r3, [r7, #2]
 8002eb8:	041a      	lsls	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e267      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d075      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eea:	4b88      	ldr	r3, [pc, #544]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d00c      	beq.n	8002f10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef6:	4b85      	ldr	r3, [pc, #532]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d112      	bne.n	8002f28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f02:	4b82      	ldr	r3, [pc, #520]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f0e:	d10b      	bne.n	8002f28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	4b7e      	ldr	r3, [pc, #504]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d05b      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x108>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d157      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e242      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f30:	d106      	bne.n	8002f40 <HAL_RCC_OscConfig+0x74>
 8002f32:	4b76      	ldr	r3, [pc, #472]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a75      	ldr	r2, [pc, #468]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e01d      	b.n	8002f7c <HAL_RCC_OscConfig+0xb0>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x98>
 8002f4a:	4b70      	ldr	r3, [pc, #448]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6f      	ldr	r2, [pc, #444]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b6d      	ldr	r3, [pc, #436]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6c      	ldr	r2, [pc, #432]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xb0>
 8002f64:	4b69      	ldr	r3, [pc, #420]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a68      	ldr	r2, [pc, #416]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b66      	ldr	r3, [pc, #408]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a65      	ldr	r2, [pc, #404]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7ff f90c 	bl	80021a0 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7ff f908 	bl	80021a0 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e207      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b5b      	ldr	r3, [pc, #364]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xc0>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7ff f8f8 	bl	80021a0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7ff f8f4 	bl	80021a0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	@ 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1f3      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	4b51      	ldr	r3, [pc, #324]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0xe8>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d063      	beq.n	80030aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fee:	4b47      	ldr	r3, [pc, #284]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d11c      	bne.n	8003034 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffa:	4b44      	ldr	r3, [pc, #272]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	4b41      	ldr	r3, [pc, #260]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_RCC_OscConfig+0x152>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1c7      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	4b3b      	ldr	r3, [pc, #236]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4937      	ldr	r1, [pc, #220]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	e03a      	b.n	80030aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303c:	4b34      	ldr	r3, [pc, #208]	@ (8003110 <HAL_RCC_OscConfig+0x244>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003042:	f7ff f8ad 	bl	80021a0 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304a:	f7ff f8a9 	bl	80021a0 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e1a8      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	4b2b      	ldr	r3, [pc, #172]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4b28      	ldr	r3, [pc, #160]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4925      	ldr	r1, [pc, #148]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
 800307c:	e015      	b.n	80030aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307e:	4b24      	ldr	r3, [pc, #144]	@ (8003110 <HAL_RCC_OscConfig+0x244>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7ff f88c 	bl	80021a0 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308c:	f7ff f888 	bl	80021a0 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e187      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d036      	beq.n	8003124 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d016      	beq.n	80030ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030be:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <HAL_RCC_OscConfig+0x248>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7ff f86c 	bl	80021a0 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030cc:	f7ff f868 	bl	80021a0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e167      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <HAL_RCC_OscConfig+0x240>)
 80030e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x200>
 80030ea:	e01b      	b.n	8003124 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ec:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <HAL_RCC_OscConfig+0x248>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f2:	f7ff f855 	bl	80021a0 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f8:	e00e      	b.n	8003118 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fa:	f7ff f851 	bl	80021a0 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d907      	bls.n	8003118 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e150      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
 800310c:	40023800 	.word	0x40023800
 8003110:	42470000 	.word	0x42470000
 8003114:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003118:	4b88      	ldr	r3, [pc, #544]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 800311a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ea      	bne.n	80030fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8097 	beq.w	8003260 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003132:	2300      	movs	r3, #0
 8003134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003136:	4b81      	ldr	r3, [pc, #516]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10f      	bne.n	8003162 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	4b7d      	ldr	r3, [pc, #500]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	4a7c      	ldr	r2, [pc, #496]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003150:	6413      	str	r3, [r2, #64]	@ 0x40
 8003152:	4b7a      	ldr	r3, [pc, #488]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315e:	2301      	movs	r3, #1
 8003160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003162:	4b77      	ldr	r3, [pc, #476]	@ (8003340 <HAL_RCC_OscConfig+0x474>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d118      	bne.n	80031a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316e:	4b74      	ldr	r3, [pc, #464]	@ (8003340 <HAL_RCC_OscConfig+0x474>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a73      	ldr	r2, [pc, #460]	@ (8003340 <HAL_RCC_OscConfig+0x474>)
 8003174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317a:	f7ff f811 	bl	80021a0 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003182:	f7ff f80d 	bl	80021a0 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e10c      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	4b6a      	ldr	r3, [pc, #424]	@ (8003340 <HAL_RCC_OscConfig+0x474>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x2ea>
 80031a8:	4b64      	ldr	r3, [pc, #400]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ac:	4a63      	ldr	r2, [pc, #396]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b4:	e01c      	b.n	80031f0 <HAL_RCC_OscConfig+0x324>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b05      	cmp	r3, #5
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x30c>
 80031be:	4b5f      	ldr	r3, [pc, #380]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c2:	4a5e      	ldr	r2, [pc, #376]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ca:	4b5c      	ldr	r3, [pc, #368]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	4a5b      	ldr	r2, [pc, #364]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d6:	e00b      	b.n	80031f0 <HAL_RCC_OscConfig+0x324>
 80031d8:	4b58      	ldr	r3, [pc, #352]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031dc:	4a57      	ldr	r2, [pc, #348]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80031de:	f023 0301 	bic.w	r3, r3, #1
 80031e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e4:	4b55      	ldr	r3, [pc, #340]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e8:	4a54      	ldr	r2, [pc, #336]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80031ea:	f023 0304 	bic.w	r3, r3, #4
 80031ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d015      	beq.n	8003224 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fe ffd2 	bl	80021a0 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003200:	f7fe ffce 	bl	80021a0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e0cb      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003216:	4b49      	ldr	r3, [pc, #292]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0ee      	beq.n	8003200 <HAL_RCC_OscConfig+0x334>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003224:	f7fe ffbc 	bl	80021a0 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322a:	e00a      	b.n	8003242 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f7fe ffb8 	bl	80021a0 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e0b5      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003242:	4b3e      	ldr	r3, [pc, #248]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1ee      	bne.n	800322c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003254:	4b39      	ldr	r3, [pc, #228]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	4a38      	ldr	r2, [pc, #224]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 800325a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800325e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80a1 	beq.w	80033ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800326a:	4b34      	ldr	r3, [pc, #208]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b08      	cmp	r3, #8
 8003274:	d05c      	beq.n	8003330 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d141      	bne.n	8003302 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327e:	4b31      	ldr	r3, [pc, #196]	@ (8003344 <HAL_RCC_OscConfig+0x478>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fe ff8c 	bl	80021a0 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fe ff88 	bl	80021a0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e087      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329e:	4b27      	ldr	r3, [pc, #156]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69da      	ldr	r2, [r3, #28]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	019b      	lsls	r3, r3, #6
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	3b01      	subs	r3, #1
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	061b      	lsls	r3, r3, #24
 80032ce:	491b      	ldr	r1, [pc, #108]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003344 <HAL_RCC_OscConfig+0x478>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fe ff61 	bl	80021a0 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e2:	f7fe ff5d 	bl	80021a0 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e05c      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f4:	4b11      	ldr	r3, [pc, #68]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x416>
 8003300:	e054      	b.n	80033ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b10      	ldr	r3, [pc, #64]	@ (8003344 <HAL_RCC_OscConfig+0x478>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe ff4a 	bl	80021a0 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe ff46 	bl	80021a0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e045      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	4b06      	ldr	r3, [pc, #24]	@ (800333c <HAL_RCC_OscConfig+0x470>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x444>
 800332e:	e03d      	b.n	80033ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d107      	bne.n	8003348 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e038      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
 800333c:	40023800 	.word	0x40023800
 8003340:	40007000 	.word	0x40007000
 8003344:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003348:	4b1b      	ldr	r3, [pc, #108]	@ (80033b8 <HAL_RCC_OscConfig+0x4ec>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d028      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d121      	bne.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d11a      	bne.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003378:	4013      	ands	r3, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800337e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003380:	4293      	cmp	r3, r2
 8003382:	d111      	bne.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338e:	085b      	lsrs	r3, r3, #1
 8003390:	3b01      	subs	r3, #1
 8003392:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800

080033bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0cc      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b68      	ldr	r3, [pc, #416]	@ (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d90c      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b65      	ldr	r3, [pc, #404]	@ (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b63      	ldr	r3, [pc, #396]	@ (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b8      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003410:	4b59      	ldr	r3, [pc, #356]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a58      	ldr	r2, [pc, #352]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800341a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003428:	4b53      	ldr	r3, [pc, #332]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4a52      	ldr	r2, [pc, #328]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003432:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b50      	ldr	r3, [pc, #320]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	494d      	ldr	r1, [pc, #308]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d044      	beq.n	80034dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b47      	ldr	r3, [pc, #284]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d119      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d003      	beq.n	800347a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003476:	2b03      	cmp	r3, #3
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	4b3f      	ldr	r3, [pc, #252]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e06f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348a:	4b3b      	ldr	r3, [pc, #236]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e067      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349a:	4b37      	ldr	r3, [pc, #220]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4934      	ldr	r1, [pc, #208]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ac:	f7fe fe78 	bl	80021a0 <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7fe fe74 	bl	80021a0 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e04f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 020c 	and.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1eb      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034dc:	4b25      	ldr	r3, [pc, #148]	@ (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d20c      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b22      	ldr	r3, [pc, #136]	@ (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b20      	ldr	r3, [pc, #128]	@ (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e032      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003510:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4916      	ldr	r1, [pc, #88]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352e:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	490e      	ldr	r1, [pc, #56]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003542:	f000 f821 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8003546:	4602      	mov	r2, r0
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	490a      	ldr	r1, [pc, #40]	@ (800357c <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	5ccb      	ldrb	r3, [r1, r3]
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	4a09      	ldr	r2, [pc, #36]	@ (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800355e:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fc4c 	bl	8001e00 <HAL_InitTick>

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023c00 	.word	0x40023c00
 8003578:	40023800 	.word	0x40023800
 800357c:	0800c7e0 	.word	0x0800c7e0
 8003580:	20000000 	.word	0x20000000
 8003584:	20000004 	.word	0x20000004

08003588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800358c:	b094      	sub	sp, #80	@ 0x50
 800358e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a0:	4b79      	ldr	r3, [pc, #484]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d00d      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x40>
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	f200 80e1 	bhi.w	8003774 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x34>
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d003      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ba:	e0db      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035bc:	4b73      	ldr	r3, [pc, #460]	@ (800378c <HAL_RCC_GetSysClockFreq+0x204>)
 80035be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035c0:	e0db      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c2:	4b73      	ldr	r3, [pc, #460]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x208>)
 80035c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035c6:	e0d8      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d063      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035de:	4b6a      	ldr	r3, [pc, #424]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	099b      	lsrs	r3, r3, #6
 80035e4:	2200      	movs	r2, #0
 80035e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035f2:	2300      	movs	r3, #0
 80035f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80035f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035fa:	4622      	mov	r2, r4
 80035fc:	462b      	mov	r3, r5
 80035fe:	f04f 0000 	mov.w	r0, #0
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	0159      	lsls	r1, r3, #5
 8003608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800360c:	0150      	lsls	r0, r2, #5
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4621      	mov	r1, r4
 8003614:	1a51      	subs	r1, r2, r1
 8003616:	6139      	str	r1, [r7, #16]
 8003618:	4629      	mov	r1, r5
 800361a:	eb63 0301 	sbc.w	r3, r3, r1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800362c:	4659      	mov	r1, fp
 800362e:	018b      	lsls	r3, r1, #6
 8003630:	4651      	mov	r1, sl
 8003632:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003636:	4651      	mov	r1, sl
 8003638:	018a      	lsls	r2, r1, #6
 800363a:	4651      	mov	r1, sl
 800363c:	ebb2 0801 	subs.w	r8, r2, r1
 8003640:	4659      	mov	r1, fp
 8003642:	eb63 0901 	sbc.w	r9, r3, r1
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800365a:	4690      	mov	r8, r2
 800365c:	4699      	mov	r9, r3
 800365e:	4623      	mov	r3, r4
 8003660:	eb18 0303 	adds.w	r3, r8, r3
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	462b      	mov	r3, r5
 8003668:	eb49 0303 	adc.w	r3, r9, r3
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800367a:	4629      	mov	r1, r5
 800367c:	024b      	lsls	r3, r1, #9
 800367e:	4621      	mov	r1, r4
 8003680:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003684:	4621      	mov	r1, r4
 8003686:	024a      	lsls	r2, r1, #9
 8003688:	4610      	mov	r0, r2
 800368a:	4619      	mov	r1, r3
 800368c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800368e:	2200      	movs	r2, #0
 8003690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003692:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003694:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003698:	f7fd fb0e 	bl	8000cb8 <__aeabi_uldivmod>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4613      	mov	r3, r2
 80036a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a4:	e058      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a6:	4b38      	ldr	r3, [pc, #224]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	099b      	lsrs	r3, r3, #6
 80036ac:	2200      	movs	r2, #0
 80036ae:	4618      	mov	r0, r3
 80036b0:	4611      	mov	r1, r2
 80036b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036b6:	623b      	str	r3, [r7, #32]
 80036b8:	2300      	movs	r3, #0
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80036bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036c0:	4642      	mov	r2, r8
 80036c2:	464b      	mov	r3, r9
 80036c4:	f04f 0000 	mov.w	r0, #0
 80036c8:	f04f 0100 	mov.w	r1, #0
 80036cc:	0159      	lsls	r1, r3, #5
 80036ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d2:	0150      	lsls	r0, r2, #5
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4641      	mov	r1, r8
 80036da:	ebb2 0a01 	subs.w	sl, r2, r1
 80036de:	4649      	mov	r1, r9
 80036e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036f8:	ebb2 040a 	subs.w	r4, r2, sl
 80036fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	00eb      	lsls	r3, r5, #3
 800370a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800370e:	00e2      	lsls	r2, r4, #3
 8003710:	4614      	mov	r4, r2
 8003712:	461d      	mov	r5, r3
 8003714:	4643      	mov	r3, r8
 8003716:	18e3      	adds	r3, r4, r3
 8003718:	603b      	str	r3, [r7, #0]
 800371a:	464b      	mov	r3, r9
 800371c:	eb45 0303 	adc.w	r3, r5, r3
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800372e:	4629      	mov	r1, r5
 8003730:	028b      	lsls	r3, r1, #10
 8003732:	4621      	mov	r1, r4
 8003734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003738:	4621      	mov	r1, r4
 800373a:	028a      	lsls	r2, r1, #10
 800373c:	4610      	mov	r0, r2
 800373e:	4619      	mov	r1, r3
 8003740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003742:	2200      	movs	r2, #0
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	61fa      	str	r2, [r7, #28]
 8003748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800374c:	f7fd fab4 	bl	8000cb8 <__aeabi_uldivmod>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4613      	mov	r3, r2
 8003756:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003758:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x200>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	0c1b      	lsrs	r3, r3, #16
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	3301      	adds	r3, #1
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003768:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800376a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003772:	e002      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003774:	4b05      	ldr	r3, [pc, #20]	@ (800378c <HAL_RCC_GetSysClockFreq+0x204>)
 8003776:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800377a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800377c:	4618      	mov	r0, r3
 800377e:	3750      	adds	r7, #80	@ 0x50
 8003780:	46bd      	mov	sp, r7
 8003782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800
 800378c:	00f42400 	.word	0x00f42400
 8003790:	007a1200 	.word	0x007a1200

08003794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003798:	4b03      	ldr	r3, [pc, #12]	@ (80037a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000000 	.word	0x20000000

080037ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037b0:	f7ff fff0 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037b4:	4602      	mov	r2, r0
 80037b6:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	0a9b      	lsrs	r3, r3, #10
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	4903      	ldr	r1, [pc, #12]	@ (80037d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c2:	5ccb      	ldrb	r3, [r1, r3]
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40023800 	.word	0x40023800
 80037d0:	0800c7f0 	.word	0x0800c7f0

080037d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037d8:	f7ff ffdc 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037dc:	4602      	mov	r2, r0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	0b5b      	lsrs	r3, r3, #13
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4903      	ldr	r1, [pc, #12]	@ (80037f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ea:	5ccb      	ldrb	r3, [r1, r3]
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800
 80037f8:	0800c7f0 	.word	0x0800c7f0

080037fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	220f      	movs	r2, #15
 800380a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800380c:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <HAL_RCC_GetClockConfig+0x5c>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0203 	and.w	r2, r3, #3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003818:	4b0f      	ldr	r3, [pc, #60]	@ (8003858 <HAL_RCC_GetClockConfig+0x5c>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003824:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <HAL_RCC_GetClockConfig+0x5c>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003830:	4b09      	ldr	r3, [pc, #36]	@ (8003858 <HAL_RCC_GetClockConfig+0x5c>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	08db      	lsrs	r3, r3, #3
 8003836:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800383e:	4b07      	ldr	r3, [pc, #28]	@ (800385c <HAL_RCC_GetClockConfig+0x60>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0207 	and.w	r2, r3, #7
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800
 800385c:	40023c00 	.word	0x40023c00

08003860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e041      	b.n	80038f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f839 	bl	80038fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f000 f9b2 	bl	8003c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d001      	beq.n	800392c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e044      	b.n	80039b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1e      	ldr	r2, [pc, #120]	@ (80039c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d018      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x6c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003956:	d013      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x6c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x6c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a19      	ldr	r2, [pc, #100]	@ (80039cc <HAL_TIM_Base_Start_IT+0xb8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x6c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a17      	ldr	r2, [pc, #92]	@ (80039d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x6c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a16      	ldr	r2, [pc, #88]	@ (80039d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d111      	bne.n	80039a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b06      	cmp	r3, #6
 8003990:	d010      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a2:	e007      	b.n	80039b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40010000 	.word	0x40010000
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40014000 	.word	0x40014000

080039d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d020      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01b      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0202 	mvn.w	r2, #2
 8003a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8d2 	bl	8003bcc <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8c4 	bl	8003bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f8d5 	bl	8003be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d020      	beq.n	8003a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01b      	beq.n	8003a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0204 	mvn.w	r2, #4
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8ac 	bl	8003bcc <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f89e 	bl	8003bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f8af 	bl	8003be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d020      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01b      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0208 	mvn.w	r2, #8
 8003aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f886 	bl	8003bcc <HAL_TIM_IC_CaptureCallback>
 8003ac0:	e005      	b.n	8003ace <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f878 	bl	8003bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f889 	bl	8003be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d020      	beq.n	8003b20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01b      	beq.n	8003b20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0210 	mvn.w	r2, #16
 8003af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2208      	movs	r2, #8
 8003af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f860 	bl	8003bcc <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f852 	bl	8003bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f863 	bl	8003be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00c      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d007      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0201 	mvn.w	r2, #1
 8003b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fe f88e 	bl	8001c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00c      	beq.n	8003b68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f8e0 	bl	8003d28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00c      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f834 	bl	8003bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0220 	mvn.w	r2, #32
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f8b2 	bl	8003d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a37      	ldr	r2, [pc, #220]	@ (8003cf8 <TIM_Base_SetConfig+0xf0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00f      	beq.n	8003c40 <TIM_Base_SetConfig+0x38>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c26:	d00b      	beq.n	8003c40 <TIM_Base_SetConfig+0x38>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a34      	ldr	r2, [pc, #208]	@ (8003cfc <TIM_Base_SetConfig+0xf4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_Base_SetConfig+0x38>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a33      	ldr	r2, [pc, #204]	@ (8003d00 <TIM_Base_SetConfig+0xf8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_Base_SetConfig+0x38>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a32      	ldr	r2, [pc, #200]	@ (8003d04 <TIM_Base_SetConfig+0xfc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d108      	bne.n	8003c52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a28      	ldr	r2, [pc, #160]	@ (8003cf8 <TIM_Base_SetConfig+0xf0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01b      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c60:	d017      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a25      	ldr	r2, [pc, #148]	@ (8003cfc <TIM_Base_SetConfig+0xf4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a24      	ldr	r2, [pc, #144]	@ (8003d00 <TIM_Base_SetConfig+0xf8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00f      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a23      	ldr	r2, [pc, #140]	@ (8003d04 <TIM_Base_SetConfig+0xfc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00b      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a22      	ldr	r2, [pc, #136]	@ (8003d08 <TIM_Base_SetConfig+0x100>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d007      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a21      	ldr	r2, [pc, #132]	@ (8003d0c <TIM_Base_SetConfig+0x104>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d003      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a20      	ldr	r2, [pc, #128]	@ (8003d10 <TIM_Base_SetConfig+0x108>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d108      	bne.n	8003ca4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf8 <TIM_Base_SetConfig+0xf0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d103      	bne.n	8003cd2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f043 0204 	orr.w	r2, r3, #4
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]
}
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800
 8003d04:	40000c00 	.word	0x40000c00
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40014400 	.word	0x40014400
 8003d10:	40014800 	.word	0x40014800

08003d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e042      	b.n	8003dd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fe f804 	bl	8001d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2224      	movs	r2, #36	@ 0x24
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 fa09 	bl	8004198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	@ 0x28
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	d175      	bne.n	8003ee8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_UART_Transmit+0x2c>
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e06e      	b.n	8003eea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2221      	movs	r2, #33	@ 0x21
 8003e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e1a:	f7fe f9c1 	bl	80021a0 <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	88fa      	ldrh	r2, [r7, #6]
 8003e24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e34:	d108      	bne.n	8003e48 <HAL_UART_Transmit+0x6c>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d104      	bne.n	8003e48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	e003      	b.n	8003e50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e50:	e02e      	b.n	8003eb0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2180      	movs	r1, #128	@ 0x80
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f8df 	bl	8004020 <UART_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e03a      	b.n	8003eea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	e007      	b.n	8003ea2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	781a      	ldrb	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1cb      	bne.n	8003e52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2140      	movs	r1, #64	@ 0x40
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f8ab 	bl	8004020 <UART_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e006      	b.n	8003eea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b08a      	sub	sp, #40	@ 0x28
 8003ef6:	af02      	add	r7, sp, #8
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	603b      	str	r3, [r7, #0]
 8003efe:	4613      	mov	r3, r2
 8003f00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	f040 8081 	bne.w	8004016 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_UART_Receive+0x2e>
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e079      	b.n	8004018 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2222      	movs	r2, #34	@ 0x22
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f38:	f7fe f932 	bl	80021a0 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	88fa      	ldrh	r2, [r7, #6]
 8003f42:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	88fa      	ldrh	r2, [r7, #6]
 8003f48:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f52:	d108      	bne.n	8003f66 <HAL_UART_Receive+0x74>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d104      	bne.n	8003f66 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	e003      	b.n	8003f6e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f6e:	e047      	b.n	8004000 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2200      	movs	r2, #0
 8003f78:	2120      	movs	r1, #32
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f850 	bl	8004020 <UART_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e042      	b.n	8004018 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10c      	bne.n	8003fb2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	3302      	adds	r3, #2
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	e01f      	b.n	8003ff2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fba:	d007      	beq.n	8003fcc <HAL_UART_Receive+0xda>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <HAL_UART_Receive+0xe8>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	e008      	b.n	8003fec <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1b2      	bne.n	8003f70 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004030:	e03b      	b.n	80040aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d037      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403a:	f7fe f8b1 	bl	80021a0 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <UART_WaitOnFlagUntilTimeout+0x30>
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e03a      	b.n	80040ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d023      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b80      	cmp	r3, #128	@ 0x80
 8004066:	d020      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b40      	cmp	r3, #64	@ 0x40
 800406c:	d01d      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b08      	cmp	r3, #8
 800407a:	d116      	bne.n	80040aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f81d 	bl	80040d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2208      	movs	r2, #8
 800409c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e00f      	b.n	80040ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4013      	ands	r3, r2
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	bf0c      	ite	eq
 80040ba:	2301      	moveq	r3, #1
 80040bc:	2300      	movne	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d0b4      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b095      	sub	sp, #84	@ 0x54
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	330c      	adds	r3, #12
 80040e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80040fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004100:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e5      	bne.n	80040da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	61fb      	str	r3, [r7, #28]
   return(result);
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3314      	adds	r3, #20
 800412c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800412e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004130:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e5      	bne.n	800410e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	2b01      	cmp	r3, #1
 8004148:	d119      	bne.n	800417e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	60bb      	str	r3, [r7, #8]
   return(result);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f023 0310 	bic.w	r3, r3, #16
 8004160:	647b      	str	r3, [r7, #68]	@ 0x44
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800416a:	61ba      	str	r2, [r7, #24]
 800416c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	6979      	ldr	r1, [r7, #20]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	613b      	str	r3, [r7, #16]
   return(result);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e5      	bne.n	800414a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800418c:	bf00      	nop
 800418e:	3754      	adds	r7, #84	@ 0x54
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800419c:	b0c0      	sub	sp, #256	@ 0x100
 800419e:	af00      	add	r7, sp, #0
 80041a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b4:	68d9      	ldr	r1, [r3, #12]
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	ea40 0301 	orr.w	r3, r0, r1
 80041c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041f0:	f021 010c 	bic.w	r1, r1, #12
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041fe:	430b      	orrs	r3, r1
 8004200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800420e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004212:	6999      	ldr	r1, [r3, #24]
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	ea40 0301 	orr.w	r3, r0, r1
 800421e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b8f      	ldr	r3, [pc, #572]	@ (8004464 <UART_SetConfig+0x2cc>)
 8004228:	429a      	cmp	r2, r3
 800422a:	d005      	beq.n	8004238 <UART_SetConfig+0xa0>
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b8d      	ldr	r3, [pc, #564]	@ (8004468 <UART_SetConfig+0x2d0>)
 8004234:	429a      	cmp	r2, r3
 8004236:	d104      	bne.n	8004242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004238:	f7ff facc 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 800423c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004240:	e003      	b.n	800424a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004242:	f7ff fab3 	bl	80037ac <HAL_RCC_GetPCLK1Freq>
 8004246:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004254:	f040 810c 	bne.w	8004470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800425c:	2200      	movs	r2, #0
 800425e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004262:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800426a:	4622      	mov	r2, r4
 800426c:	462b      	mov	r3, r5
 800426e:	1891      	adds	r1, r2, r2
 8004270:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004272:	415b      	adcs	r3, r3
 8004274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800427a:	4621      	mov	r1, r4
 800427c:	eb12 0801 	adds.w	r8, r2, r1
 8004280:	4629      	mov	r1, r5
 8004282:	eb43 0901 	adc.w	r9, r3, r1
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800429a:	4690      	mov	r8, r2
 800429c:	4699      	mov	r9, r3
 800429e:	4623      	mov	r3, r4
 80042a0:	eb18 0303 	adds.w	r3, r8, r3
 80042a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042a8:	462b      	mov	r3, r5
 80042aa:	eb49 0303 	adc.w	r3, r9, r3
 80042ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042c6:	460b      	mov	r3, r1
 80042c8:	18db      	adds	r3, r3, r3
 80042ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80042cc:	4613      	mov	r3, r2
 80042ce:	eb42 0303 	adc.w	r3, r2, r3
 80042d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80042d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042dc:	f7fc fcec 	bl	8000cb8 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4b61      	ldr	r3, [pc, #388]	@ (800446c <UART_SetConfig+0x2d4>)
 80042e6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	011c      	lsls	r4, r3, #4
 80042ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	1891      	adds	r1, r2, r2
 8004306:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004308:	415b      	adcs	r3, r3
 800430a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800430c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004310:	4641      	mov	r1, r8
 8004312:	eb12 0a01 	adds.w	sl, r2, r1
 8004316:	4649      	mov	r1, r9
 8004318:	eb43 0b01 	adc.w	fp, r3, r1
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800432c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004330:	4692      	mov	sl, r2
 8004332:	469b      	mov	fp, r3
 8004334:	4643      	mov	r3, r8
 8004336:	eb1a 0303 	adds.w	r3, sl, r3
 800433a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800433e:	464b      	mov	r3, r9
 8004340:	eb4b 0303 	adc.w	r3, fp, r3
 8004344:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004354:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800435c:	460b      	mov	r3, r1
 800435e:	18db      	adds	r3, r3, r3
 8004360:	643b      	str	r3, [r7, #64]	@ 0x40
 8004362:	4613      	mov	r3, r2
 8004364:	eb42 0303 	adc.w	r3, r2, r3
 8004368:	647b      	str	r3, [r7, #68]	@ 0x44
 800436a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800436e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004372:	f7fc fca1 	bl	8000cb8 <__aeabi_uldivmod>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4611      	mov	r1, r2
 800437c:	4b3b      	ldr	r3, [pc, #236]	@ (800446c <UART_SetConfig+0x2d4>)
 800437e:	fba3 2301 	umull	r2, r3, r3, r1
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2264      	movs	r2, #100	@ 0x64
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	1acb      	subs	r3, r1, r3
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004392:	4b36      	ldr	r3, [pc, #216]	@ (800446c <UART_SetConfig+0x2d4>)
 8004394:	fba3 2302 	umull	r2, r3, r3, r2
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043a0:	441c      	add	r4, r3
 80043a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043bc:	415b      	adcs	r3, r3
 80043be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043c4:	4641      	mov	r1, r8
 80043c6:	1851      	adds	r1, r2, r1
 80043c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80043ca:	4649      	mov	r1, r9
 80043cc:	414b      	adcs	r3, r1
 80043ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043dc:	4659      	mov	r1, fp
 80043de:	00cb      	lsls	r3, r1, #3
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e6:	4651      	mov	r1, sl
 80043e8:	00ca      	lsls	r2, r1, #3
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	4642      	mov	r2, r8
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043f8:	464b      	mov	r3, r9
 80043fa:	460a      	mov	r2, r1
 80043fc:	eb42 0303 	adc.w	r3, r2, r3
 8004400:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004410:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004418:	460b      	mov	r3, r1
 800441a:	18db      	adds	r3, r3, r3
 800441c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800441e:	4613      	mov	r3, r2
 8004420:	eb42 0303 	adc.w	r3, r2, r3
 8004424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800442a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800442e:	f7fc fc43 	bl	8000cb8 <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4b0d      	ldr	r3, [pc, #52]	@ (800446c <UART_SetConfig+0x2d4>)
 8004438:	fba3 1302 	umull	r1, r3, r3, r2
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	2164      	movs	r1, #100	@ 0x64
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	3332      	adds	r3, #50	@ 0x32
 800444a:	4a08      	ldr	r2, [pc, #32]	@ (800446c <UART_SetConfig+0x2d4>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	f003 0207 	and.w	r2, r3, #7
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4422      	add	r2, r4
 800445e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004460:	e106      	b.n	8004670 <UART_SetConfig+0x4d8>
 8004462:	bf00      	nop
 8004464:	40011000 	.word	0x40011000
 8004468:	40011400 	.word	0x40011400
 800446c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004474:	2200      	movs	r2, #0
 8004476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800447a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800447e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004482:	4642      	mov	r2, r8
 8004484:	464b      	mov	r3, r9
 8004486:	1891      	adds	r1, r2, r2
 8004488:	6239      	str	r1, [r7, #32]
 800448a:	415b      	adcs	r3, r3
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
 800448e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004492:	4641      	mov	r1, r8
 8004494:	1854      	adds	r4, r2, r1
 8004496:	4649      	mov	r1, r9
 8004498:	eb43 0501 	adc.w	r5, r3, r1
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	00eb      	lsls	r3, r5, #3
 80044a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044aa:	00e2      	lsls	r2, r4, #3
 80044ac:	4614      	mov	r4, r2
 80044ae:	461d      	mov	r5, r3
 80044b0:	4643      	mov	r3, r8
 80044b2:	18e3      	adds	r3, r4, r3
 80044b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044b8:	464b      	mov	r3, r9
 80044ba:	eb45 0303 	adc.w	r3, r5, r3
 80044be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044de:	4629      	mov	r1, r5
 80044e0:	008b      	lsls	r3, r1, #2
 80044e2:	4621      	mov	r1, r4
 80044e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e8:	4621      	mov	r1, r4
 80044ea:	008a      	lsls	r2, r1, #2
 80044ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044f0:	f7fc fbe2 	bl	8000cb8 <__aeabi_uldivmod>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4b60      	ldr	r3, [pc, #384]	@ (800467c <UART_SetConfig+0x4e4>)
 80044fa:	fba3 2302 	umull	r2, r3, r3, r2
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	011c      	lsls	r4, r3, #4
 8004502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004506:	2200      	movs	r2, #0
 8004508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800450c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004514:	4642      	mov	r2, r8
 8004516:	464b      	mov	r3, r9
 8004518:	1891      	adds	r1, r2, r2
 800451a:	61b9      	str	r1, [r7, #24]
 800451c:	415b      	adcs	r3, r3
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004524:	4641      	mov	r1, r8
 8004526:	1851      	adds	r1, r2, r1
 8004528:	6139      	str	r1, [r7, #16]
 800452a:	4649      	mov	r1, r9
 800452c:	414b      	adcs	r3, r1
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800453c:	4659      	mov	r1, fp
 800453e:	00cb      	lsls	r3, r1, #3
 8004540:	4651      	mov	r1, sl
 8004542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004546:	4651      	mov	r1, sl
 8004548:	00ca      	lsls	r2, r1, #3
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	4603      	mov	r3, r0
 8004550:	4642      	mov	r2, r8
 8004552:	189b      	adds	r3, r3, r2
 8004554:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004558:	464b      	mov	r3, r9
 800455a:	460a      	mov	r2, r1
 800455c:	eb42 0303 	adc.w	r3, r2, r3
 8004560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800456e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800457c:	4649      	mov	r1, r9
 800457e:	008b      	lsls	r3, r1, #2
 8004580:	4641      	mov	r1, r8
 8004582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004586:	4641      	mov	r1, r8
 8004588:	008a      	lsls	r2, r1, #2
 800458a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800458e:	f7fc fb93 	bl	8000cb8 <__aeabi_uldivmod>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4611      	mov	r1, r2
 8004598:	4b38      	ldr	r3, [pc, #224]	@ (800467c <UART_SetConfig+0x4e4>)
 800459a:	fba3 2301 	umull	r2, r3, r3, r1
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	2264      	movs	r2, #100	@ 0x64
 80045a2:	fb02 f303 	mul.w	r3, r2, r3
 80045a6:	1acb      	subs	r3, r1, r3
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	3332      	adds	r3, #50	@ 0x32
 80045ac:	4a33      	ldr	r2, [pc, #204]	@ (800467c <UART_SetConfig+0x4e4>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045b8:	441c      	add	r4, r3
 80045ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045be:	2200      	movs	r2, #0
 80045c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80045c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80045c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045c8:	4642      	mov	r2, r8
 80045ca:	464b      	mov	r3, r9
 80045cc:	1891      	adds	r1, r2, r2
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	415b      	adcs	r3, r3
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045d8:	4641      	mov	r1, r8
 80045da:	1851      	adds	r1, r2, r1
 80045dc:	6039      	str	r1, [r7, #0]
 80045de:	4649      	mov	r1, r9
 80045e0:	414b      	adcs	r3, r1
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045f0:	4659      	mov	r1, fp
 80045f2:	00cb      	lsls	r3, r1, #3
 80045f4:	4651      	mov	r1, sl
 80045f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045fa:	4651      	mov	r1, sl
 80045fc:	00ca      	lsls	r2, r1, #3
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	4603      	mov	r3, r0
 8004604:	4642      	mov	r2, r8
 8004606:	189b      	adds	r3, r3, r2
 8004608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800460a:	464b      	mov	r3, r9
 800460c:	460a      	mov	r2, r1
 800460e:	eb42 0303 	adc.w	r3, r2, r3
 8004612:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	663b      	str	r3, [r7, #96]	@ 0x60
 800461e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800462c:	4649      	mov	r1, r9
 800462e:	008b      	lsls	r3, r1, #2
 8004630:	4641      	mov	r1, r8
 8004632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004636:	4641      	mov	r1, r8
 8004638:	008a      	lsls	r2, r1, #2
 800463a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800463e:	f7fc fb3b 	bl	8000cb8 <__aeabi_uldivmod>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4b0d      	ldr	r3, [pc, #52]	@ (800467c <UART_SetConfig+0x4e4>)
 8004648:	fba3 1302 	umull	r1, r3, r3, r2
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	2164      	movs	r1, #100	@ 0x64
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	3332      	adds	r3, #50	@ 0x32
 800465a:	4a08      	ldr	r2, [pc, #32]	@ (800467c <UART_SetConfig+0x4e4>)
 800465c:	fba2 2303 	umull	r2, r3, r2, r3
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	f003 020f 	and.w	r2, r3, #15
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4422      	add	r2, r4
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004676:	46bd      	mov	sp, r7
 8004678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800467c:	51eb851f 	.word	0x51eb851f

08004680 <__NVIC_SetPriority>:
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	6039      	str	r1, [r7, #0]
 800468a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004690:	2b00      	cmp	r3, #0
 8004692:	db0a      	blt.n	80046aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	b2da      	uxtb	r2, r3
 8004698:	490c      	ldr	r1, [pc, #48]	@ (80046cc <__NVIC_SetPriority+0x4c>)
 800469a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469e:	0112      	lsls	r2, r2, #4
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	440b      	add	r3, r1
 80046a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80046a8:	e00a      	b.n	80046c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	4908      	ldr	r1, [pc, #32]	@ (80046d0 <__NVIC_SetPriority+0x50>)
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	3b04      	subs	r3, #4
 80046b8:	0112      	lsls	r2, r2, #4
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	440b      	add	r3, r1
 80046be:	761a      	strb	r2, [r3, #24]
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	e000e100 	.word	0xe000e100
 80046d0:	e000ed00 	.word	0xe000ed00

080046d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80046d8:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <SysTick_Handler+0x1c>)
 80046da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80046dc:	f002 f880 	bl	80067e0 <xTaskGetSchedulerState>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d001      	beq.n	80046ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80046e6:	f002 ff77 	bl	80075d8 <xPortSysTickHandler>
  }
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	e000e010 	.word	0xe000e010

080046f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80046f8:	2100      	movs	r1, #0
 80046fa:	f06f 0004 	mvn.w	r0, #4
 80046fe:	f7ff ffbf 	bl	8004680 <__NVIC_SetPriority>
#endif
}
 8004702:	bf00      	nop
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800470e:	f3ef 8305 	mrs	r3, IPSR
 8004712:	603b      	str	r3, [r7, #0]
  return(result);
 8004714:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800471a:	f06f 0305 	mvn.w	r3, #5
 800471e:	607b      	str	r3, [r7, #4]
 8004720:	e00c      	b.n	800473c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004722:	4b0a      	ldr	r3, [pc, #40]	@ (800474c <osKernelInitialize+0x44>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d105      	bne.n	8004736 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800472a:	4b08      	ldr	r3, [pc, #32]	@ (800474c <osKernelInitialize+0x44>)
 800472c:	2201      	movs	r2, #1
 800472e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004730:	2300      	movs	r3, #0
 8004732:	607b      	str	r3, [r7, #4]
 8004734:	e002      	b.n	800473c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004736:	f04f 33ff 	mov.w	r3, #4294967295
 800473a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800473c:	687b      	ldr	r3, [r7, #4]
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000324 	.word	0x20000324

08004750 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004756:	f3ef 8305 	mrs	r3, IPSR
 800475a:	603b      	str	r3, [r7, #0]
  return(result);
 800475c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004762:	f06f 0305 	mvn.w	r3, #5
 8004766:	607b      	str	r3, [r7, #4]
 8004768:	e010      	b.n	800478c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800476a:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <osKernelStart+0x48>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d109      	bne.n	8004786 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004772:	f7ff ffbf 	bl	80046f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004776:	4b08      	ldr	r3, [pc, #32]	@ (8004798 <osKernelStart+0x48>)
 8004778:	2202      	movs	r2, #2
 800477a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800477c:	f001 fbbc 	bl	8005ef8 <vTaskStartScheduler>
      stat = osOK;
 8004780:	2300      	movs	r3, #0
 8004782:	607b      	str	r3, [r7, #4]
 8004784:	e002      	b.n	800478c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004786:	f04f 33ff 	mov.w	r3, #4294967295
 800478a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800478c:	687b      	ldr	r3, [r7, #4]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000324 	.word	0x20000324

0800479c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800479c:	b580      	push	{r7, lr}
 800479e:	b08e      	sub	sp, #56	@ 0x38
 80047a0:	af04      	add	r7, sp, #16
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ac:	f3ef 8305 	mrs	r3, IPSR
 80047b0:	617b      	str	r3, [r7, #20]
  return(result);
 80047b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d17e      	bne.n	80048b6 <osThreadNew+0x11a>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d07b      	beq.n	80048b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80047be:	2380      	movs	r3, #128	@ 0x80
 80047c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80047c2:	2318      	movs	r3, #24
 80047c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d045      	beq.n	8004862 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <osThreadNew+0x48>
        name = attr->name;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <osThreadNew+0x6e>
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b38      	cmp	r3, #56	@ 0x38
 80047fc:	d805      	bhi.n	800480a <osThreadNew+0x6e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <osThreadNew+0x72>
        return (NULL);
 800480a:	2300      	movs	r3, #0
 800480c:	e054      	b.n	80048b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	089b      	lsrs	r3, r3, #2
 800481c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00e      	beq.n	8004844 <osThreadNew+0xa8>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2ba7      	cmp	r3, #167	@ 0xa7
 800482c:	d90a      	bls.n	8004844 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004832:	2b00      	cmp	r3, #0
 8004834:	d006      	beq.n	8004844 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <osThreadNew+0xa8>
        mem = 1;
 800483e:	2301      	movs	r3, #1
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e010      	b.n	8004866 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10c      	bne.n	8004866 <osThreadNew+0xca>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d108      	bne.n	8004866 <osThreadNew+0xca>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <osThreadNew+0xca>
          mem = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	e001      	b.n	8004866 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d110      	bne.n	800488e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004874:	9202      	str	r2, [sp, #8]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	6a3a      	ldr	r2, [r7, #32]
 8004880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f001 f944 	bl	8005b10 <xTaskCreateStatic>
 8004888:	4603      	mov	r3, r0
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	e013      	b.n	80048b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d110      	bne.n	80048b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	b29a      	uxth	r2, r3
 8004898:	f107 0310 	add.w	r3, r7, #16
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f001 f992 	bl	8005bd0 <xTaskCreate>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d001      	beq.n	80048b6 <osThreadNew+0x11a>
            hTask = NULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80048b6:	693b      	ldr	r3, [r7, #16]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3728      	adds	r7, #40	@ 0x28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048c8:	f3ef 8305 	mrs	r3, IPSR
 80048cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80048ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <osDelay+0x1c>
    stat = osErrorISR;
 80048d4:	f06f 0305 	mvn.w	r3, #5
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e007      	b.n	80048ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f001 fad0 	bl	8005e8c <vTaskDelay>
    }
  }

  return (stat);
 80048ec:	68fb      	ldr	r3, [r7, #12]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b088      	sub	sp, #32
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004902:	f3ef 8305 	mrs	r3, IPSR
 8004906:	60bb      	str	r3, [r7, #8]
  return(result);
 8004908:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800490a:	2b00      	cmp	r3, #0
 800490c:	d174      	bne.n	80049f8 <osMutexNew+0x102>
    if (attr != NULL) {
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <osMutexNew+0x26>
      type = attr->attr_bits;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	e001      	b.n	8004920 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <osMutexNew+0x3a>
      rmtx = 1U;
 800492a:	2301      	movs	r3, #1
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	e001      	b.n	8004934 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d15c      	bne.n	80049f8 <osMutexNew+0x102>
      mem = -1;
 800493e:	f04f 33ff 	mov.w	r3, #4294967295
 8004942:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d015      	beq.n	8004976 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d006      	beq.n	8004960 <osMutexNew+0x6a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b4f      	cmp	r3, #79	@ 0x4f
 8004958:	d902      	bls.n	8004960 <osMutexNew+0x6a>
          mem = 1;
 800495a:	2301      	movs	r3, #1
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	e00c      	b.n	800497a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d108      	bne.n	800497a <osMutexNew+0x84>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <osMutexNew+0x84>
            mem = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	e001      	b.n	800497a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d112      	bne.n	80049a6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	4619      	mov	r1, r3
 800498c:	2004      	movs	r0, #4
 800498e:	f000 fb20 	bl	8004fd2 <xQueueCreateMutexStatic>
 8004992:	61f8      	str	r0, [r7, #28]
 8004994:	e016      	b.n	80049c4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	4619      	mov	r1, r3
 800499c:	2001      	movs	r0, #1
 800499e:	f000 fb18 	bl	8004fd2 <xQueueCreateMutexStatic>
 80049a2:	61f8      	str	r0, [r7, #28]
 80049a4:	e00e      	b.n	80049c4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d004      	beq.n	80049bc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80049b2:	2004      	movs	r0, #4
 80049b4:	f000 faf5 	bl	8004fa2 <xQueueCreateMutex>
 80049b8:	61f8      	str	r0, [r7, #28]
 80049ba:	e003      	b.n	80049c4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80049bc:	2001      	movs	r0, #1
 80049be:	f000 faf0 	bl	8004fa2 <xQueueCreateMutex>
 80049c2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00c      	beq.n	80049e4 <osMutexNew+0xee>
        if (attr != NULL) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <osMutexNew+0xe2>
          name = attr->name;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e001      	b.n	80049dc <osMutexNew+0xe6>
        } else {
          name = NULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80049dc:	68f9      	ldr	r1, [r7, #12]
 80049de:	69f8      	ldr	r0, [r7, #28]
 80049e0:	f001 f838 	bl	8005a54 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d006      	beq.n	80049f8 <osMutexNew+0x102>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80049f8:	69fb      	ldr	r3, [r7, #28]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3720      	adds	r7, #32
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a20:	f3ef 8305 	mrs	r3, IPSR
 8004a24:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a26:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004a2c:	f06f 0305 	mvn.w	r3, #5
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	e02c      	b.n	8004a8e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004a3a:	f06f 0303 	mvn.w	r3, #3
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e025      	b.n	8004a8e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d011      	beq.n	8004a6c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	6938      	ldr	r0, [r7, #16]
 8004a4c:	f000 fb11 	bl	8005072 <xQueueTakeMutexRecursive>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d01b      	beq.n	8004a8e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004a5c:	f06f 0301 	mvn.w	r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	e014      	b.n	8004a8e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004a64:	f06f 0302 	mvn.w	r3, #2
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	e010      	b.n	8004a8e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004a6c:	6839      	ldr	r1, [r7, #0]
 8004a6e:	6938      	ldr	r0, [r7, #16]
 8004a70:	f000 fdb8 	bl	80055e4 <xQueueSemaphoreTake>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d009      	beq.n	8004a8e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004a80:	f06f 0301 	mvn.w	r3, #1
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e002      	b.n	8004a8e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004a88:	f06f 0302 	mvn.w	r3, #2
 8004a8c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004a8e:	697b      	ldr	r3, [r7, #20]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ab4:	f3ef 8305 	mrs	r3, IPSR
 8004ab8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aba:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004ac0:	f06f 0305 	mvn.w	r3, #5
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e01f      	b.n	8004b08 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004ace:	f06f 0303 	mvn.w	r3, #3
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e018      	b.n	8004b08 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004adc:	6938      	ldr	r0, [r7, #16]
 8004ade:	f000 fa93 	bl	8005008 <xQueueGiveMutexRecursive>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d00f      	beq.n	8004b08 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004ae8:	f06f 0302 	mvn.w	r3, #2
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e00b      	b.n	8004b08 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004af0:	2300      	movs	r3, #0
 8004af2:	2200      	movs	r2, #0
 8004af4:	2100      	movs	r1, #0
 8004af6:	6938      	ldr	r0, [r7, #16]
 8004af8:	f000 faf2 	bl	80050e0 <xQueueGenericSend>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d002      	beq.n	8004b08 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004b02:	f06f 0302 	mvn.w	r3, #2
 8004b06:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004b08:	697b      	ldr	r3, [r7, #20]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4a07      	ldr	r2, [pc, #28]	@ (8004b40 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	4a06      	ldr	r2, [pc, #24]	@ (8004b44 <vApplicationGetIdleTaskMemory+0x30>)
 8004b2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2280      	movs	r2, #128	@ 0x80
 8004b30:	601a      	str	r2, [r3, #0]
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000328 	.word	0x20000328
 8004b44:	200003d0 	.word	0x200003d0

08004b48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a07      	ldr	r2, [pc, #28]	@ (8004b74 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	4a06      	ldr	r2, [pc, #24]	@ (8004b78 <vApplicationGetTimerTaskMemory+0x30>)
 8004b5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b66:	601a      	str	r2, [r3, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	200005d0 	.word	0x200005d0
 8004b78:	20000678 	.word	0x20000678

08004b7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f103 0208 	add.w	r2, r3, #8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f04f 32ff 	mov.w	r2, #4294967295
 8004b94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f103 0208 	add.w	r2, r3, #8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f103 0208 	add.w	r2, r3, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	601a      	str	r2, [r3, #0]
}
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b085      	sub	sp, #20
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d103      	bne.n	8004c3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	e00c      	b.n	8004c58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3308      	adds	r3, #8
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	e002      	b.n	8004c4c <vListInsert+0x2e>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d2f6      	bcs.n	8004c46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	601a      	str	r2, [r3, #0]
}
 8004c84:	bf00      	nop
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6892      	ldr	r2, [r2, #8]
 8004ca6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6852      	ldr	r2, [r2, #4]
 8004cb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d103      	bne.n	8004cc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	1e5a      	subs	r2, r3, #1
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d10:	f002 fbd2 	bl	80074b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1c:	68f9      	ldr	r1, [r7, #12]
 8004d1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	441a      	add	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d40:	3b01      	subs	r3, #1
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d46:	fb01 f303 	mul.w	r3, r1, r3
 8004d4a:	441a      	add	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	22ff      	movs	r2, #255	@ 0xff
 8004d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	22ff      	movs	r2, #255	@ 0xff
 8004d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d114      	bne.n	8004d90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01a      	beq.n	8004da4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3310      	adds	r3, #16
 8004d72:	4618      	mov	r0, r3
 8004d74:	f001 fb5e 	bl	8006434 <xTaskRemoveFromEventList>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d012      	beq.n	8004da4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <xQueueGenericReset+0xd0>)
 8004d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	e009      	b.n	8004da4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3310      	adds	r3, #16
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fef1 	bl	8004b7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3324      	adds	r3, #36	@ 0x24
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff feec 	bl	8004b7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004da4:	f002 fbba 	bl	800751c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004da8:	2301      	movs	r3, #1
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	e000ed04 	.word	0xe000ed04

08004db8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08e      	sub	sp, #56	@ 0x38
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10b      	bne.n	8004de4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	e7fd      	b.n	8004de0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10b      	bne.n	8004e02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	e7fd      	b.n	8004dfe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <xQueueGenericCreateStatic+0x56>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <xQueueGenericCreateStatic+0x5a>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <xQueueGenericCreateStatic+0x5c>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	623b      	str	r3, [r7, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <xQueueGenericCreateStatic+0x84>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <xQueueGenericCreateStatic+0x88>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <xQueueGenericCreateStatic+0x8a>
 8004e40:	2300      	movs	r3, #0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	61fb      	str	r3, [r7, #28]
}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	e7fd      	b.n	8004e5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e5e:	2350      	movs	r3, #80	@ 0x50
 8004e60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b50      	cmp	r3, #80	@ 0x50
 8004e66:	d00b      	beq.n	8004e80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	61bb      	str	r3, [r7, #24]
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	e7fd      	b.n	8004e7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00d      	beq.n	8004ea8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f840 	bl	8004f28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3730      	adds	r7, #48	@ 0x30
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b08a      	sub	sp, #40	@ 0x28
 8004eb6:	af02      	add	r7, sp, #8
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <xQueueGenericCreate+0x2c>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	613b      	str	r3, [r7, #16]
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	e7fd      	b.n	8004eda <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	3350      	adds	r3, #80	@ 0x50
 8004eec:	4618      	mov	r0, r3
 8004eee:	f002 fc05 	bl	80076fc <pvPortMalloc>
 8004ef2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d011      	beq.n	8004f1e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	3350      	adds	r3, #80	@ 0x50
 8004f02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f0c:	79fa      	ldrb	r2, [r7, #7]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	4613      	mov	r3, r2
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f805 	bl	8004f28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d103      	bne.n	8004f44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e002      	b.n	8004f4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f56:	2101      	movs	r1, #1
 8004f58:	69b8      	ldr	r0, [r7, #24]
 8004f5a:	f7ff fec3 	bl	8004ce4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f66:	bf00      	nop
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00e      	beq.n	8004f9a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2200      	movs	r2, #0
 8004f92:	2100      	movs	r1, #0
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f8a3 	bl	80050e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b086      	sub	sp, #24
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	4603      	mov	r3, r0
 8004faa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004fac:	2301      	movs	r3, #1
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6939      	ldr	r1, [r7, #16]
 8004fba:	6978      	ldr	r0, [r7, #20]
 8004fbc:	f7ff ff79 	bl	8004eb2 <xQueueGenericCreate>
 8004fc0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7ff ffd3 	bl	8004f6e <prvInitialiseMutex>

		return xNewQueue;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
	}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b088      	sub	sp, #32
 8004fd6:	af02      	add	r7, sp, #8
 8004fd8:	4603      	mov	r3, r0
 8004fda:	6039      	str	r1, [r7, #0]
 8004fdc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2200      	movs	r2, #0
 8004fee:	6939      	ldr	r1, [r7, #16]
 8004ff0:	6978      	ldr	r0, [r7, #20]
 8004ff2:	f7ff fee1 	bl	8004db8 <xQueueGenericCreateStatic>
 8004ff6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f7ff ffb8 	bl	8004f6e <prvInitialiseMutex>

		return xNewQueue;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
	}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10b      	bne.n	8005032 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	60fb      	str	r3, [r7, #12]
}
 800502c:	bf00      	nop
 800502e:	bf00      	nop
 8005030:	e7fd      	b.n	800502e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	689c      	ldr	r4, [r3, #8]
 8005036:	f001 fbc3 	bl	80067c0 <xTaskGetCurrentTaskHandle>
 800503a:	4603      	mov	r3, r0
 800503c:	429c      	cmp	r4, r3
 800503e:	d111      	bne.n	8005064 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	1e5a      	subs	r2, r3, #1
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d105      	bne.n	800505e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005052:	2300      	movs	r3, #0
 8005054:	2200      	movs	r2, #0
 8005056:	2100      	movs	r1, #0
 8005058:	6938      	ldr	r0, [r7, #16]
 800505a:	f000 f841 	bl	80050e0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800505e:	2301      	movs	r3, #1
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	e001      	b.n	8005068 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005068:	697b      	ldr	r3, [r7, #20]
	}
 800506a:	4618      	mov	r0, r3
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	bd90      	pop	{r4, r7, pc}

08005072 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005072:	b590      	push	{r4, r7, lr}
 8005074:	b087      	sub	sp, #28
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10b      	bne.n	800509e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	60fb      	str	r3, [r7, #12]
}
 8005098:	bf00      	nop
 800509a:	bf00      	nop
 800509c:	e7fd      	b.n	800509a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	689c      	ldr	r4, [r3, #8]
 80050a2:	f001 fb8d 	bl	80067c0 <xTaskGetCurrentTaskHandle>
 80050a6:	4603      	mov	r3, r0
 80050a8:	429c      	cmp	r4, r3
 80050aa:	d107      	bne.n	80050bc <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80050b6:	2301      	movs	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	e00c      	b.n	80050d6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80050bc:	6839      	ldr	r1, [r7, #0]
 80050be:	6938      	ldr	r0, [r7, #16]
 80050c0:	f000 fa90 	bl	80055e4 <xQueueSemaphoreTake>
 80050c4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80050d6:	697b      	ldr	r3, [r7, #20]
	}
 80050d8:	4618      	mov	r0, r3
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd90      	pop	{r4, r7, pc}

080050e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08e      	sub	sp, #56	@ 0x38
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050ee:	2300      	movs	r3, #0
 80050f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <xQueueGenericSend+0x34>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	e7fd      	b.n	8005110 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d103      	bne.n	8005122 <xQueueGenericSend+0x42>
 800511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <xQueueGenericSend+0x46>
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <xQueueGenericSend+0x48>
 8005126:	2300      	movs	r3, #0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10b      	bne.n	8005144 <xQueueGenericSend+0x64>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800513e:	bf00      	nop
 8005140:	bf00      	nop
 8005142:	e7fd      	b.n	8005140 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d103      	bne.n	8005152 <xQueueGenericSend+0x72>
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <xQueueGenericSend+0x76>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <xQueueGenericSend+0x78>
 8005156:	2300      	movs	r3, #0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10b      	bne.n	8005174 <xQueueGenericSend+0x94>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	623b      	str	r3, [r7, #32]
}
 800516e:	bf00      	nop
 8005170:	bf00      	nop
 8005172:	e7fd      	b.n	8005170 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005174:	f001 fb34 	bl	80067e0 <xTaskGetSchedulerState>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <xQueueGenericSend+0xa4>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <xQueueGenericSend+0xa8>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <xQueueGenericSend+0xaa>
 8005188:	2300      	movs	r3, #0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10b      	bne.n	80051a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	61fb      	str	r3, [r7, #28]
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	e7fd      	b.n	80051a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051a6:	f002 f987 	bl	80074b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d302      	bcc.n	80051bc <xQueueGenericSend+0xdc>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d129      	bne.n	8005210 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051c2:	f000 fb37 	bl	8005834 <prvCopyDataToQueue>
 80051c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d010      	beq.n	80051f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d2:	3324      	adds	r3, #36	@ 0x24
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 f92d 	bl	8006434 <xTaskRemoveFromEventList>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d013      	beq.n	8005208 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051e0:	4b3f      	ldr	r3, [pc, #252]	@ (80052e0 <xQueueGenericSend+0x200>)
 80051e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	e00a      	b.n	8005208 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051f8:	4b39      	ldr	r3, [pc, #228]	@ (80052e0 <xQueueGenericSend+0x200>)
 80051fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005208:	f002 f988 	bl	800751c <vPortExitCritical>
				return pdPASS;
 800520c:	2301      	movs	r3, #1
 800520e:	e063      	b.n	80052d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005216:	f002 f981 	bl	800751c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800521a:	2300      	movs	r3, #0
 800521c:	e05c      	b.n	80052d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800521e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005220:	2b00      	cmp	r3, #0
 8005222:	d106      	bne.n	8005232 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005224:	f107 0314 	add.w	r3, r7, #20
 8005228:	4618      	mov	r0, r3
 800522a:	f001 f967 	bl	80064fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800522e:	2301      	movs	r3, #1
 8005230:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005232:	f002 f973 	bl	800751c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005236:	f000 fecf 	bl	8005fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800523a:	f002 f93d 	bl	80074b8 <vPortEnterCritical>
 800523e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005240:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005244:	b25b      	sxtb	r3, r3
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d103      	bne.n	8005254 <xQueueGenericSend+0x174>
 800524c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005256:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800525a:	b25b      	sxtb	r3, r3
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d103      	bne.n	800526a <xQueueGenericSend+0x18a>
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800526a:	f002 f957 	bl	800751c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800526e:	1d3a      	adds	r2, r7, #4
 8005270:	f107 0314 	add.w	r3, r7, #20
 8005274:	4611      	mov	r1, r2
 8005276:	4618      	mov	r0, r3
 8005278:	f001 f956 	bl	8006528 <xTaskCheckForTimeOut>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d124      	bne.n	80052cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005282:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005284:	f000 fbce 	bl	8005a24 <prvIsQueueFull>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d018      	beq.n	80052c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	3310      	adds	r3, #16
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	4611      	mov	r1, r2
 8005296:	4618      	mov	r0, r3
 8005298:	f001 f87a 	bl	8006390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800529c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800529e:	f000 fb59 	bl	8005954 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052a2:	f000 fea7 	bl	8005ff4 <xTaskResumeAll>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f47f af7c 	bne.w	80051a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80052ae:	4b0c      	ldr	r3, [pc, #48]	@ (80052e0 <xQueueGenericSend+0x200>)
 80052b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	e772      	b.n	80051a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052c2:	f000 fb47 	bl	8005954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052c6:	f000 fe95 	bl	8005ff4 <xTaskResumeAll>
 80052ca:	e76c      	b.n	80051a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052ce:	f000 fb41 	bl	8005954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052d2:	f000 fe8f 	bl	8005ff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80052d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3738      	adds	r7, #56	@ 0x38
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b090      	sub	sp, #64	@ 0x40
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80052f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10b      	bne.n	8005314 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800530e:	bf00      	nop
 8005310:	bf00      	nop
 8005312:	e7fd      	b.n	8005310 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d103      	bne.n	8005322 <xQueueGenericSendFromISR+0x3e>
 800531a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <xQueueGenericSendFromISR+0x42>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <xQueueGenericSendFromISR+0x44>
 8005326:	2300      	movs	r3, #0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	e7fd      	b.n	8005340 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d103      	bne.n	8005352 <xQueueGenericSendFromISR+0x6e>
 800534a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <xQueueGenericSendFromISR+0x72>
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <xQueueGenericSendFromISR+0x74>
 8005356:	2300      	movs	r3, #0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	623b      	str	r3, [r7, #32]
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	e7fd      	b.n	8005370 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005374:	f002 f980 	bl	8007678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005378:	f3ef 8211 	mrs	r2, BASEPRI
 800537c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	61fa      	str	r2, [r7, #28]
 800538e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005390:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005392:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539c:	429a      	cmp	r2, r3
 800539e:	d302      	bcc.n	80053a6 <xQueueGenericSendFromISR+0xc2>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d12f      	bne.n	8005406 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80053bc:	f000 fa3a 	bl	8005834 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d112      	bne.n	80053f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d016      	beq.n	8005400 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d4:	3324      	adds	r3, #36	@ 0x24
 80053d6:	4618      	mov	r0, r3
 80053d8:	f001 f82c 	bl	8006434 <xTaskRemoveFromEventList>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00e      	beq.n	8005400 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	e007      	b.n	8005400 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80053f4:	3301      	adds	r3, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	b25a      	sxtb	r2, r3
 80053fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005400:	2301      	movs	r3, #1
 8005402:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005404:	e001      	b.n	800540a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005406:	2300      	movs	r3, #0
 8005408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800540a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005414:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005418:	4618      	mov	r0, r3
 800541a:	3740      	adds	r7, #64	@ 0x40
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08c      	sub	sp, #48	@ 0x30
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800542c:	2300      	movs	r3, #0
 800542e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10b      	bne.n	8005452 <xQueueReceive+0x32>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	623b      	str	r3, [r7, #32]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d103      	bne.n	8005460 <xQueueReceive+0x40>
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <xQueueReceive+0x44>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <xQueueReceive+0x46>
 8005464:	2300      	movs	r3, #0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <xQueueReceive+0x62>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	61fb      	str	r3, [r7, #28]
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	e7fd      	b.n	800547e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005482:	f001 f9ad 	bl	80067e0 <xTaskGetSchedulerState>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <xQueueReceive+0x72>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <xQueueReceive+0x76>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <xQueueReceive+0x78>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10b      	bne.n	80054b4 <xQueueReceive+0x94>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	61bb      	str	r3, [r7, #24]
}
 80054ae:	bf00      	nop
 80054b0:	bf00      	nop
 80054b2:	e7fd      	b.n	80054b0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054b4:	f002 f800 	bl	80074b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01f      	beq.n	8005504 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054c8:	f000 fa1e 	bl	8005908 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	1e5a      	subs	r2, r3, #1
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00f      	beq.n	80054fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	3310      	adds	r3, #16
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 ffa7 	bl	8006434 <xTaskRemoveFromEventList>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d007      	beq.n	80054fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054ec:	4b3c      	ldr	r3, [pc, #240]	@ (80055e0 <xQueueReceive+0x1c0>)
 80054ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054fc:	f002 f80e 	bl	800751c <vPortExitCritical>
				return pdPASS;
 8005500:	2301      	movs	r3, #1
 8005502:	e069      	b.n	80055d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d103      	bne.n	8005512 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800550a:	f002 f807 	bl	800751c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800550e:	2300      	movs	r3, #0
 8005510:	e062      	b.n	80055d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005518:	f107 0310 	add.w	r3, r7, #16
 800551c:	4618      	mov	r0, r3
 800551e:	f000 ffed 	bl	80064fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005522:	2301      	movs	r3, #1
 8005524:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005526:	f001 fff9 	bl	800751c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800552a:	f000 fd55 	bl	8005fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800552e:	f001 ffc3 	bl	80074b8 <vPortEnterCritical>
 8005532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005534:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005538:	b25b      	sxtb	r3, r3
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d103      	bne.n	8005548 <xQueueReceive+0x128>
 8005540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800554e:	b25b      	sxtb	r3, r3
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d103      	bne.n	800555e <xQueueReceive+0x13e>
 8005556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800555e:	f001 ffdd 	bl	800751c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005562:	1d3a      	adds	r2, r7, #4
 8005564:	f107 0310 	add.w	r3, r7, #16
 8005568:	4611      	mov	r1, r2
 800556a:	4618      	mov	r0, r3
 800556c:	f000 ffdc 	bl	8006528 <xTaskCheckForTimeOut>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d123      	bne.n	80055be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005578:	f000 fa3e 	bl	80059f8 <prvIsQueueEmpty>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d017      	beq.n	80055b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005584:	3324      	adds	r3, #36	@ 0x24
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	4611      	mov	r1, r2
 800558a:	4618      	mov	r0, r3
 800558c:	f000 ff00 	bl	8006390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005590:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005592:	f000 f9df 	bl	8005954 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005596:	f000 fd2d 	bl	8005ff4 <xTaskResumeAll>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d189      	bne.n	80054b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80055a0:	4b0f      	ldr	r3, [pc, #60]	@ (80055e0 <xQueueReceive+0x1c0>)
 80055a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	e780      	b.n	80054b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80055b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055b4:	f000 f9ce 	bl	8005954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055b8:	f000 fd1c 	bl	8005ff4 <xTaskResumeAll>
 80055bc:	e77a      	b.n	80054b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80055be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055c0:	f000 f9c8 	bl	8005954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055c4:	f000 fd16 	bl	8005ff4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055ca:	f000 fa15 	bl	80059f8 <prvIsQueueEmpty>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f43f af6f 	beq.w	80054b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3730      	adds	r7, #48	@ 0x30
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	e000ed04 	.word	0xe000ed04

080055e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08e      	sub	sp, #56	@ 0x38
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10b      	bne.n	8005618 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	623b      	str	r3, [r7, #32]
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	e7fd      	b.n	8005614 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	61fb      	str	r3, [r7, #28]
}
 8005632:	bf00      	nop
 8005634:	bf00      	nop
 8005636:	e7fd      	b.n	8005634 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005638:	f001 f8d2 	bl	80067e0 <xTaskGetSchedulerState>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d102      	bne.n	8005648 <xQueueSemaphoreTake+0x64>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <xQueueSemaphoreTake+0x68>
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <xQueueSemaphoreTake+0x6a>
 800564c:	2300      	movs	r3, #0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	61bb      	str	r3, [r7, #24]
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800566a:	f001 ff25 	bl	80074b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800566e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005672:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005676:	2b00      	cmp	r3, #0
 8005678:	d024      	beq.n	80056c4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567c:	1e5a      	subs	r2, r3, #1
 800567e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005680:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800568a:	f001 fa23 	bl	8006ad4 <pvTaskIncrementMutexHeldCount>
 800568e:	4602      	mov	r2, r0
 8005690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005692:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00f      	beq.n	80056bc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800569c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569e:	3310      	adds	r3, #16
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fec7 	bl	8006434 <xTaskRemoveFromEventList>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056ac:	4b54      	ldr	r3, [pc, #336]	@ (8005800 <xQueueSemaphoreTake+0x21c>)
 80056ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056bc:	f001 ff2e 	bl	800751c <vPortExitCritical>
				return pdPASS;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e098      	b.n	80057f6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d112      	bne.n	80056f0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80056ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	617b      	str	r3, [r7, #20]
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	e7fd      	b.n	80056e4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80056e8:	f001 ff18 	bl	800751c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e082      	b.n	80057f6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056f6:	f107 030c 	add.w	r3, r7, #12
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fefe 	bl	80064fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005700:	2301      	movs	r3, #1
 8005702:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005704:	f001 ff0a 	bl	800751c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005708:	f000 fc66 	bl	8005fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800570c:	f001 fed4 	bl	80074b8 <vPortEnterCritical>
 8005710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005712:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005716:	b25b      	sxtb	r3, r3
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d103      	bne.n	8005726 <xQueueSemaphoreTake+0x142>
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005728:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800572c:	b25b      	sxtb	r3, r3
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d103      	bne.n	800573c <xQueueSemaphoreTake+0x158>
 8005734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800573c:	f001 feee 	bl	800751c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005740:	463a      	mov	r2, r7
 8005742:	f107 030c 	add.w	r3, r7, #12
 8005746:	4611      	mov	r1, r2
 8005748:	4618      	mov	r0, r3
 800574a:	f000 feed 	bl	8006528 <xTaskCheckForTimeOut>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d132      	bne.n	80057ba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005754:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005756:	f000 f94f 	bl	80059f8 <prvIsQueueEmpty>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d026      	beq.n	80057ae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d109      	bne.n	800577c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005768:	f001 fea6 	bl	80074b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800576c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	4618      	mov	r0, r3
 8005772:	f001 f853 	bl	800681c <xTaskPriorityInherit>
 8005776:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005778:	f001 fed0 	bl	800751c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800577c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577e:	3324      	adds	r3, #36	@ 0x24
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	4611      	mov	r1, r2
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fe03 	bl	8006390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800578a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800578c:	f000 f8e2 	bl	8005954 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005790:	f000 fc30 	bl	8005ff4 <xTaskResumeAll>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	f47f af67 	bne.w	800566a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800579c:	4b18      	ldr	r3, [pc, #96]	@ (8005800 <xQueueSemaphoreTake+0x21c>)
 800579e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	e75d      	b.n	800566a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80057ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057b0:	f000 f8d0 	bl	8005954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057b4:	f000 fc1e 	bl	8005ff4 <xTaskResumeAll>
 80057b8:	e757      	b.n	800566a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80057ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057bc:	f000 f8ca 	bl	8005954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057c0:	f000 fc18 	bl	8005ff4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057c6:	f000 f917 	bl	80059f8 <prvIsQueueEmpty>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f43f af4c 	beq.w	800566a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80057d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00d      	beq.n	80057f4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80057d8:	f001 fe6e 	bl	80074b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80057dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057de:	f000 f811 	bl	8005804 <prvGetDisinheritPriorityAfterTimeout>
 80057e2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80057e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 f8ee 	bl	80069cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80057f0:	f001 fe94 	bl	800751c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3738      	adds	r7, #56	@ 0x38
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	d006      	beq.n	8005822 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	e001      	b.n	8005826 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005826:	68fb      	ldr	r3, [r7, #12]
	}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005848:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10d      	bne.n	800586e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d14d      	bne.n	80058f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	4618      	mov	r0, r3
 8005860:	f001 f844 	bl	80068ec <xTaskPriorityDisinherit>
 8005864:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	e043      	b.n	80058f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d119      	bne.n	80058a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6858      	ldr	r0, [r3, #4]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587c:	461a      	mov	r2, r3
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	f003 f99d 	bl	8008bbe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588c:	441a      	add	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	429a      	cmp	r2, r3
 800589c:	d32b      	bcc.n	80058f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	e026      	b.n	80058f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68d8      	ldr	r0, [r3, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b0:	461a      	mov	r2, r3
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	f003 f983 	bl	8008bbe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c0:	425b      	negs	r3, r3
 80058c2:	441a      	add	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d207      	bcs.n	80058e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058dc:	425b      	negs	r3, r3
 80058de:	441a      	add	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d105      	bne.n	80058f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80058fe:	697b      	ldr	r3, [r7, #20]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d018      	beq.n	800594c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005922:	441a      	add	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d303      	bcc.n	800593c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68d9      	ldr	r1, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005944:	461a      	mov	r2, r3
 8005946:	6838      	ldr	r0, [r7, #0]
 8005948:	f003 f939 	bl	8008bbe <memcpy>
	}
}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800595c:	f001 fdac 	bl	80074b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005966:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005968:	e011      	b.n	800598e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	2b00      	cmp	r3, #0
 8005970:	d012      	beq.n	8005998 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3324      	adds	r3, #36	@ 0x24
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fd5c 	bl	8006434 <xTaskRemoveFromEventList>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005982:	f000 fe35 	bl	80065f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	3b01      	subs	r3, #1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800598e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005992:	2b00      	cmp	r3, #0
 8005994:	dce9      	bgt.n	800596a <prvUnlockQueue+0x16>
 8005996:	e000      	b.n	800599a <prvUnlockQueue+0x46>
					break;
 8005998:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	22ff      	movs	r2, #255	@ 0xff
 800599e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80059a2:	f001 fdbb 	bl	800751c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80059a6:	f001 fd87 	bl	80074b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059b2:	e011      	b.n	80059d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d012      	beq.n	80059e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3310      	adds	r3, #16
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fd37 	bl	8006434 <xTaskRemoveFromEventList>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059cc:	f000 fe10 	bl	80065f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059d0:	7bbb      	ldrb	r3, [r7, #14]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	dce9      	bgt.n	80059b4 <prvUnlockQueue+0x60>
 80059e0:	e000      	b.n	80059e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	22ff      	movs	r2, #255	@ 0xff
 80059e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80059ec:	f001 fd96 	bl	800751c <vPortExitCritical>
}
 80059f0:	bf00      	nop
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a00:	f001 fd5a 	bl	80074b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d102      	bne.n	8005a12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	e001      	b.n	8005a16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a16:	f001 fd81 	bl	800751c <vPortExitCritical>

	return xReturn;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a2c:	f001 fd44 	bl	80074b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d102      	bne.n	8005a42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e001      	b.n	8005a46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a46:	f001 fd69 	bl	800751c <vPortExitCritical>

	return xReturn;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	e014      	b.n	8005a8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a64:	4a0f      	ldr	r2, [pc, #60]	@ (8005aa4 <vQueueAddToRegistry+0x50>)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10b      	bne.n	8005a88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a70:	490c      	ldr	r1, [pc, #48]	@ (8005aa4 <vQueueAddToRegistry+0x50>)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa4 <vQueueAddToRegistry+0x50>)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4413      	add	r3, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a86:	e006      	b.n	8005a96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b07      	cmp	r3, #7
 8005a92:	d9e7      	bls.n	8005a64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a94:	bf00      	nop
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20000a78 	.word	0x20000a78

08005aa8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ab8:	f001 fcfe 	bl	80074b8 <vPortEnterCritical>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ac2:	b25b      	sxtb	r3, r3
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d103      	bne.n	8005ad2 <vQueueWaitForMessageRestricted+0x2a>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ad8:	b25b      	sxtb	r3, r3
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ade:	d103      	bne.n	8005ae8 <vQueueWaitForMessageRestricted+0x40>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ae8:	f001 fd18 	bl	800751c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	3324      	adds	r3, #36	@ 0x24
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fc6d 	bl	80063dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b02:	6978      	ldr	r0, [r7, #20]
 8005b04:	f7ff ff26 	bl	8005954 <prvUnlockQueue>
	}
 8005b08:	bf00      	nop
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08e      	sub	sp, #56	@ 0x38
 8005b14:	af04      	add	r7, sp, #16
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	623b      	str	r3, [r7, #32]
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	61fb      	str	r3, [r7, #28]
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop
 8005b58:	e7fd      	b.n	8005b56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b5a:	23a8      	movs	r3, #168	@ 0xa8
 8005b5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2ba8      	cmp	r3, #168	@ 0xa8
 8005b62:	d00b      	beq.n	8005b7c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	61bb      	str	r3, [r7, #24]
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	e7fd      	b.n	8005b78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01e      	beq.n	8005bc2 <xTaskCreateStatic+0xb2>
 8005b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d01b      	beq.n	8005bc2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9303      	str	r3, [sp, #12]
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	9302      	str	r3, [sp, #8]
 8005ba4:	f107 0314 	add.w	r3, r7, #20
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f851 	bl	8005c5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005bbc:	f000 f8f6 	bl	8005dac <prvAddNewTaskToReadyList>
 8005bc0:	e001      	b.n	8005bc6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bc6:	697b      	ldr	r3, [r7, #20]
	}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3728      	adds	r7, #40	@ 0x28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08c      	sub	sp, #48	@ 0x30
 8005bd4:	af04      	add	r7, sp, #16
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f001 fd89 	bl	80076fc <pvPortMalloc>
 8005bea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00e      	beq.n	8005c10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bf2:	20a8      	movs	r0, #168	@ 0xa8
 8005bf4:	f001 fd82 	bl	80076fc <pvPortMalloc>
 8005bf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c06:	e005      	b.n	8005c14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c08:	6978      	ldr	r0, [r7, #20]
 8005c0a:	f001 fe45 	bl	8007898 <vPortFree>
 8005c0e:	e001      	b.n	8005c14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d017      	beq.n	8005c4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	2300      	movs	r3, #0
 8005c26:	9303      	str	r3, [sp, #12]
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	9302      	str	r3, [sp, #8]
 8005c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f80f 	bl	8005c5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c3e:	69f8      	ldr	r0, [r7, #28]
 8005c40:	f000 f8b4 	bl	8005dac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c44:	2301      	movs	r3, #1
 8005c46:	61bb      	str	r3, [r7, #24]
 8005c48:	e002      	b.n	8005c50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c50:	69bb      	ldr	r3, [r7, #24]
	}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3720      	adds	r7, #32
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	461a      	mov	r2, r3
 8005c74:	21a5      	movs	r1, #165	@ 0xa5
 8005c76:	f002 fec5 	bl	8008a04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c84:	3b01      	subs	r3, #1
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f023 0307 	bic.w	r3, r3, #7
 8005c92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	617b      	str	r3, [r7, #20]
}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	e7fd      	b.n	8005cb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01f      	beq.n	8005cfc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	e012      	b.n	8005ce8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	7819      	ldrb	r1, [r3, #0]
 8005cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	3334      	adds	r3, #52	@ 0x34
 8005cd2:	460a      	mov	r2, r1
 8005cd4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d006      	beq.n	8005cf0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	2b0f      	cmp	r3, #15
 8005cec:	d9e9      	bls.n	8005cc2 <prvInitialiseNewTask+0x66>
 8005cee:	e000      	b.n	8005cf2 <prvInitialiseNewTask+0x96>
			{
				break;
 8005cf0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cfa:	e003      	b.n	8005d04 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d06:	2b37      	cmp	r3, #55	@ 0x37
 8005d08:	d901      	bls.n	8005d0e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d0a:	2337      	movs	r3, #55	@ 0x37
 8005d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d18:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d22:	3304      	adds	r3, #4
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fe ff49 	bl	8004bbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2c:	3318      	adds	r3, #24
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe ff44 	bl	8004bbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5c:	3354      	adds	r3, #84	@ 0x54
 8005d5e:	224c      	movs	r2, #76	@ 0x4c
 8005d60:	2100      	movs	r1, #0
 8005d62:	4618      	mov	r0, r3
 8005d64:	f002 fe4e 	bl	8008a04 <memset>
 8005d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005da0 <prvInitialiseNewTask+0x144>)
 8005d6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d70:	4a0c      	ldr	r2, [pc, #48]	@ (8005da4 <prvInitialiseNewTask+0x148>)
 8005d72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d76:	4a0c      	ldr	r2, [pc, #48]	@ (8005da8 <prvInitialiseNewTask+0x14c>)
 8005d78:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	68f9      	ldr	r1, [r7, #12]
 8005d7e:	69b8      	ldr	r0, [r7, #24]
 8005d80:	f001 fa6a 	bl	8007258 <pxPortInitialiseStack>
 8005d84:	4602      	mov	r2, r0
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d96:	bf00      	nop
 8005d98:	3720      	adds	r7, #32
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	2000610c 	.word	0x2000610c
 8005da4:	20006174 	.word	0x20006174
 8005da8:	200061dc 	.word	0x200061dc

08005dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005db4:	f001 fb80 	bl	80074b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005db8:	4b2d      	ldr	r3, [pc, #180]	@ (8005e70 <prvAddNewTaskToReadyList+0xc4>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005e70 <prvAddNewTaskToReadyList+0xc4>)
 8005dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8005e74 <prvAddNewTaskToReadyList+0xc8>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dca:	4a2a      	ldr	r2, [pc, #168]	@ (8005e74 <prvAddNewTaskToReadyList+0xc8>)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dd0:	4b27      	ldr	r3, [pc, #156]	@ (8005e70 <prvAddNewTaskToReadyList+0xc4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d110      	bne.n	8005dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005dd8:	f000 fc2e 	bl	8006638 <prvInitialiseTaskLists>
 8005ddc:	e00d      	b.n	8005dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dde:	4b26      	ldr	r3, [pc, #152]	@ (8005e78 <prvAddNewTaskToReadyList+0xcc>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005de6:	4b23      	ldr	r3, [pc, #140]	@ (8005e74 <prvAddNewTaskToReadyList+0xc8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d802      	bhi.n	8005dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005df4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e74 <prvAddNewTaskToReadyList+0xc8>)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dfa:	4b20      	ldr	r3, [pc, #128]	@ (8005e7c <prvAddNewTaskToReadyList+0xd0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	4a1e      	ldr	r2, [pc, #120]	@ (8005e7c <prvAddNewTaskToReadyList+0xd0>)
 8005e02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e04:	4b1d      	ldr	r3, [pc, #116]	@ (8005e7c <prvAddNewTaskToReadyList+0xd0>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e10:	4b1b      	ldr	r3, [pc, #108]	@ (8005e80 <prvAddNewTaskToReadyList+0xd4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d903      	bls.n	8005e20 <prvAddNewTaskToReadyList+0x74>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1c:	4a18      	ldr	r2, [pc, #96]	@ (8005e80 <prvAddNewTaskToReadyList+0xd4>)
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4a15      	ldr	r2, [pc, #84]	@ (8005e84 <prvAddNewTaskToReadyList+0xd8>)
 8005e2e:	441a      	add	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4619      	mov	r1, r3
 8005e36:	4610      	mov	r0, r2
 8005e38:	f7fe fecd 	bl	8004bd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e3c:	f001 fb6e 	bl	800751c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e40:	4b0d      	ldr	r3, [pc, #52]	@ (8005e78 <prvAddNewTaskToReadyList+0xcc>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00e      	beq.n	8005e66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e48:	4b0a      	ldr	r3, [pc, #40]	@ (8005e74 <prvAddNewTaskToReadyList+0xc8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d207      	bcs.n	8005e66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e56:	4b0c      	ldr	r3, [pc, #48]	@ (8005e88 <prvAddNewTaskToReadyList+0xdc>)
 8005e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000f8c 	.word	0x20000f8c
 8005e74:	20000ab8 	.word	0x20000ab8
 8005e78:	20000f98 	.word	0x20000f98
 8005e7c:	20000fa8 	.word	0x20000fa8
 8005e80:	20000f94 	.word	0x20000f94
 8005e84:	20000abc 	.word	0x20000abc
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d018      	beq.n	8005ed0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e9e:	4b14      	ldr	r3, [pc, #80]	@ (8005ef0 <vTaskDelay+0x64>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00b      	beq.n	8005ebe <vTaskDelay+0x32>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60bb      	str	r3, [r7, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ebe:	f000 f88b 	bl	8005fd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fe19 	bl	8006afc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005eca:	f000 f893 	bl	8005ff4 <xTaskResumeAll>
 8005ece:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d107      	bne.n	8005ee6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005ed6:	4b07      	ldr	r3, [pc, #28]	@ (8005ef4 <vTaskDelay+0x68>)
 8005ed8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000fb4 	.word	0x20000fb4
 8005ef4:	e000ed04 	.word	0xe000ed04

08005ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	@ 0x28
 8005efc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f06:	463a      	mov	r2, r7
 8005f08:	1d39      	adds	r1, r7, #4
 8005f0a:	f107 0308 	add.w	r3, r7, #8
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fe00 	bl	8004b14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	9202      	str	r2, [sp, #8]
 8005f1c:	9301      	str	r3, [sp, #4]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	460a      	mov	r2, r1
 8005f26:	4924      	ldr	r1, [pc, #144]	@ (8005fb8 <vTaskStartScheduler+0xc0>)
 8005f28:	4824      	ldr	r0, [pc, #144]	@ (8005fbc <vTaskStartScheduler+0xc4>)
 8005f2a:	f7ff fdf1 	bl	8005b10 <xTaskCreateStatic>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	4a23      	ldr	r2, [pc, #140]	@ (8005fc0 <vTaskStartScheduler+0xc8>)
 8005f32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f34:	4b22      	ldr	r3, [pc, #136]	@ (8005fc0 <vTaskStartScheduler+0xc8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	e001      	b.n	8005f46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d102      	bne.n	8005f52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f4c:	f000 fe2a 	bl	8006ba4 <xTimerCreateTimerTask>
 8005f50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d11b      	bne.n	8005f90 <vTaskStartScheduler+0x98>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	613b      	str	r3, [r7, #16]
}
 8005f6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f6c:	4b15      	ldr	r3, [pc, #84]	@ (8005fc4 <vTaskStartScheduler+0xcc>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3354      	adds	r3, #84	@ 0x54
 8005f72:	4a15      	ldr	r2, [pc, #84]	@ (8005fc8 <vTaskStartScheduler+0xd0>)
 8005f74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f76:	4b15      	ldr	r3, [pc, #84]	@ (8005fcc <vTaskStartScheduler+0xd4>)
 8005f78:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f7e:	4b14      	ldr	r3, [pc, #80]	@ (8005fd0 <vTaskStartScheduler+0xd8>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f84:	4b13      	ldr	r3, [pc, #76]	@ (8005fd4 <vTaskStartScheduler+0xdc>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f8a:	f001 f9f1 	bl	8007370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f8e:	e00f      	b.n	8005fb0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d10b      	bne.n	8005fb0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	60fb      	str	r3, [r7, #12]
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	e7fd      	b.n	8005fac <vTaskStartScheduler+0xb4>
}
 8005fb0:	bf00      	nop
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	0800c72c 	.word	0x0800c72c
 8005fbc:	08006609 	.word	0x08006609
 8005fc0:	20000fb0 	.word	0x20000fb0
 8005fc4:	20000ab8 	.word	0x20000ab8
 8005fc8:	2000001c 	.word	0x2000001c
 8005fcc:	20000fac 	.word	0x20000fac
 8005fd0:	20000f98 	.word	0x20000f98
 8005fd4:	20000f90 	.word	0x20000f90

08005fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005fdc:	4b04      	ldr	r3, [pc, #16]	@ (8005ff0 <vTaskSuspendAll+0x18>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	4a03      	ldr	r2, [pc, #12]	@ (8005ff0 <vTaskSuspendAll+0x18>)
 8005fe4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005fe6:	bf00      	nop
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20000fb4 	.word	0x20000fb4

08005ff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006002:	4b42      	ldr	r3, [pc, #264]	@ (800610c <xTaskResumeAll+0x118>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <xTaskResumeAll+0x2e>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	603b      	str	r3, [r7, #0]
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	e7fd      	b.n	800601e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006022:	f001 fa49 	bl	80074b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006026:	4b39      	ldr	r3, [pc, #228]	@ (800610c <xTaskResumeAll+0x118>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3b01      	subs	r3, #1
 800602c:	4a37      	ldr	r2, [pc, #220]	@ (800610c <xTaskResumeAll+0x118>)
 800602e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006030:	4b36      	ldr	r3, [pc, #216]	@ (800610c <xTaskResumeAll+0x118>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d162      	bne.n	80060fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006038:	4b35      	ldr	r3, [pc, #212]	@ (8006110 <xTaskResumeAll+0x11c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d05e      	beq.n	80060fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006040:	e02f      	b.n	80060a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006042:	4b34      	ldr	r3, [pc, #208]	@ (8006114 <xTaskResumeAll+0x120>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3318      	adds	r3, #24
 800604e:	4618      	mov	r0, r3
 8006050:	f7fe fe1e 	bl	8004c90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3304      	adds	r3, #4
 8006058:	4618      	mov	r0, r3
 800605a:	f7fe fe19 	bl	8004c90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006062:	4b2d      	ldr	r3, [pc, #180]	@ (8006118 <xTaskResumeAll+0x124>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d903      	bls.n	8006072 <xTaskResumeAll+0x7e>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	4a2a      	ldr	r2, [pc, #168]	@ (8006118 <xTaskResumeAll+0x124>)
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4a27      	ldr	r2, [pc, #156]	@ (800611c <xTaskResumeAll+0x128>)
 8006080:	441a      	add	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3304      	adds	r3, #4
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f7fe fda4 	bl	8004bd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006092:	4b23      	ldr	r3, [pc, #140]	@ (8006120 <xTaskResumeAll+0x12c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800609c:	4b21      	ldr	r3, [pc, #132]	@ (8006124 <xTaskResumeAll+0x130>)
 800609e:	2201      	movs	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006114 <xTaskResumeAll+0x120>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1cb      	bne.n	8006042 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060b0:	f000 fb66 	bl	8006780 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80060b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006128 <xTaskResumeAll+0x134>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d010      	beq.n	80060e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060c0:	f000 f846 	bl	8006150 <xTaskIncrementTick>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80060ca:	4b16      	ldr	r3, [pc, #88]	@ (8006124 <xTaskResumeAll+0x130>)
 80060cc:	2201      	movs	r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f1      	bne.n	80060c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80060dc:	4b12      	ldr	r3, [pc, #72]	@ (8006128 <xTaskResumeAll+0x134>)
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060e2:	4b10      	ldr	r3, [pc, #64]	@ (8006124 <xTaskResumeAll+0x130>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d009      	beq.n	80060fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060ea:	2301      	movs	r3, #1
 80060ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060ee:	4b0f      	ldr	r3, [pc, #60]	@ (800612c <xTaskResumeAll+0x138>)
 80060f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060fe:	f001 fa0d 	bl	800751c <vPortExitCritical>

	return xAlreadyYielded;
 8006102:	68bb      	ldr	r3, [r7, #8]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000fb4 	.word	0x20000fb4
 8006110:	20000f8c 	.word	0x20000f8c
 8006114:	20000f4c 	.word	0x20000f4c
 8006118:	20000f94 	.word	0x20000f94
 800611c:	20000abc 	.word	0x20000abc
 8006120:	20000ab8 	.word	0x20000ab8
 8006124:	20000fa0 	.word	0x20000fa0
 8006128:	20000f9c 	.word	0x20000f9c
 800612c:	e000ed04 	.word	0xe000ed04

08006130 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006136:	4b05      	ldr	r3, [pc, #20]	@ (800614c <xTaskGetTickCount+0x1c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800613c:	687b      	ldr	r3, [r7, #4]
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	20000f90 	.word	0x20000f90

08006150 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800615a:	4b4f      	ldr	r3, [pc, #316]	@ (8006298 <xTaskIncrementTick+0x148>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 8090 	bne.w	8006284 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006164:	4b4d      	ldr	r3, [pc, #308]	@ (800629c <xTaskIncrementTick+0x14c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3301      	adds	r3, #1
 800616a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800616c:	4a4b      	ldr	r2, [pc, #300]	@ (800629c <xTaskIncrementTick+0x14c>)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d121      	bne.n	80061bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006178:	4b49      	ldr	r3, [pc, #292]	@ (80062a0 <xTaskIncrementTick+0x150>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	603b      	str	r3, [r7, #0]
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	e7fd      	b.n	8006196 <xTaskIncrementTick+0x46>
 800619a:	4b41      	ldr	r3, [pc, #260]	@ (80062a0 <xTaskIncrementTick+0x150>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	4b40      	ldr	r3, [pc, #256]	@ (80062a4 <xTaskIncrementTick+0x154>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a3e      	ldr	r2, [pc, #248]	@ (80062a0 <xTaskIncrementTick+0x150>)
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	4a3e      	ldr	r2, [pc, #248]	@ (80062a4 <xTaskIncrementTick+0x154>)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	4b3e      	ldr	r3, [pc, #248]	@ (80062a8 <xTaskIncrementTick+0x158>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	4a3c      	ldr	r2, [pc, #240]	@ (80062a8 <xTaskIncrementTick+0x158>)
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	f000 fae2 	bl	8006780 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061bc:	4b3b      	ldr	r3, [pc, #236]	@ (80062ac <xTaskIncrementTick+0x15c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d349      	bcc.n	800625a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061c6:	4b36      	ldr	r3, [pc, #216]	@ (80062a0 <xTaskIncrementTick+0x150>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d104      	bne.n	80061da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d0:	4b36      	ldr	r3, [pc, #216]	@ (80062ac <xTaskIncrementTick+0x15c>)
 80061d2:	f04f 32ff 	mov.w	r2, #4294967295
 80061d6:	601a      	str	r2, [r3, #0]
					break;
 80061d8:	e03f      	b.n	800625a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061da:	4b31      	ldr	r3, [pc, #196]	@ (80062a0 <xTaskIncrementTick+0x150>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d203      	bcs.n	80061fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061f2:	4a2e      	ldr	r2, [pc, #184]	@ (80062ac <xTaskIncrementTick+0x15c>)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061f8:	e02f      	b.n	800625a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe fd46 	bl	8004c90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006208:	2b00      	cmp	r3, #0
 800620a:	d004      	beq.n	8006216 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	3318      	adds	r3, #24
 8006210:	4618      	mov	r0, r3
 8006212:	f7fe fd3d 	bl	8004c90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800621a:	4b25      	ldr	r3, [pc, #148]	@ (80062b0 <xTaskIncrementTick+0x160>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d903      	bls.n	800622a <xTaskIncrementTick+0xda>
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006226:	4a22      	ldr	r2, [pc, #136]	@ (80062b0 <xTaskIncrementTick+0x160>)
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4a1f      	ldr	r2, [pc, #124]	@ (80062b4 <xTaskIncrementTick+0x164>)
 8006238:	441a      	add	r2, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	3304      	adds	r3, #4
 800623e:	4619      	mov	r1, r3
 8006240:	4610      	mov	r0, r2
 8006242:	f7fe fcc8 	bl	8004bd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800624a:	4b1b      	ldr	r3, [pc, #108]	@ (80062b8 <xTaskIncrementTick+0x168>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	429a      	cmp	r2, r3
 8006252:	d3b8      	bcc.n	80061c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006254:	2301      	movs	r3, #1
 8006256:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006258:	e7b5      	b.n	80061c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800625a:	4b17      	ldr	r3, [pc, #92]	@ (80062b8 <xTaskIncrementTick+0x168>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006260:	4914      	ldr	r1, [pc, #80]	@ (80062b4 <xTaskIncrementTick+0x164>)
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	440b      	add	r3, r1
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d901      	bls.n	8006276 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006272:	2301      	movs	r3, #1
 8006274:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006276:	4b11      	ldr	r3, [pc, #68]	@ (80062bc <xTaskIncrementTick+0x16c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800627e:	2301      	movs	r3, #1
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	e004      	b.n	800628e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006284:	4b0e      	ldr	r3, [pc, #56]	@ (80062c0 <xTaskIncrementTick+0x170>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3301      	adds	r3, #1
 800628a:	4a0d      	ldr	r2, [pc, #52]	@ (80062c0 <xTaskIncrementTick+0x170>)
 800628c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800628e:	697b      	ldr	r3, [r7, #20]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20000fb4 	.word	0x20000fb4
 800629c:	20000f90 	.word	0x20000f90
 80062a0:	20000f44 	.word	0x20000f44
 80062a4:	20000f48 	.word	0x20000f48
 80062a8:	20000fa4 	.word	0x20000fa4
 80062ac:	20000fac 	.word	0x20000fac
 80062b0:	20000f94 	.word	0x20000f94
 80062b4:	20000abc 	.word	0x20000abc
 80062b8:	20000ab8 	.word	0x20000ab8
 80062bc:	20000fa0 	.word	0x20000fa0
 80062c0:	20000f9c 	.word	0x20000f9c

080062c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006378 <vTaskSwitchContext+0xb4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062d2:	4b2a      	ldr	r3, [pc, #168]	@ (800637c <vTaskSwitchContext+0xb8>)
 80062d4:	2201      	movs	r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062d8:	e047      	b.n	800636a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80062da:	4b28      	ldr	r3, [pc, #160]	@ (800637c <vTaskSwitchContext+0xb8>)
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e0:	4b27      	ldr	r3, [pc, #156]	@ (8006380 <vTaskSwitchContext+0xbc>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	e011      	b.n	800630c <vTaskSwitchContext+0x48>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10b      	bne.n	8006306 <vTaskSwitchContext+0x42>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <vTaskSwitchContext+0x3e>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3b01      	subs	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	491d      	ldr	r1, [pc, #116]	@ (8006384 <vTaskSwitchContext+0xc0>)
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0e3      	beq.n	80062e8 <vTaskSwitchContext+0x24>
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4a16      	ldr	r2, [pc, #88]	@ (8006384 <vTaskSwitchContext+0xc0>)
 800632c:	4413      	add	r3, r2
 800632e:	60bb      	str	r3, [r7, #8]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	605a      	str	r2, [r3, #4]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	3308      	adds	r3, #8
 8006342:	429a      	cmp	r2, r3
 8006344:	d104      	bne.n	8006350 <vTaskSwitchContext+0x8c>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	605a      	str	r2, [r3, #4]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	4a0c      	ldr	r2, [pc, #48]	@ (8006388 <vTaskSwitchContext+0xc4>)
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	4a09      	ldr	r2, [pc, #36]	@ (8006380 <vTaskSwitchContext+0xbc>)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006360:	4b09      	ldr	r3, [pc, #36]	@ (8006388 <vTaskSwitchContext+0xc4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3354      	adds	r3, #84	@ 0x54
 8006366:	4a09      	ldr	r2, [pc, #36]	@ (800638c <vTaskSwitchContext+0xc8>)
 8006368:	6013      	str	r3, [r2, #0]
}
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000fb4 	.word	0x20000fb4
 800637c:	20000fa0 	.word	0x20000fa0
 8006380:	20000f94 	.word	0x20000f94
 8006384:	20000abc 	.word	0x20000abc
 8006388:	20000ab8 	.word	0x20000ab8
 800638c:	2000001c 	.word	0x2000001c

08006390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10b      	bne.n	80063b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	60fb      	str	r3, [r7, #12]
}
 80063b2:	bf00      	nop
 80063b4:	bf00      	nop
 80063b6:	e7fd      	b.n	80063b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063b8:	4b07      	ldr	r3, [pc, #28]	@ (80063d8 <vTaskPlaceOnEventList+0x48>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3318      	adds	r3, #24
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7fe fc2c 	bl	8004c1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063c6:	2101      	movs	r1, #1
 80063c8:	6838      	ldr	r0, [r7, #0]
 80063ca:	f000 fb97 	bl	8006afc <prvAddCurrentTaskToDelayedList>
}
 80063ce:	bf00      	nop
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000ab8 	.word	0x20000ab8

080063dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	617b      	str	r3, [r7, #20]
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	e7fd      	b.n	8006402 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006406:	4b0a      	ldr	r3, [pc, #40]	@ (8006430 <vTaskPlaceOnEventListRestricted+0x54>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3318      	adds	r3, #24
 800640c:	4619      	mov	r1, r3
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7fe fbe1 	bl	8004bd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800641a:	f04f 33ff 	mov.w	r3, #4294967295
 800641e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	68b8      	ldr	r0, [r7, #8]
 8006424:	f000 fb6a 	bl	8006afc <prvAddCurrentTaskToDelayedList>
	}
 8006428:	bf00      	nop
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	20000ab8 	.word	0x20000ab8

08006434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	60fb      	str	r3, [r7, #12]
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	e7fd      	b.n	800645e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	3318      	adds	r3, #24
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fc12 	bl	8004c90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800646c:	4b1d      	ldr	r3, [pc, #116]	@ (80064e4 <xTaskRemoveFromEventList+0xb0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d11d      	bne.n	80064b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	3304      	adds	r3, #4
 8006478:	4618      	mov	r0, r3
 800647a:	f7fe fc09 	bl	8004c90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006482:	4b19      	ldr	r3, [pc, #100]	@ (80064e8 <xTaskRemoveFromEventList+0xb4>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d903      	bls.n	8006492 <xTaskRemoveFromEventList+0x5e>
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648e:	4a16      	ldr	r2, [pc, #88]	@ (80064e8 <xTaskRemoveFromEventList+0xb4>)
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4a13      	ldr	r2, [pc, #76]	@ (80064ec <xTaskRemoveFromEventList+0xb8>)
 80064a0:	441a      	add	r2, r3
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7fe fb94 	bl	8004bd6 <vListInsertEnd>
 80064ae:	e005      	b.n	80064bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	3318      	adds	r3, #24
 80064b4:	4619      	mov	r1, r3
 80064b6:	480e      	ldr	r0, [pc, #56]	@ (80064f0 <xTaskRemoveFromEventList+0xbc>)
 80064b8:	f7fe fb8d 	bl	8004bd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c0:	4b0c      	ldr	r3, [pc, #48]	@ (80064f4 <xTaskRemoveFromEventList+0xc0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d905      	bls.n	80064d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064ca:	2301      	movs	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064ce:	4b0a      	ldr	r3, [pc, #40]	@ (80064f8 <xTaskRemoveFromEventList+0xc4>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	e001      	b.n	80064da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80064da:	697b      	ldr	r3, [r7, #20]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000fb4 	.word	0x20000fb4
 80064e8:	20000f94 	.word	0x20000f94
 80064ec:	20000abc 	.word	0x20000abc
 80064f0:	20000f4c 	.word	0x20000f4c
 80064f4:	20000ab8 	.word	0x20000ab8
 80064f8:	20000fa0 	.word	0x20000fa0

080064fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006504:	4b06      	ldr	r3, [pc, #24]	@ (8006520 <vTaskInternalSetTimeOutState+0x24>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800650c:	4b05      	ldr	r3, [pc, #20]	@ (8006524 <vTaskInternalSetTimeOutState+0x28>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	605a      	str	r2, [r3, #4]
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	20000fa4 	.word	0x20000fa4
 8006524:	20000f90 	.word	0x20000f90

08006528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10b      	bne.n	8006550 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	613b      	str	r3, [r7, #16]
}
 800654a:	bf00      	nop
 800654c:	bf00      	nop
 800654e:	e7fd      	b.n	800654c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	60fb      	str	r3, [r7, #12]
}
 8006568:	bf00      	nop
 800656a:	bf00      	nop
 800656c:	e7fd      	b.n	800656a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800656e:	f000 ffa3 	bl	80074b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006572:	4b1d      	ldr	r3, [pc, #116]	@ (80065e8 <xTaskCheckForTimeOut+0xc0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658a:	d102      	bne.n	8006592 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800658c:	2300      	movs	r3, #0
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	e023      	b.n	80065da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4b15      	ldr	r3, [pc, #84]	@ (80065ec <xTaskCheckForTimeOut+0xc4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d007      	beq.n	80065ae <xTaskCheckForTimeOut+0x86>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d302      	bcc.n	80065ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065a8:	2301      	movs	r3, #1
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	e015      	b.n	80065da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d20b      	bcs.n	80065d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	1ad2      	subs	r2, r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff ff99 	bl	80064fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	61fb      	str	r3, [r7, #28]
 80065ce:	e004      	b.n	80065da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065d6:	2301      	movs	r3, #1
 80065d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065da:	f000 ff9f 	bl	800751c <vPortExitCritical>

	return xReturn;
 80065de:	69fb      	ldr	r3, [r7, #28]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3720      	adds	r7, #32
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20000f90 	.word	0x20000f90
 80065ec:	20000fa4 	.word	0x20000fa4

080065f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065f4:	4b03      	ldr	r3, [pc, #12]	@ (8006604 <vTaskMissedYield+0x14>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	601a      	str	r2, [r3, #0]
}
 80065fa:	bf00      	nop
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	20000fa0 	.word	0x20000fa0

08006608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006610:	f000 f852 	bl	80066b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006614:	4b06      	ldr	r3, [pc, #24]	@ (8006630 <prvIdleTask+0x28>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d9f9      	bls.n	8006610 <prvIdleTask+0x8>
			{
				taskYIELD();
 800661c:	4b05      	ldr	r3, [pc, #20]	@ (8006634 <prvIdleTask+0x2c>)
 800661e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800662c:	e7f0      	b.n	8006610 <prvIdleTask+0x8>
 800662e:	bf00      	nop
 8006630:	20000abc 	.word	0x20000abc
 8006634:	e000ed04 	.word	0xe000ed04

08006638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800663e:	2300      	movs	r3, #0
 8006640:	607b      	str	r3, [r7, #4]
 8006642:	e00c      	b.n	800665e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4a12      	ldr	r2, [pc, #72]	@ (8006698 <prvInitialiseTaskLists+0x60>)
 8006650:	4413      	add	r3, r2
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fa92 	bl	8004b7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3301      	adds	r3, #1
 800665c:	607b      	str	r3, [r7, #4]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b37      	cmp	r3, #55	@ 0x37
 8006662:	d9ef      	bls.n	8006644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006664:	480d      	ldr	r0, [pc, #52]	@ (800669c <prvInitialiseTaskLists+0x64>)
 8006666:	f7fe fa89 	bl	8004b7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800666a:	480d      	ldr	r0, [pc, #52]	@ (80066a0 <prvInitialiseTaskLists+0x68>)
 800666c:	f7fe fa86 	bl	8004b7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006670:	480c      	ldr	r0, [pc, #48]	@ (80066a4 <prvInitialiseTaskLists+0x6c>)
 8006672:	f7fe fa83 	bl	8004b7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006676:	480c      	ldr	r0, [pc, #48]	@ (80066a8 <prvInitialiseTaskLists+0x70>)
 8006678:	f7fe fa80 	bl	8004b7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800667c:	480b      	ldr	r0, [pc, #44]	@ (80066ac <prvInitialiseTaskLists+0x74>)
 800667e:	f7fe fa7d 	bl	8004b7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006682:	4b0b      	ldr	r3, [pc, #44]	@ (80066b0 <prvInitialiseTaskLists+0x78>)
 8006684:	4a05      	ldr	r2, [pc, #20]	@ (800669c <prvInitialiseTaskLists+0x64>)
 8006686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006688:	4b0a      	ldr	r3, [pc, #40]	@ (80066b4 <prvInitialiseTaskLists+0x7c>)
 800668a:	4a05      	ldr	r2, [pc, #20]	@ (80066a0 <prvInitialiseTaskLists+0x68>)
 800668c:	601a      	str	r2, [r3, #0]
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20000abc 	.word	0x20000abc
 800669c:	20000f1c 	.word	0x20000f1c
 80066a0:	20000f30 	.word	0x20000f30
 80066a4:	20000f4c 	.word	0x20000f4c
 80066a8:	20000f60 	.word	0x20000f60
 80066ac:	20000f78 	.word	0x20000f78
 80066b0:	20000f44 	.word	0x20000f44
 80066b4:	20000f48 	.word	0x20000f48

080066b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066be:	e019      	b.n	80066f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066c0:	f000 fefa 	bl	80074b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c4:	4b10      	ldr	r3, [pc, #64]	@ (8006708 <prvCheckTasksWaitingTermination+0x50>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3304      	adds	r3, #4
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fe fadd 	bl	8004c90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066d6:	4b0d      	ldr	r3, [pc, #52]	@ (800670c <prvCheckTasksWaitingTermination+0x54>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3b01      	subs	r3, #1
 80066dc:	4a0b      	ldr	r2, [pc, #44]	@ (800670c <prvCheckTasksWaitingTermination+0x54>)
 80066de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006710 <prvCheckTasksWaitingTermination+0x58>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006710 <prvCheckTasksWaitingTermination+0x58>)
 80066e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066ea:	f000 ff17 	bl	800751c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f810 	bl	8006714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066f4:	4b06      	ldr	r3, [pc, #24]	@ (8006710 <prvCheckTasksWaitingTermination+0x58>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e1      	bne.n	80066c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066fc:	bf00      	nop
 80066fe:	bf00      	nop
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20000f60 	.word	0x20000f60
 800670c:	20000f8c 	.word	0x20000f8c
 8006710:	20000f74 	.word	0x20000f74

08006714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3354      	adds	r3, #84	@ 0x54
 8006720:	4618      	mov	r0, r3
 8006722:	f002 f98b 	bl	8008a3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800672c:	2b00      	cmp	r3, #0
 800672e:	d108      	bne.n	8006742 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006734:	4618      	mov	r0, r3
 8006736:	f001 f8af 	bl	8007898 <vPortFree>
				vPortFree( pxTCB );
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f001 f8ac 	bl	8007898 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006740:	e019      	b.n	8006776 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006748:	2b01      	cmp	r3, #1
 800674a:	d103      	bne.n	8006754 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 f8a3 	bl	8007898 <vPortFree>
	}
 8006752:	e010      	b.n	8006776 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800675a:	2b02      	cmp	r3, #2
 800675c:	d00b      	beq.n	8006776 <prvDeleteTCB+0x62>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	60fb      	str	r3, [r7, #12]
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	e7fd      	b.n	8006772 <prvDeleteTCB+0x5e>
	}
 8006776:	bf00      	nop
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006786:	4b0c      	ldr	r3, [pc, #48]	@ (80067b8 <prvResetNextTaskUnblockTime+0x38>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d104      	bne.n	800679a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006790:	4b0a      	ldr	r3, [pc, #40]	@ (80067bc <prvResetNextTaskUnblockTime+0x3c>)
 8006792:	f04f 32ff 	mov.w	r2, #4294967295
 8006796:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006798:	e008      	b.n	80067ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800679a:	4b07      	ldr	r3, [pc, #28]	@ (80067b8 <prvResetNextTaskUnblockTime+0x38>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	4a04      	ldr	r2, [pc, #16]	@ (80067bc <prvResetNextTaskUnblockTime+0x3c>)
 80067aa:	6013      	str	r3, [r2, #0]
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	20000f44 	.word	0x20000f44
 80067bc:	20000fac 	.word	0x20000fac

080067c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80067c6:	4b05      	ldr	r3, [pc, #20]	@ (80067dc <xTaskGetCurrentTaskHandle+0x1c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	607b      	str	r3, [r7, #4]

		return xReturn;
 80067cc:	687b      	ldr	r3, [r7, #4]
	}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	20000ab8 	.word	0x20000ab8

080067e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006814 <xTaskGetSchedulerState+0x34>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d102      	bne.n	80067f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067ee:	2301      	movs	r3, #1
 80067f0:	607b      	str	r3, [r7, #4]
 80067f2:	e008      	b.n	8006806 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067f4:	4b08      	ldr	r3, [pc, #32]	@ (8006818 <xTaskGetSchedulerState+0x38>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d102      	bne.n	8006802 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067fc:	2302      	movs	r3, #2
 80067fe:	607b      	str	r3, [r7, #4]
 8006800:	e001      	b.n	8006806 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006802:	2300      	movs	r3, #0
 8006804:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006806:	687b      	ldr	r3, [r7, #4]
	}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	20000f98 	.word	0x20000f98
 8006818:	20000fb4 	.word	0x20000fb4

0800681c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d051      	beq.n	80068d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006836:	4b2a      	ldr	r3, [pc, #168]	@ (80068e0 <xTaskPriorityInherit+0xc4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683c:	429a      	cmp	r2, r3
 800683e:	d241      	bcs.n	80068c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	db06      	blt.n	8006856 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006848:	4b25      	ldr	r3, [pc, #148]	@ (80068e0 <xTaskPriorityInherit+0xc4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6959      	ldr	r1, [r3, #20]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4a1f      	ldr	r2, [pc, #124]	@ (80068e4 <xTaskPriorityInherit+0xc8>)
 8006868:	4413      	add	r3, r2
 800686a:	4299      	cmp	r1, r3
 800686c:	d122      	bne.n	80068b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	3304      	adds	r3, #4
 8006872:	4618      	mov	r0, r3
 8006874:	f7fe fa0c 	bl	8004c90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006878:	4b19      	ldr	r3, [pc, #100]	@ (80068e0 <xTaskPriorityInherit+0xc4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006886:	4b18      	ldr	r3, [pc, #96]	@ (80068e8 <xTaskPriorityInherit+0xcc>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d903      	bls.n	8006896 <xTaskPriorityInherit+0x7a>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006892:	4a15      	ldr	r2, [pc, #84]	@ (80068e8 <xTaskPriorityInherit+0xcc>)
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4a10      	ldr	r2, [pc, #64]	@ (80068e4 <xTaskPriorityInherit+0xc8>)
 80068a4:	441a      	add	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f7fe f992 	bl	8004bd6 <vListInsertEnd>
 80068b2:	e004      	b.n	80068be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068b4:	4b0a      	ldr	r3, [pc, #40]	@ (80068e0 <xTaskPriorityInherit+0xc4>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80068be:	2301      	movs	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e008      	b.n	80068d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068c8:	4b05      	ldr	r3, [pc, #20]	@ (80068e0 <xTaskPriorityInherit+0xc4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d201      	bcs.n	80068d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80068d2:	2301      	movs	r3, #1
 80068d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068d6:	68fb      	ldr	r3, [r7, #12]
	}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	20000ab8 	.word	0x20000ab8
 80068e4:	20000abc 	.word	0x20000abc
 80068e8:	20000f94 	.word	0x20000f94

080068ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068f8:	2300      	movs	r3, #0
 80068fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d058      	beq.n	80069b4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006902:	4b2f      	ldr	r3, [pc, #188]	@ (80069c0 <xTaskPriorityDisinherit+0xd4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	429a      	cmp	r2, r3
 800690a:	d00b      	beq.n	8006924 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	60fb      	str	r3, [r7, #12]
}
 800691e:	bf00      	nop
 8006920:	bf00      	nop
 8006922:	e7fd      	b.n	8006920 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10b      	bne.n	8006944 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	60bb      	str	r3, [r7, #8]
}
 800693e:	bf00      	nop
 8006940:	bf00      	nop
 8006942:	e7fd      	b.n	8006940 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006948:	1e5a      	subs	r2, r3, #1
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006956:	429a      	cmp	r2, r3
 8006958:	d02c      	beq.n	80069b4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800695e:	2b00      	cmp	r3, #0
 8006960:	d128      	bne.n	80069b4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	3304      	adds	r3, #4
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe f992 	bl	8004c90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006978:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006984:	4b0f      	ldr	r3, [pc, #60]	@ (80069c4 <xTaskPriorityDisinherit+0xd8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d903      	bls.n	8006994 <xTaskPriorityDisinherit+0xa8>
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006990:	4a0c      	ldr	r2, [pc, #48]	@ (80069c4 <xTaskPriorityDisinherit+0xd8>)
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4a09      	ldr	r2, [pc, #36]	@ (80069c8 <xTaskPriorityDisinherit+0xdc>)
 80069a2:	441a      	add	r2, r3
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f7fe f913 	bl	8004bd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069b0:	2301      	movs	r3, #1
 80069b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069b4:	697b      	ldr	r3, [r7, #20]
	}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000ab8 	.word	0x20000ab8
 80069c4:	20000f94 	.word	0x20000f94
 80069c8:	20000abc 	.word	0x20000abc

080069cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80069da:	2301      	movs	r3, #1
 80069dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d06c      	beq.n	8006abe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10b      	bne.n	8006a04 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	60fb      	str	r3, [r7, #12]
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	e7fd      	b.n	8006a00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d902      	bls.n	8006a14 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	61fb      	str	r3, [r7, #28]
 8006a12:	e002      	b.n	8006a1a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a18:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d04c      	beq.n	8006abe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d147      	bne.n	8006abe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006a2e:	4b26      	ldr	r3, [pc, #152]	@ (8006ac8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d10b      	bne.n	8006a50 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	60bb      	str	r3, [r7, #8]
}
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	e7fd      	b.n	8006a4c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	69fa      	ldr	r2, [r7, #28]
 8006a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	db04      	blt.n	8006a6e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	6959      	ldr	r1, [r3, #20]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4a13      	ldr	r2, [pc, #76]	@ (8006acc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006a7e:	4413      	add	r3, r2
 8006a80:	4299      	cmp	r1, r3
 8006a82:	d11c      	bne.n	8006abe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	3304      	adds	r3, #4
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fe f901 	bl	8004c90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a92:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d903      	bls.n	8006aa2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4a07      	ldr	r2, [pc, #28]	@ (8006acc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006ab0:	441a      	add	r2, r3
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4610      	mov	r0, r2
 8006aba:	f7fe f88c 	bl	8004bd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006abe:	bf00      	nop
 8006ac0:	3720      	adds	r7, #32
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000ab8 	.word	0x20000ab8
 8006acc:	20000abc 	.word	0x20000abc
 8006ad0:	20000f94 	.word	0x20000f94

08006ad4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006ad8:	4b07      	ldr	r3, [pc, #28]	@ (8006af8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ae0:	4b05      	ldr	r3, [pc, #20]	@ (8006af8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ae6:	3201      	adds	r2, #1
 8006ae8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006aea:	4b03      	ldr	r3, [pc, #12]	@ (8006af8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006aec:	681b      	ldr	r3, [r3, #0]
	}
 8006aee:	4618      	mov	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	20000ab8 	.word	0x20000ab8

08006afc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b06:	4b21      	ldr	r3, [pc, #132]	@ (8006b8c <prvAddCurrentTaskToDelayedList+0x90>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b0c:	4b20      	ldr	r3, [pc, #128]	@ (8006b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe f8bc 	bl	8004c90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1e:	d10a      	bne.n	8006b36 <prvAddCurrentTaskToDelayedList+0x3a>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d007      	beq.n	8006b36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b26:	4b1a      	ldr	r3, [pc, #104]	@ (8006b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4819      	ldr	r0, [pc, #100]	@ (8006b94 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b30:	f7fe f851 	bl	8004bd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b34:	e026      	b.n	8006b84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b3e:	4b14      	ldr	r3, [pc, #80]	@ (8006b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d209      	bcs.n	8006b62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b4e:	4b12      	ldr	r3, [pc, #72]	@ (8006b98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4b0f      	ldr	r3, [pc, #60]	@ (8006b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3304      	adds	r3, #4
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	f7fe f85f 	bl	8004c1e <vListInsert>
}
 8006b60:	e010      	b.n	8006b84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b62:	4b0e      	ldr	r3, [pc, #56]	@ (8006b9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b0a      	ldr	r3, [pc, #40]	@ (8006b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fe f855 	bl	8004c1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b74:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d202      	bcs.n	8006b84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b7e:	4a08      	ldr	r2, [pc, #32]	@ (8006ba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	6013      	str	r3, [r2, #0]
}
 8006b84:	bf00      	nop
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20000f90 	.word	0x20000f90
 8006b90:	20000ab8 	.word	0x20000ab8
 8006b94:	20000f78 	.word	0x20000f78
 8006b98:	20000f48 	.word	0x20000f48
 8006b9c:	20000f44 	.word	0x20000f44
 8006ba0:	20000fac 	.word	0x20000fac

08006ba4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	@ 0x28
 8006ba8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bae:	f000 fb13 	bl	80071d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8006c28 <xTimerCreateTimerTask+0x84>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d021      	beq.n	8006bfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bc2:	1d3a      	adds	r2, r7, #4
 8006bc4:	f107 0108 	add.w	r1, r7, #8
 8006bc8:	f107 030c 	add.w	r3, r7, #12
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fd ffbb 	bl	8004b48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	9202      	str	r2, [sp, #8]
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	2302      	movs	r3, #2
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	2300      	movs	r3, #0
 8006be2:	460a      	mov	r2, r1
 8006be4:	4911      	ldr	r1, [pc, #68]	@ (8006c2c <xTimerCreateTimerTask+0x88>)
 8006be6:	4812      	ldr	r0, [pc, #72]	@ (8006c30 <xTimerCreateTimerTask+0x8c>)
 8006be8:	f7fe ff92 	bl	8005b10 <xTaskCreateStatic>
 8006bec:	4603      	mov	r3, r0
 8006bee:	4a11      	ldr	r2, [pc, #68]	@ (8006c34 <xTimerCreateTimerTask+0x90>)
 8006bf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bf2:	4b10      	ldr	r3, [pc, #64]	@ (8006c34 <xTimerCreateTimerTask+0x90>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10b      	bne.n	8006c1c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	613b      	str	r3, [r7, #16]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c1c:	697b      	ldr	r3, [r7, #20]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000fe8 	.word	0x20000fe8
 8006c2c:	0800c734 	.word	0x0800c734
 8006c30:	08006d71 	.word	0x08006d71
 8006c34:	20000fec 	.word	0x20000fec

08006c38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	@ 0x28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10b      	bne.n	8006c68 <xTimerGenericCommand+0x30>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	623b      	str	r3, [r7, #32]
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	e7fd      	b.n	8006c64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c68:	4b19      	ldr	r3, [pc, #100]	@ (8006cd0 <xTimerGenericCommand+0x98>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d02a      	beq.n	8006cc6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b05      	cmp	r3, #5
 8006c80:	dc18      	bgt.n	8006cb4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c82:	f7ff fdad 	bl	80067e0 <xTaskGetSchedulerState>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d109      	bne.n	8006ca0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c8c:	4b10      	ldr	r3, [pc, #64]	@ (8006cd0 <xTimerGenericCommand+0x98>)
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	f107 0110 	add.w	r1, r7, #16
 8006c94:	2300      	movs	r3, #0
 8006c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c98:	f7fe fa22 	bl	80050e0 <xQueueGenericSend>
 8006c9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c9e:	e012      	b.n	8006cc6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <xTimerGenericCommand+0x98>)
 8006ca2:	6818      	ldr	r0, [r3, #0]
 8006ca4:	f107 0110 	add.w	r1, r7, #16
 8006ca8:	2300      	movs	r3, #0
 8006caa:	2200      	movs	r2, #0
 8006cac:	f7fe fa18 	bl	80050e0 <xQueueGenericSend>
 8006cb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006cb2:	e008      	b.n	8006cc6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cb4:	4b06      	ldr	r3, [pc, #24]	@ (8006cd0 <xTimerGenericCommand+0x98>)
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	f107 0110 	add.w	r1, r7, #16
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	f7fe fb10 	bl	80052e4 <xQueueGenericSendFromISR>
 8006cc4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3728      	adds	r7, #40	@ 0x28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000fe8 	.word	0x20000fe8

08006cd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cde:	4b23      	ldr	r3, [pc, #140]	@ (8006d6c <prvProcessExpiredTimer+0x98>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fd ffcf 	bl	8004c90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d023      	beq.n	8006d48 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	699a      	ldr	r2, [r3, #24]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	18d1      	adds	r1, r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	6978      	ldr	r0, [r7, #20]
 8006d0e:	f000 f8d5 	bl	8006ebc <prvInsertTimerInActiveList>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d020      	beq.n	8006d5a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	2100      	movs	r1, #0
 8006d22:	6978      	ldr	r0, [r7, #20]
 8006d24:	f7ff ff88 	bl	8006c38 <xTimerGenericCommand>
 8006d28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d114      	bne.n	8006d5a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	60fb      	str	r3, [r7, #12]
}
 8006d42:	bf00      	nop
 8006d44:	bf00      	nop
 8006d46:	e7fd      	b.n	8006d44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d4e:	f023 0301 	bic.w	r3, r3, #1
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	6978      	ldr	r0, [r7, #20]
 8006d60:	4798      	blx	r3
}
 8006d62:	bf00      	nop
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000fe0 	.word	0x20000fe0

08006d70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d78:	f107 0308 	add.w	r3, r7, #8
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 f859 	bl	8006e34 <prvGetNextExpireTime>
 8006d82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	4619      	mov	r1, r3
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f805 	bl	8006d98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d8e:	f000 f8d7 	bl	8006f40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d92:	bf00      	nop
 8006d94:	e7f0      	b.n	8006d78 <prvTimerTask+0x8>
	...

08006d98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006da2:	f7ff f919 	bl	8005fd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006da6:	f107 0308 	add.w	r3, r7, #8
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 f866 	bl	8006e7c <prvSampleTimeNow>
 8006db0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d130      	bne.n	8006e1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <prvProcessTimerOrBlockTask+0x3c>
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d806      	bhi.n	8006dd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006dc6:	f7ff f915 	bl	8005ff4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006dca:	68f9      	ldr	r1, [r7, #12]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff ff81 	bl	8006cd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006dd2:	e024      	b.n	8006e1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006dda:	4b13      	ldr	r3, [pc, #76]	@ (8006e28 <prvProcessTimerOrBlockTask+0x90>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <prvProcessTimerOrBlockTask+0x50>
 8006de4:	2301      	movs	r3, #1
 8006de6:	e000      	b.n	8006dea <prvProcessTimerOrBlockTask+0x52>
 8006de8:	2300      	movs	r3, #0
 8006dea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006dec:	4b0f      	ldr	r3, [pc, #60]	@ (8006e2c <prvProcessTimerOrBlockTask+0x94>)
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	f7fe fe55 	bl	8005aa8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006dfe:	f7ff f8f9 	bl	8005ff4 <xTaskResumeAll>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10a      	bne.n	8006e1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e08:	4b09      	ldr	r3, [pc, #36]	@ (8006e30 <prvProcessTimerOrBlockTask+0x98>)
 8006e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	f3bf 8f6f 	isb	sy
}
 8006e18:	e001      	b.n	8006e1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e1a:	f7ff f8eb 	bl	8005ff4 <xTaskResumeAll>
}
 8006e1e:	bf00      	nop
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000fe4 	.word	0x20000fe4
 8006e2c:	20000fe8 	.word	0x20000fe8
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e78 <prvGetNextExpireTime+0x44>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <prvGetNextExpireTime+0x16>
 8006e46:	2201      	movs	r2, #1
 8006e48:	e000      	b.n	8006e4c <prvGetNextExpireTime+0x18>
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d105      	bne.n	8006e64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e58:	4b07      	ldr	r3, [pc, #28]	@ (8006e78 <prvGetNextExpireTime+0x44>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	e001      	b.n	8006e68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e68:	68fb      	ldr	r3, [r7, #12]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	20000fe0 	.word	0x20000fe0

08006e7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e84:	f7ff f954 	bl	8006130 <xTaskGetTickCount>
 8006e88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb8 <prvSampleTimeNow+0x3c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d205      	bcs.n	8006ea0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e94:	f000 f93a 	bl	800710c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e002      	b.n	8006ea6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ea6:	4a04      	ldr	r2, [pc, #16]	@ (8006eb8 <prvSampleTimeNow+0x3c>)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006eac:	68fb      	ldr	r3, [r7, #12]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000ff0 	.word	0x20000ff0

08006ebc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d812      	bhi.n	8006f08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	1ad2      	subs	r2, r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d302      	bcc.n	8006ef6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	e01b      	b.n	8006f2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ef6:	4b10      	ldr	r3, [pc, #64]	@ (8006f38 <prvInsertTimerInActiveList+0x7c>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3304      	adds	r3, #4
 8006efe:	4619      	mov	r1, r3
 8006f00:	4610      	mov	r0, r2
 8006f02:	f7fd fe8c 	bl	8004c1e <vListInsert>
 8006f06:	e012      	b.n	8006f2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d206      	bcs.n	8006f1e <prvInsertTimerInActiveList+0x62>
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d302      	bcc.n	8006f1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	e007      	b.n	8006f2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f1e:	4b07      	ldr	r3, [pc, #28]	@ (8006f3c <prvInsertTimerInActiveList+0x80>)
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3304      	adds	r3, #4
 8006f26:	4619      	mov	r1, r3
 8006f28:	4610      	mov	r0, r2
 8006f2a:	f7fd fe78 	bl	8004c1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f2e:	697b      	ldr	r3, [r7, #20]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20000fe4 	.word	0x20000fe4
 8006f3c:	20000fe0 	.word	0x20000fe0

08006f40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08e      	sub	sp, #56	@ 0x38
 8006f44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f46:	e0ce      	b.n	80070e6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	da19      	bge.n	8006f82 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f4e:	1d3b      	adds	r3, r7, #4
 8006f50:	3304      	adds	r3, #4
 8006f52:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10b      	bne.n	8006f72 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	61fb      	str	r3, [r7, #28]
}
 8006f6c:	bf00      	nop
 8006f6e:	bf00      	nop
 8006f70:	e7fd      	b.n	8006f6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f78:	6850      	ldr	r0, [r2, #4]
 8006f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f7c:	6892      	ldr	r2, [r2, #8]
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f2c0 80ae 	blt.w	80070e6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d004      	beq.n	8006fa0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fd fe78 	bl	8004c90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff ff6a 	bl	8006e7c <prvSampleTimeNow>
 8006fa8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b09      	cmp	r3, #9
 8006fae:	f200 8097 	bhi.w	80070e0 <prvProcessReceivedCommands+0x1a0>
 8006fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb8 <prvProcessReceivedCommands+0x78>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	08006fe1 	.word	0x08006fe1
 8006fbc:	08006fe1 	.word	0x08006fe1
 8006fc0:	08006fe1 	.word	0x08006fe1
 8006fc4:	08007057 	.word	0x08007057
 8006fc8:	0800706b 	.word	0x0800706b
 8006fcc:	080070b7 	.word	0x080070b7
 8006fd0:	08006fe1 	.word	0x08006fe1
 8006fd4:	08006fe1 	.word	0x08006fe1
 8006fd8:	08007057 	.word	0x08007057
 8006fdc:	0800706b 	.word	0x0800706b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	18d1      	adds	r1, r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007000:	f7ff ff5c 	bl	8006ebc <prvInsertTimerInActiveList>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d06c      	beq.n	80070e4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800700a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007010:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007014:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d061      	beq.n	80070e4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	441a      	add	r2, r3
 8007028:	2300      	movs	r3, #0
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	2300      	movs	r3, #0
 800702e:	2100      	movs	r1, #0
 8007030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007032:	f7ff fe01 	bl	8006c38 <xTimerGenericCommand>
 8007036:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d152      	bne.n	80070e4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	61bb      	str	r3, [r7, #24]
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	e7fd      	b.n	8007052 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	b2da      	uxtb	r2, r3
 8007062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007064:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007068:	e03d      	b.n	80070e6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800706a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007070:	f043 0301 	orr.w	r3, r3, #1
 8007074:	b2da      	uxtb	r2, r3
 8007076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007078:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007080:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	617b      	str	r3, [r7, #20]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a4:	699a      	ldr	r2, [r3, #24]
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	18d1      	adds	r1, r2, r3
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070b0:	f7ff ff04 	bl	8006ebc <prvInsertTimerInActiveList>
					break;
 80070b4:	e017      	b.n	80070e6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d103      	bne.n	80070cc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80070c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070c6:	f000 fbe7 	bl	8007898 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80070ca:	e00c      	b.n	80070e6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070d2:	f023 0301 	bic.w	r3, r3, #1
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80070de:	e002      	b.n	80070e6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80070e0:	bf00      	nop
 80070e2:	e000      	b.n	80070e6 <prvProcessReceivedCommands+0x1a6>
					break;
 80070e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070e6:	4b08      	ldr	r3, [pc, #32]	@ (8007108 <prvProcessReceivedCommands+0x1c8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	1d39      	adds	r1, r7, #4
 80070ec:	2200      	movs	r2, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe f996 	bl	8005420 <xQueueReceive>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f47f af26 	bne.w	8006f48 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80070fc:	bf00      	nop
 80070fe:	bf00      	nop
 8007100:	3730      	adds	r7, #48	@ 0x30
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000fe8 	.word	0x20000fe8

0800710c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007112:	e049      	b.n	80071a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007114:	4b2e      	ldr	r3, [pc, #184]	@ (80071d0 <prvSwitchTimerLists+0xc4>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800711e:	4b2c      	ldr	r3, [pc, #176]	@ (80071d0 <prvSwitchTimerLists+0xc4>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3304      	adds	r3, #4
 800712c:	4618      	mov	r0, r3
 800712e:	f7fd fdaf 	bl	8004c90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	d02f      	beq.n	80071a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	4413      	add	r3, r2
 8007150:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	429a      	cmp	r2, r3
 8007158:	d90e      	bls.n	8007178 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007166:	4b1a      	ldr	r3, [pc, #104]	@ (80071d0 <prvSwitchTimerLists+0xc4>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3304      	adds	r3, #4
 800716e:	4619      	mov	r1, r3
 8007170:	4610      	mov	r0, r2
 8007172:	f7fd fd54 	bl	8004c1e <vListInsert>
 8007176:	e017      	b.n	80071a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007178:	2300      	movs	r3, #0
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	2300      	movs	r3, #0
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	2100      	movs	r1, #0
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f7ff fd58 	bl	8006c38 <xTimerGenericCommand>
 8007188:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10b      	bne.n	80071a8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	603b      	str	r3, [r7, #0]
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	e7fd      	b.n	80071a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071a8:	4b09      	ldr	r3, [pc, #36]	@ (80071d0 <prvSwitchTimerLists+0xc4>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1b0      	bne.n	8007114 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071b2:	4b07      	ldr	r3, [pc, #28]	@ (80071d0 <prvSwitchTimerLists+0xc4>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071b8:	4b06      	ldr	r3, [pc, #24]	@ (80071d4 <prvSwitchTimerLists+0xc8>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a04      	ldr	r2, [pc, #16]	@ (80071d0 <prvSwitchTimerLists+0xc4>)
 80071be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80071c0:	4a04      	ldr	r2, [pc, #16]	@ (80071d4 <prvSwitchTimerLists+0xc8>)
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	6013      	str	r3, [r2, #0]
}
 80071c6:	bf00      	nop
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20000fe0 	.word	0x20000fe0
 80071d4:	20000fe4 	.word	0x20000fe4

080071d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071de:	f000 f96b 	bl	80074b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071e2:	4b15      	ldr	r3, [pc, #84]	@ (8007238 <prvCheckForValidListAndQueue+0x60>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d120      	bne.n	800722c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80071ea:	4814      	ldr	r0, [pc, #80]	@ (800723c <prvCheckForValidListAndQueue+0x64>)
 80071ec:	f7fd fcc6 	bl	8004b7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80071f0:	4813      	ldr	r0, [pc, #76]	@ (8007240 <prvCheckForValidListAndQueue+0x68>)
 80071f2:	f7fd fcc3 	bl	8004b7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80071f6:	4b13      	ldr	r3, [pc, #76]	@ (8007244 <prvCheckForValidListAndQueue+0x6c>)
 80071f8:	4a10      	ldr	r2, [pc, #64]	@ (800723c <prvCheckForValidListAndQueue+0x64>)
 80071fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80071fc:	4b12      	ldr	r3, [pc, #72]	@ (8007248 <prvCheckForValidListAndQueue+0x70>)
 80071fe:	4a10      	ldr	r2, [pc, #64]	@ (8007240 <prvCheckForValidListAndQueue+0x68>)
 8007200:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007202:	2300      	movs	r3, #0
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	4b11      	ldr	r3, [pc, #68]	@ (800724c <prvCheckForValidListAndQueue+0x74>)
 8007208:	4a11      	ldr	r2, [pc, #68]	@ (8007250 <prvCheckForValidListAndQueue+0x78>)
 800720a:	2110      	movs	r1, #16
 800720c:	200a      	movs	r0, #10
 800720e:	f7fd fdd3 	bl	8004db8 <xQueueGenericCreateStatic>
 8007212:	4603      	mov	r3, r0
 8007214:	4a08      	ldr	r2, [pc, #32]	@ (8007238 <prvCheckForValidListAndQueue+0x60>)
 8007216:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007218:	4b07      	ldr	r3, [pc, #28]	@ (8007238 <prvCheckForValidListAndQueue+0x60>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007220:	4b05      	ldr	r3, [pc, #20]	@ (8007238 <prvCheckForValidListAndQueue+0x60>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	490b      	ldr	r1, [pc, #44]	@ (8007254 <prvCheckForValidListAndQueue+0x7c>)
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe fc14 	bl	8005a54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800722c:	f000 f976 	bl	800751c <vPortExitCritical>
}
 8007230:	bf00      	nop
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20000fe8 	.word	0x20000fe8
 800723c:	20000fb8 	.word	0x20000fb8
 8007240:	20000fcc 	.word	0x20000fcc
 8007244:	20000fe0 	.word	0x20000fe0
 8007248:	20000fe4 	.word	0x20000fe4
 800724c:	20001094 	.word	0x20001094
 8007250:	20000ff4 	.word	0x20000ff4
 8007254:	0800c73c 	.word	0x0800c73c

08007258 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3b04      	subs	r3, #4
 8007268:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3b04      	subs	r3, #4
 8007276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f023 0201 	bic.w	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3b04      	subs	r3, #4
 8007286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007288:	4a0c      	ldr	r2, [pc, #48]	@ (80072bc <pxPortInitialiseStack+0x64>)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3b14      	subs	r3, #20
 8007292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3b04      	subs	r3, #4
 800729e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f06f 0202 	mvn.w	r2, #2
 80072a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3b20      	subs	r3, #32
 80072ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072ae:	68fb      	ldr	r3, [r7, #12]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	080072c1 	.word	0x080072c1

080072c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072ca:	4b13      	ldr	r3, [pc, #76]	@ (8007318 <prvTaskExitError+0x58>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d00b      	beq.n	80072ec <prvTaskExitError+0x2c>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	60fb      	str	r3, [r7, #12]
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <prvTaskExitError+0x28>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	60bb      	str	r3, [r7, #8]
}
 80072fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007300:	bf00      	nop
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0fc      	beq.n	8007302 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	2000000c 	.word	0x2000000c
 800731c:	00000000 	.word	0x00000000

08007320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007320:	4b07      	ldr	r3, [pc, #28]	@ (8007340 <pxCurrentTCBConst2>)
 8007322:	6819      	ldr	r1, [r3, #0]
 8007324:	6808      	ldr	r0, [r1, #0]
 8007326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732a:	f380 8809 	msr	PSP, r0
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f04f 0000 	mov.w	r0, #0
 8007336:	f380 8811 	msr	BASEPRI, r0
 800733a:	4770      	bx	lr
 800733c:	f3af 8000 	nop.w

08007340 <pxCurrentTCBConst2>:
 8007340:	20000ab8 	.word	0x20000ab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop

08007348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007348:	4808      	ldr	r0, [pc, #32]	@ (800736c <prvPortStartFirstTask+0x24>)
 800734a:	6800      	ldr	r0, [r0, #0]
 800734c:	6800      	ldr	r0, [r0, #0]
 800734e:	f380 8808 	msr	MSP, r0
 8007352:	f04f 0000 	mov.w	r0, #0
 8007356:	f380 8814 	msr	CONTROL, r0
 800735a:	b662      	cpsie	i
 800735c:	b661      	cpsie	f
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	df00      	svc	0
 8007368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800736a:	bf00      	nop
 800736c:	e000ed08 	.word	0xe000ed08

08007370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007376:	4b47      	ldr	r3, [pc, #284]	@ (8007494 <xPortStartScheduler+0x124>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a47      	ldr	r2, [pc, #284]	@ (8007498 <xPortStartScheduler+0x128>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d10b      	bne.n	8007398 <xPortStartScheduler+0x28>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	60fb      	str	r3, [r7, #12]
}
 8007392:	bf00      	nop
 8007394:	bf00      	nop
 8007396:	e7fd      	b.n	8007394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007398:	4b3e      	ldr	r3, [pc, #248]	@ (8007494 <xPortStartScheduler+0x124>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a3f      	ldr	r2, [pc, #252]	@ (800749c <xPortStartScheduler+0x12c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d10b      	bne.n	80073ba <xPortStartScheduler+0x4a>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	613b      	str	r3, [r7, #16]
}
 80073b4:	bf00      	nop
 80073b6:	bf00      	nop
 80073b8:	e7fd      	b.n	80073b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073ba:	4b39      	ldr	r3, [pc, #228]	@ (80074a0 <xPortStartScheduler+0x130>)
 80073bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	22ff      	movs	r2, #255	@ 0xff
 80073ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	4b31      	ldr	r3, [pc, #196]	@ (80074a4 <xPortStartScheduler+0x134>)
 80073e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073e2:	4b31      	ldr	r3, [pc, #196]	@ (80074a8 <xPortStartScheduler+0x138>)
 80073e4:	2207      	movs	r2, #7
 80073e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073e8:	e009      	b.n	80073fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80073ea:	4b2f      	ldr	r3, [pc, #188]	@ (80074a8 <xPortStartScheduler+0x138>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	4a2d      	ldr	r2, [pc, #180]	@ (80074a8 <xPortStartScheduler+0x138>)
 80073f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073f4:	78fb      	ldrb	r3, [r7, #3]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073fe:	78fb      	ldrb	r3, [r7, #3]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007406:	2b80      	cmp	r3, #128	@ 0x80
 8007408:	d0ef      	beq.n	80073ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800740a:	4b27      	ldr	r3, [pc, #156]	@ (80074a8 <xPortStartScheduler+0x138>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f1c3 0307 	rsb	r3, r3, #7
 8007412:	2b04      	cmp	r3, #4
 8007414:	d00b      	beq.n	800742e <xPortStartScheduler+0xbe>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	60bb      	str	r3, [r7, #8]
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	e7fd      	b.n	800742a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800742e:	4b1e      	ldr	r3, [pc, #120]	@ (80074a8 <xPortStartScheduler+0x138>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	021b      	lsls	r3, r3, #8
 8007434:	4a1c      	ldr	r2, [pc, #112]	@ (80074a8 <xPortStartScheduler+0x138>)
 8007436:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007438:	4b1b      	ldr	r3, [pc, #108]	@ (80074a8 <xPortStartScheduler+0x138>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007440:	4a19      	ldr	r2, [pc, #100]	@ (80074a8 <xPortStartScheduler+0x138>)
 8007442:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	b2da      	uxtb	r2, r3
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800744c:	4b17      	ldr	r3, [pc, #92]	@ (80074ac <xPortStartScheduler+0x13c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a16      	ldr	r2, [pc, #88]	@ (80074ac <xPortStartScheduler+0x13c>)
 8007452:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007456:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007458:	4b14      	ldr	r3, [pc, #80]	@ (80074ac <xPortStartScheduler+0x13c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a13      	ldr	r2, [pc, #76]	@ (80074ac <xPortStartScheduler+0x13c>)
 800745e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007462:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007464:	f000 f8da 	bl	800761c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007468:	4b11      	ldr	r3, [pc, #68]	@ (80074b0 <xPortStartScheduler+0x140>)
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800746e:	f000 f8f9 	bl	8007664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007472:	4b10      	ldr	r3, [pc, #64]	@ (80074b4 <xPortStartScheduler+0x144>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a0f      	ldr	r2, [pc, #60]	@ (80074b4 <xPortStartScheduler+0x144>)
 8007478:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800747c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800747e:	f7ff ff63 	bl	8007348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007482:	f7fe ff1f 	bl	80062c4 <vTaskSwitchContext>
	prvTaskExitError();
 8007486:	f7ff ff1b 	bl	80072c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	e000ed00 	.word	0xe000ed00
 8007498:	410fc271 	.word	0x410fc271
 800749c:	410fc270 	.word	0x410fc270
 80074a0:	e000e400 	.word	0xe000e400
 80074a4:	200010e4 	.word	0x200010e4
 80074a8:	200010e8 	.word	0x200010e8
 80074ac:	e000ed20 	.word	0xe000ed20
 80074b0:	2000000c 	.word	0x2000000c
 80074b4:	e000ef34 	.word	0xe000ef34

080074b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	607b      	str	r3, [r7, #4]
}
 80074d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074d2:	4b10      	ldr	r3, [pc, #64]	@ (8007514 <vPortEnterCritical+0x5c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3301      	adds	r3, #1
 80074d8:	4a0e      	ldr	r2, [pc, #56]	@ (8007514 <vPortEnterCritical+0x5c>)
 80074da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007514 <vPortEnterCritical+0x5c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d110      	bne.n	8007506 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007518 <vPortEnterCritical+0x60>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00b      	beq.n	8007506 <vPortEnterCritical+0x4e>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	603b      	str	r3, [r7, #0]
}
 8007500:	bf00      	nop
 8007502:	bf00      	nop
 8007504:	e7fd      	b.n	8007502 <vPortEnterCritical+0x4a>
	}
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	2000000c 	.word	0x2000000c
 8007518:	e000ed04 	.word	0xe000ed04

0800751c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007522:	4b12      	ldr	r3, [pc, #72]	@ (800756c <vPortExitCritical+0x50>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10b      	bne.n	8007542 <vPortExitCritical+0x26>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	607b      	str	r3, [r7, #4]
}
 800753c:	bf00      	nop
 800753e:	bf00      	nop
 8007540:	e7fd      	b.n	800753e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007542:	4b0a      	ldr	r3, [pc, #40]	@ (800756c <vPortExitCritical+0x50>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3b01      	subs	r3, #1
 8007548:	4a08      	ldr	r2, [pc, #32]	@ (800756c <vPortExitCritical+0x50>)
 800754a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800754c:	4b07      	ldr	r3, [pc, #28]	@ (800756c <vPortExitCritical+0x50>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d105      	bne.n	8007560 <vPortExitCritical+0x44>
 8007554:	2300      	movs	r3, #0
 8007556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	f383 8811 	msr	BASEPRI, r3
}
 800755e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	2000000c 	.word	0x2000000c

08007570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007570:	f3ef 8009 	mrs	r0, PSP
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	4b15      	ldr	r3, [pc, #84]	@ (80075d0 <pxCurrentTCBConst>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	f01e 0f10 	tst.w	lr, #16
 8007580:	bf08      	it	eq
 8007582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758a:	6010      	str	r0, [r2, #0]
 800758c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007590:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007594:	f380 8811 	msr	BASEPRI, r0
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f7fe fe90 	bl	80062c4 <vTaskSwitchContext>
 80075a4:	f04f 0000 	mov.w	r0, #0
 80075a8:	f380 8811 	msr	BASEPRI, r0
 80075ac:	bc09      	pop	{r0, r3}
 80075ae:	6819      	ldr	r1, [r3, #0]
 80075b0:	6808      	ldr	r0, [r1, #0]
 80075b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b6:	f01e 0f10 	tst.w	lr, #16
 80075ba:	bf08      	it	eq
 80075bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075c0:	f380 8809 	msr	PSP, r0
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	f3af 8000 	nop.w

080075d0 <pxCurrentTCBConst>:
 80075d0:	20000ab8 	.word	0x20000ab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop

080075d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	607b      	str	r3, [r7, #4]
}
 80075f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075f2:	f7fe fdad 	bl	8006150 <xTaskIncrementTick>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075fc:	4b06      	ldr	r3, [pc, #24]	@ (8007618 <xPortSysTickHandler+0x40>)
 80075fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	2300      	movs	r3, #0
 8007606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f383 8811 	msr	BASEPRI, r3
}
 800760e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007620:	4b0b      	ldr	r3, [pc, #44]	@ (8007650 <vPortSetupTimerInterrupt+0x34>)
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007626:	4b0b      	ldr	r3, [pc, #44]	@ (8007654 <vPortSetupTimerInterrupt+0x38>)
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800762c:	4b0a      	ldr	r3, [pc, #40]	@ (8007658 <vPortSetupTimerInterrupt+0x3c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a0a      	ldr	r2, [pc, #40]	@ (800765c <vPortSetupTimerInterrupt+0x40>)
 8007632:	fba2 2303 	umull	r2, r3, r2, r3
 8007636:	099b      	lsrs	r3, r3, #6
 8007638:	4a09      	ldr	r2, [pc, #36]	@ (8007660 <vPortSetupTimerInterrupt+0x44>)
 800763a:	3b01      	subs	r3, #1
 800763c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800763e:	4b04      	ldr	r3, [pc, #16]	@ (8007650 <vPortSetupTimerInterrupt+0x34>)
 8007640:	2207      	movs	r2, #7
 8007642:	601a      	str	r2, [r3, #0]
}
 8007644:	bf00      	nop
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	e000e010 	.word	0xe000e010
 8007654:	e000e018 	.word	0xe000e018
 8007658:	20000000 	.word	0x20000000
 800765c:	10624dd3 	.word	0x10624dd3
 8007660:	e000e014 	.word	0xe000e014

08007664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007664:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007674 <vPortEnableVFP+0x10>
 8007668:	6801      	ldr	r1, [r0, #0]
 800766a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800766e:	6001      	str	r1, [r0, #0]
 8007670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007672:	bf00      	nop
 8007674:	e000ed88 	.word	0xe000ed88

08007678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800767e:	f3ef 8305 	mrs	r3, IPSR
 8007682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b0f      	cmp	r3, #15
 8007688:	d915      	bls.n	80076b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800768a:	4a18      	ldr	r2, [pc, #96]	@ (80076ec <vPortValidateInterruptPriority+0x74>)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007694:	4b16      	ldr	r3, [pc, #88]	@ (80076f0 <vPortValidateInterruptPriority+0x78>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	7afa      	ldrb	r2, [r7, #11]
 800769a:	429a      	cmp	r2, r3
 800769c:	d20b      	bcs.n	80076b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	607b      	str	r3, [r7, #4]
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	e7fd      	b.n	80076b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076b6:	4b0f      	ldr	r3, [pc, #60]	@ (80076f4 <vPortValidateInterruptPriority+0x7c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80076be:	4b0e      	ldr	r3, [pc, #56]	@ (80076f8 <vPortValidateInterruptPriority+0x80>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d90b      	bls.n	80076de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	603b      	str	r3, [r7, #0]
}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	e7fd      	b.n	80076da <vPortValidateInterruptPriority+0x62>
	}
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	e000e3f0 	.word	0xe000e3f0
 80076f0:	200010e4 	.word	0x200010e4
 80076f4:	e000ed0c 	.word	0xe000ed0c
 80076f8:	200010e8 	.word	0x200010e8

080076fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	@ 0x28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007704:	2300      	movs	r3, #0
 8007706:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007708:	f7fe fc66 	bl	8005fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800770c:	4b5c      	ldr	r3, [pc, #368]	@ (8007880 <pvPortMalloc+0x184>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007714:	f000 f924 	bl	8007960 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007718:	4b5a      	ldr	r3, [pc, #360]	@ (8007884 <pvPortMalloc+0x188>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4013      	ands	r3, r2
 8007720:	2b00      	cmp	r3, #0
 8007722:	f040 8095 	bne.w	8007850 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01e      	beq.n	800776a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800772c:	2208      	movs	r2, #8
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4413      	add	r3, r2
 8007732:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	2b00      	cmp	r3, #0
 800773c:	d015      	beq.n	800776a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f023 0307 	bic.w	r3, r3, #7
 8007744:	3308      	adds	r3, #8
 8007746:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f003 0307 	and.w	r3, r3, #7
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <pvPortMalloc+0x6e>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	617b      	str	r3, [r7, #20]
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	e7fd      	b.n	8007766 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d06f      	beq.n	8007850 <pvPortMalloc+0x154>
 8007770:	4b45      	ldr	r3, [pc, #276]	@ (8007888 <pvPortMalloc+0x18c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	429a      	cmp	r2, r3
 8007778:	d86a      	bhi.n	8007850 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800777a:	4b44      	ldr	r3, [pc, #272]	@ (800788c <pvPortMalloc+0x190>)
 800777c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800777e:	4b43      	ldr	r3, [pc, #268]	@ (800788c <pvPortMalloc+0x190>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007784:	e004      	b.n	8007790 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	429a      	cmp	r2, r3
 8007798:	d903      	bls.n	80077a2 <pvPortMalloc+0xa6>
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f1      	bne.n	8007786 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077a2:	4b37      	ldr	r3, [pc, #220]	@ (8007880 <pvPortMalloc+0x184>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d051      	beq.n	8007850 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2208      	movs	r2, #8
 80077b2:	4413      	add	r3, r2
 80077b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	1ad2      	subs	r2, r2, r3
 80077c6:	2308      	movs	r3, #8
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d920      	bls.n	8007810 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4413      	add	r3, r2
 80077d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <pvPortMalloc+0xfc>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	613b      	str	r3, [r7, #16]
}
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	e7fd      	b.n	80077f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	1ad2      	subs	r2, r2, r3
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800780a:	69b8      	ldr	r0, [r7, #24]
 800780c:	f000 f90a 	bl	8007a24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007810:	4b1d      	ldr	r3, [pc, #116]	@ (8007888 <pvPortMalloc+0x18c>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	4a1b      	ldr	r2, [pc, #108]	@ (8007888 <pvPortMalloc+0x18c>)
 800781c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800781e:	4b1a      	ldr	r3, [pc, #104]	@ (8007888 <pvPortMalloc+0x18c>)
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	4b1b      	ldr	r3, [pc, #108]	@ (8007890 <pvPortMalloc+0x194>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d203      	bcs.n	8007832 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800782a:	4b17      	ldr	r3, [pc, #92]	@ (8007888 <pvPortMalloc+0x18c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a18      	ldr	r2, [pc, #96]	@ (8007890 <pvPortMalloc+0x194>)
 8007830:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	4b13      	ldr	r3, [pc, #76]	@ (8007884 <pvPortMalloc+0x188>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	431a      	orrs	r2, r3
 800783c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007846:	4b13      	ldr	r3, [pc, #76]	@ (8007894 <pvPortMalloc+0x198>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3301      	adds	r3, #1
 800784c:	4a11      	ldr	r2, [pc, #68]	@ (8007894 <pvPortMalloc+0x198>)
 800784e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007850:	f7fe fbd0 	bl	8005ff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <pvPortMalloc+0x17a>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	60fb      	str	r3, [r7, #12]
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	e7fd      	b.n	8007872 <pvPortMalloc+0x176>
	return pvReturn;
 8007876:	69fb      	ldr	r3, [r7, #28]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3728      	adds	r7, #40	@ 0x28
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	200060f4 	.word	0x200060f4
 8007884:	20006108 	.word	0x20006108
 8007888:	200060f8 	.word	0x200060f8
 800788c:	200060ec 	.word	0x200060ec
 8007890:	200060fc 	.word	0x200060fc
 8007894:	20006100 	.word	0x20006100

08007898 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d04f      	beq.n	800794a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078aa:	2308      	movs	r3, #8
 80078ac:	425b      	negs	r3, r3
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	4413      	add	r3, r2
 80078b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	4b25      	ldr	r3, [pc, #148]	@ (8007954 <vPortFree+0xbc>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4013      	ands	r3, r2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10b      	bne.n	80078de <vPortFree+0x46>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	60fb      	str	r3, [r7, #12]
}
 80078d8:	bf00      	nop
 80078da:	bf00      	nop
 80078dc:	e7fd      	b.n	80078da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <vPortFree+0x66>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	60bb      	str	r3, [r7, #8]
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	e7fd      	b.n	80078fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	4b14      	ldr	r3, [pc, #80]	@ (8007954 <vPortFree+0xbc>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4013      	ands	r3, r2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01e      	beq.n	800794a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d11a      	bne.n	800794a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	4b0e      	ldr	r3, [pc, #56]	@ (8007954 <vPortFree+0xbc>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	43db      	mvns	r3, r3
 800791e:	401a      	ands	r2, r3
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007924:	f7fe fb58 	bl	8005fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	4b0a      	ldr	r3, [pc, #40]	@ (8007958 <vPortFree+0xc0>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4413      	add	r3, r2
 8007932:	4a09      	ldr	r2, [pc, #36]	@ (8007958 <vPortFree+0xc0>)
 8007934:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007936:	6938      	ldr	r0, [r7, #16]
 8007938:	f000 f874 	bl	8007a24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800793c:	4b07      	ldr	r3, [pc, #28]	@ (800795c <vPortFree+0xc4>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3301      	adds	r3, #1
 8007942:	4a06      	ldr	r2, [pc, #24]	@ (800795c <vPortFree+0xc4>)
 8007944:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007946:	f7fe fb55 	bl	8005ff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800794a:	bf00      	nop
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20006108 	.word	0x20006108
 8007958:	200060f8 	.word	0x200060f8
 800795c:	20006104 	.word	0x20006104

08007960 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007966:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800796a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800796c:	4b27      	ldr	r3, [pc, #156]	@ (8007a0c <prvHeapInit+0xac>)
 800796e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00c      	beq.n	8007994 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3307      	adds	r3, #7
 800797e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0307 	bic.w	r3, r3, #7
 8007986:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	4a1f      	ldr	r2, [pc, #124]	@ (8007a0c <prvHeapInit+0xac>)
 8007990:	4413      	add	r3, r2
 8007992:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007998:	4a1d      	ldr	r2, [pc, #116]	@ (8007a10 <prvHeapInit+0xb0>)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800799e:	4b1c      	ldr	r3, [pc, #112]	@ (8007a10 <prvHeapInit+0xb0>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	4413      	add	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079ac:	2208      	movs	r2, #8
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0307 	bic.w	r3, r3, #7
 80079ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4a15      	ldr	r2, [pc, #84]	@ (8007a14 <prvHeapInit+0xb4>)
 80079c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079c2:	4b14      	ldr	r3, [pc, #80]	@ (8007a14 <prvHeapInit+0xb4>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2200      	movs	r2, #0
 80079c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079ca:	4b12      	ldr	r3, [pc, #72]	@ (8007a14 <prvHeapInit+0xb4>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	1ad2      	subs	r2, r2, r3
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007a14 <prvHeapInit+0xb4>)
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007a18 <prvHeapInit+0xb8>)
 80079ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4a09      	ldr	r2, [pc, #36]	@ (8007a1c <prvHeapInit+0xbc>)
 80079f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079f8:	4b09      	ldr	r3, [pc, #36]	@ (8007a20 <prvHeapInit+0xc0>)
 80079fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80079fe:	601a      	str	r2, [r3, #0]
}
 8007a00:	bf00      	nop
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	200010ec 	.word	0x200010ec
 8007a10:	200060ec 	.word	0x200060ec
 8007a14:	200060f4 	.word	0x200060f4
 8007a18:	200060fc 	.word	0x200060fc
 8007a1c:	200060f8 	.word	0x200060f8
 8007a20:	20006108 	.word	0x20006108

08007a24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a2c:	4b28      	ldr	r3, [pc, #160]	@ (8007ad0 <prvInsertBlockIntoFreeList+0xac>)
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	e002      	b.n	8007a38 <prvInsertBlockIntoFreeList+0x14>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d8f7      	bhi.n	8007a32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d108      	bne.n	8007a66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	441a      	add	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	441a      	add	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d118      	bne.n	8007aac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	4b15      	ldr	r3, [pc, #84]	@ (8007ad4 <prvInsertBlockIntoFreeList+0xb0>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d00d      	beq.n	8007aa2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	441a      	add	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	e008      	b.n	8007ab4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad4 <prvInsertBlockIntoFreeList+0xb0>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	e003      	b.n	8007ab4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d002      	beq.n	8007ac2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ac2:	bf00      	nop
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	200060ec 	.word	0x200060ec
 8007ad4:	200060f4 	.word	0x200060f4

08007ad8 <__cvt>:
 8007ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007adc:	ec57 6b10 	vmov	r6, r7, d0
 8007ae0:	2f00      	cmp	r7, #0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	bfbb      	ittet	lt
 8007aea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007aee:	461f      	movlt	r7, r3
 8007af0:	2300      	movge	r3, #0
 8007af2:	232d      	movlt	r3, #45	@ 0x2d
 8007af4:	700b      	strb	r3, [r1, #0]
 8007af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007af8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007afc:	4691      	mov	r9, r2
 8007afe:	f023 0820 	bic.w	r8, r3, #32
 8007b02:	bfbc      	itt	lt
 8007b04:	4632      	movlt	r2, r6
 8007b06:	4616      	movlt	r6, r2
 8007b08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b0c:	d005      	beq.n	8007b1a <__cvt+0x42>
 8007b0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007b12:	d100      	bne.n	8007b16 <__cvt+0x3e>
 8007b14:	3401      	adds	r4, #1
 8007b16:	2102      	movs	r1, #2
 8007b18:	e000      	b.n	8007b1c <__cvt+0x44>
 8007b1a:	2103      	movs	r1, #3
 8007b1c:	ab03      	add	r3, sp, #12
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	ab02      	add	r3, sp, #8
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	ec47 6b10 	vmov	d0, r6, r7
 8007b28:	4653      	mov	r3, sl
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	f001 f8e4 	bl	8008cf8 <_dtoa_r>
 8007b30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007b34:	4605      	mov	r5, r0
 8007b36:	d119      	bne.n	8007b6c <__cvt+0x94>
 8007b38:	f019 0f01 	tst.w	r9, #1
 8007b3c:	d00e      	beq.n	8007b5c <__cvt+0x84>
 8007b3e:	eb00 0904 	add.w	r9, r0, r4
 8007b42:	2200      	movs	r2, #0
 8007b44:	2300      	movs	r3, #0
 8007b46:	4630      	mov	r0, r6
 8007b48:	4639      	mov	r1, r7
 8007b4a:	f7f8 ffd5 	bl	8000af8 <__aeabi_dcmpeq>
 8007b4e:	b108      	cbz	r0, 8007b54 <__cvt+0x7c>
 8007b50:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b54:	2230      	movs	r2, #48	@ 0x30
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	454b      	cmp	r3, r9
 8007b5a:	d31e      	bcc.n	8007b9a <__cvt+0xc2>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b60:	1b5b      	subs	r3, r3, r5
 8007b62:	4628      	mov	r0, r5
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	b004      	add	sp, #16
 8007b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b70:	eb00 0904 	add.w	r9, r0, r4
 8007b74:	d1e5      	bne.n	8007b42 <__cvt+0x6a>
 8007b76:	7803      	ldrb	r3, [r0, #0]
 8007b78:	2b30      	cmp	r3, #48	@ 0x30
 8007b7a:	d10a      	bne.n	8007b92 <__cvt+0xba>
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2300      	movs	r3, #0
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 ffb8 	bl	8000af8 <__aeabi_dcmpeq>
 8007b88:	b918      	cbnz	r0, 8007b92 <__cvt+0xba>
 8007b8a:	f1c4 0401 	rsb	r4, r4, #1
 8007b8e:	f8ca 4000 	str.w	r4, [sl]
 8007b92:	f8da 3000 	ldr.w	r3, [sl]
 8007b96:	4499      	add	r9, r3
 8007b98:	e7d3      	b.n	8007b42 <__cvt+0x6a>
 8007b9a:	1c59      	adds	r1, r3, #1
 8007b9c:	9103      	str	r1, [sp, #12]
 8007b9e:	701a      	strb	r2, [r3, #0]
 8007ba0:	e7d9      	b.n	8007b56 <__cvt+0x7e>

08007ba2 <__exponent>:
 8007ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	bfba      	itte	lt
 8007ba8:	4249      	neglt	r1, r1
 8007baa:	232d      	movlt	r3, #45	@ 0x2d
 8007bac:	232b      	movge	r3, #43	@ 0x2b
 8007bae:	2909      	cmp	r1, #9
 8007bb0:	7002      	strb	r2, [r0, #0]
 8007bb2:	7043      	strb	r3, [r0, #1]
 8007bb4:	dd29      	ble.n	8007c0a <__exponent+0x68>
 8007bb6:	f10d 0307 	add.w	r3, sp, #7
 8007bba:	461d      	mov	r5, r3
 8007bbc:	270a      	movs	r7, #10
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	fbb1 f6f7 	udiv	r6, r1, r7
 8007bc4:	fb07 1416 	mls	r4, r7, r6, r1
 8007bc8:	3430      	adds	r4, #48	@ 0x30
 8007bca:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007bce:	460c      	mov	r4, r1
 8007bd0:	2c63      	cmp	r4, #99	@ 0x63
 8007bd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	dcf1      	bgt.n	8007bbe <__exponent+0x1c>
 8007bda:	3130      	adds	r1, #48	@ 0x30
 8007bdc:	1e94      	subs	r4, r2, #2
 8007bde:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007be2:	1c41      	adds	r1, r0, #1
 8007be4:	4623      	mov	r3, r4
 8007be6:	42ab      	cmp	r3, r5
 8007be8:	d30a      	bcc.n	8007c00 <__exponent+0x5e>
 8007bea:	f10d 0309 	add.w	r3, sp, #9
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	42ac      	cmp	r4, r5
 8007bf2:	bf88      	it	hi
 8007bf4:	2300      	movhi	r3, #0
 8007bf6:	3302      	adds	r3, #2
 8007bf8:	4403      	add	r3, r0
 8007bfa:	1a18      	subs	r0, r3, r0
 8007bfc:	b003      	add	sp, #12
 8007bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c00:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007c04:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007c08:	e7ed      	b.n	8007be6 <__exponent+0x44>
 8007c0a:	2330      	movs	r3, #48	@ 0x30
 8007c0c:	3130      	adds	r1, #48	@ 0x30
 8007c0e:	7083      	strb	r3, [r0, #2]
 8007c10:	70c1      	strb	r1, [r0, #3]
 8007c12:	1d03      	adds	r3, r0, #4
 8007c14:	e7f1      	b.n	8007bfa <__exponent+0x58>
	...

08007c18 <_printf_float>:
 8007c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	b08d      	sub	sp, #52	@ 0x34
 8007c1e:	460c      	mov	r4, r1
 8007c20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007c24:	4616      	mov	r6, r2
 8007c26:	461f      	mov	r7, r3
 8007c28:	4605      	mov	r5, r0
 8007c2a:	f000 fef3 	bl	8008a14 <_localeconv_r>
 8007c2e:	6803      	ldr	r3, [r0, #0]
 8007c30:	9304      	str	r3, [sp, #16]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7f8 fb34 	bl	80002a0 <strlen>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c40:	9005      	str	r0, [sp, #20]
 8007c42:	3307      	adds	r3, #7
 8007c44:	f023 0307 	bic.w	r3, r3, #7
 8007c48:	f103 0208 	add.w	r2, r3, #8
 8007c4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007c50:	f8d4 b000 	ldr.w	fp, [r4]
 8007c54:	f8c8 2000 	str.w	r2, [r8]
 8007c58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007c60:	9307      	str	r3, [sp, #28]
 8007c62:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c6e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ee0 <_printf_float+0x2c8>)
 8007c70:	f04f 32ff 	mov.w	r2, #4294967295
 8007c74:	f7f8 ff72 	bl	8000b5c <__aeabi_dcmpun>
 8007c78:	bb70      	cbnz	r0, 8007cd8 <_printf_float+0xc0>
 8007c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c7e:	4b98      	ldr	r3, [pc, #608]	@ (8007ee0 <_printf_float+0x2c8>)
 8007c80:	f04f 32ff 	mov.w	r2, #4294967295
 8007c84:	f7f8 ff4c 	bl	8000b20 <__aeabi_dcmple>
 8007c88:	bb30      	cbnz	r0, 8007cd8 <_printf_float+0xc0>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4640      	mov	r0, r8
 8007c90:	4649      	mov	r1, r9
 8007c92:	f7f8 ff3b 	bl	8000b0c <__aeabi_dcmplt>
 8007c96:	b110      	cbz	r0, 8007c9e <_printf_float+0x86>
 8007c98:	232d      	movs	r3, #45	@ 0x2d
 8007c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c9e:	4a91      	ldr	r2, [pc, #580]	@ (8007ee4 <_printf_float+0x2cc>)
 8007ca0:	4b91      	ldr	r3, [pc, #580]	@ (8007ee8 <_printf_float+0x2d0>)
 8007ca2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ca6:	bf8c      	ite	hi
 8007ca8:	4690      	movhi	r8, r2
 8007caa:	4698      	movls	r8, r3
 8007cac:	2303      	movs	r3, #3
 8007cae:	6123      	str	r3, [r4, #16]
 8007cb0:	f02b 0304 	bic.w	r3, fp, #4
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	f04f 0900 	mov.w	r9, #0
 8007cba:	9700      	str	r7, [sp, #0]
 8007cbc:	4633      	mov	r3, r6
 8007cbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f000 f9d2 	bl	800806c <_printf_common>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	f040 808d 	bne.w	8007de8 <_printf_float+0x1d0>
 8007cce:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd2:	b00d      	add	sp, #52	@ 0x34
 8007cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd8:	4642      	mov	r2, r8
 8007cda:	464b      	mov	r3, r9
 8007cdc:	4640      	mov	r0, r8
 8007cde:	4649      	mov	r1, r9
 8007ce0:	f7f8 ff3c 	bl	8000b5c <__aeabi_dcmpun>
 8007ce4:	b140      	cbz	r0, 8007cf8 <_printf_float+0xe0>
 8007ce6:	464b      	mov	r3, r9
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	bfbc      	itt	lt
 8007cec:	232d      	movlt	r3, #45	@ 0x2d
 8007cee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8007eec <_printf_float+0x2d4>)
 8007cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8007ef0 <_printf_float+0x2d8>)
 8007cf6:	e7d4      	b.n	8007ca2 <_printf_float+0x8a>
 8007cf8:	6863      	ldr	r3, [r4, #4]
 8007cfa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007cfe:	9206      	str	r2, [sp, #24]
 8007d00:	1c5a      	adds	r2, r3, #1
 8007d02:	d13b      	bne.n	8007d7c <_printf_float+0x164>
 8007d04:	2306      	movs	r3, #6
 8007d06:	6063      	str	r3, [r4, #4]
 8007d08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	6022      	str	r2, [r4, #0]
 8007d10:	9303      	str	r3, [sp, #12]
 8007d12:	ab0a      	add	r3, sp, #40	@ 0x28
 8007d14:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007d18:	ab09      	add	r3, sp, #36	@ 0x24
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	6861      	ldr	r1, [r4, #4]
 8007d1e:	ec49 8b10 	vmov	d0, r8, r9
 8007d22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007d26:	4628      	mov	r0, r5
 8007d28:	f7ff fed6 	bl	8007ad8 <__cvt>
 8007d2c:	9b06      	ldr	r3, [sp, #24]
 8007d2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d30:	2b47      	cmp	r3, #71	@ 0x47
 8007d32:	4680      	mov	r8, r0
 8007d34:	d129      	bne.n	8007d8a <_printf_float+0x172>
 8007d36:	1cc8      	adds	r0, r1, #3
 8007d38:	db02      	blt.n	8007d40 <_printf_float+0x128>
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	4299      	cmp	r1, r3
 8007d3e:	dd41      	ble.n	8007dc4 <_printf_float+0x1ac>
 8007d40:	f1aa 0a02 	sub.w	sl, sl, #2
 8007d44:	fa5f fa8a 	uxtb.w	sl, sl
 8007d48:	3901      	subs	r1, #1
 8007d4a:	4652      	mov	r2, sl
 8007d4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007d50:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d52:	f7ff ff26 	bl	8007ba2 <__exponent>
 8007d56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d58:	1813      	adds	r3, r2, r0
 8007d5a:	2a01      	cmp	r2, #1
 8007d5c:	4681      	mov	r9, r0
 8007d5e:	6123      	str	r3, [r4, #16]
 8007d60:	dc02      	bgt.n	8007d68 <_printf_float+0x150>
 8007d62:	6822      	ldr	r2, [r4, #0]
 8007d64:	07d2      	lsls	r2, r2, #31
 8007d66:	d501      	bpl.n	8007d6c <_printf_float+0x154>
 8007d68:	3301      	adds	r3, #1
 8007d6a:	6123      	str	r3, [r4, #16]
 8007d6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0a2      	beq.n	8007cba <_printf_float+0xa2>
 8007d74:	232d      	movs	r3, #45	@ 0x2d
 8007d76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d7a:	e79e      	b.n	8007cba <_printf_float+0xa2>
 8007d7c:	9a06      	ldr	r2, [sp, #24]
 8007d7e:	2a47      	cmp	r2, #71	@ 0x47
 8007d80:	d1c2      	bne.n	8007d08 <_printf_float+0xf0>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1c0      	bne.n	8007d08 <_printf_float+0xf0>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e7bd      	b.n	8007d06 <_printf_float+0xee>
 8007d8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d8e:	d9db      	bls.n	8007d48 <_printf_float+0x130>
 8007d90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007d94:	d118      	bne.n	8007dc8 <_printf_float+0x1b0>
 8007d96:	2900      	cmp	r1, #0
 8007d98:	6863      	ldr	r3, [r4, #4]
 8007d9a:	dd0b      	ble.n	8007db4 <_printf_float+0x19c>
 8007d9c:	6121      	str	r1, [r4, #16]
 8007d9e:	b913      	cbnz	r3, 8007da6 <_printf_float+0x18e>
 8007da0:	6822      	ldr	r2, [r4, #0]
 8007da2:	07d0      	lsls	r0, r2, #31
 8007da4:	d502      	bpl.n	8007dac <_printf_float+0x194>
 8007da6:	3301      	adds	r3, #1
 8007da8:	440b      	add	r3, r1
 8007daa:	6123      	str	r3, [r4, #16]
 8007dac:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007dae:	f04f 0900 	mov.w	r9, #0
 8007db2:	e7db      	b.n	8007d6c <_printf_float+0x154>
 8007db4:	b913      	cbnz	r3, 8007dbc <_printf_float+0x1a4>
 8007db6:	6822      	ldr	r2, [r4, #0]
 8007db8:	07d2      	lsls	r2, r2, #31
 8007dba:	d501      	bpl.n	8007dc0 <_printf_float+0x1a8>
 8007dbc:	3302      	adds	r3, #2
 8007dbe:	e7f4      	b.n	8007daa <_printf_float+0x192>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e7f2      	b.n	8007daa <_printf_float+0x192>
 8007dc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dca:	4299      	cmp	r1, r3
 8007dcc:	db05      	blt.n	8007dda <_printf_float+0x1c2>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	6121      	str	r1, [r4, #16]
 8007dd2:	07d8      	lsls	r0, r3, #31
 8007dd4:	d5ea      	bpl.n	8007dac <_printf_float+0x194>
 8007dd6:	1c4b      	adds	r3, r1, #1
 8007dd8:	e7e7      	b.n	8007daa <_printf_float+0x192>
 8007dda:	2900      	cmp	r1, #0
 8007ddc:	bfd4      	ite	le
 8007dde:	f1c1 0202 	rsble	r2, r1, #2
 8007de2:	2201      	movgt	r2, #1
 8007de4:	4413      	add	r3, r2
 8007de6:	e7e0      	b.n	8007daa <_printf_float+0x192>
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	055a      	lsls	r2, r3, #21
 8007dec:	d407      	bmi.n	8007dfe <_printf_float+0x1e6>
 8007dee:	6923      	ldr	r3, [r4, #16]
 8007df0:	4642      	mov	r2, r8
 8007df2:	4631      	mov	r1, r6
 8007df4:	4628      	mov	r0, r5
 8007df6:	47b8      	blx	r7
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d12b      	bne.n	8007e54 <_printf_float+0x23c>
 8007dfc:	e767      	b.n	8007cce <_printf_float+0xb6>
 8007dfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e02:	f240 80dd 	bls.w	8007fc0 <_printf_float+0x3a8>
 8007e06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f7f8 fe73 	bl	8000af8 <__aeabi_dcmpeq>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d033      	beq.n	8007e7e <_printf_float+0x266>
 8007e16:	4a37      	ldr	r2, [pc, #220]	@ (8007ef4 <_printf_float+0x2dc>)
 8007e18:	2301      	movs	r3, #1
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	f43f af54 	beq.w	8007cce <_printf_float+0xb6>
 8007e26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007e2a:	4543      	cmp	r3, r8
 8007e2c:	db02      	blt.n	8007e34 <_printf_float+0x21c>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	07d8      	lsls	r0, r3, #31
 8007e32:	d50f      	bpl.n	8007e54 <_printf_float+0x23c>
 8007e34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e38:	4631      	mov	r1, r6
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	47b8      	blx	r7
 8007e3e:	3001      	adds	r0, #1
 8007e40:	f43f af45 	beq.w	8007cce <_printf_float+0xb6>
 8007e44:	f04f 0900 	mov.w	r9, #0
 8007e48:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e4c:	f104 0a1a 	add.w	sl, r4, #26
 8007e50:	45c8      	cmp	r8, r9
 8007e52:	dc09      	bgt.n	8007e68 <_printf_float+0x250>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	079b      	lsls	r3, r3, #30
 8007e58:	f100 8103 	bmi.w	8008062 <_printf_float+0x44a>
 8007e5c:	68e0      	ldr	r0, [r4, #12]
 8007e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e60:	4298      	cmp	r0, r3
 8007e62:	bfb8      	it	lt
 8007e64:	4618      	movlt	r0, r3
 8007e66:	e734      	b.n	8007cd2 <_printf_float+0xba>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	4652      	mov	r2, sl
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	f43f af2b 	beq.w	8007cce <_printf_float+0xb6>
 8007e78:	f109 0901 	add.w	r9, r9, #1
 8007e7c:	e7e8      	b.n	8007e50 <_printf_float+0x238>
 8007e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	dc39      	bgt.n	8007ef8 <_printf_float+0x2e0>
 8007e84:	4a1b      	ldr	r2, [pc, #108]	@ (8007ef4 <_printf_float+0x2dc>)
 8007e86:	2301      	movs	r3, #1
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b8      	blx	r7
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f43f af1d 	beq.w	8007cce <_printf_float+0xb6>
 8007e94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007e98:	ea59 0303 	orrs.w	r3, r9, r3
 8007e9c:	d102      	bne.n	8007ea4 <_printf_float+0x28c>
 8007e9e:	6823      	ldr	r3, [r4, #0]
 8007ea0:	07d9      	lsls	r1, r3, #31
 8007ea2:	d5d7      	bpl.n	8007e54 <_printf_float+0x23c>
 8007ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47b8      	blx	r7
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f43f af0d 	beq.w	8007cce <_printf_float+0xb6>
 8007eb4:	f04f 0a00 	mov.w	sl, #0
 8007eb8:	f104 0b1a 	add.w	fp, r4, #26
 8007ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ebe:	425b      	negs	r3, r3
 8007ec0:	4553      	cmp	r3, sl
 8007ec2:	dc01      	bgt.n	8007ec8 <_printf_float+0x2b0>
 8007ec4:	464b      	mov	r3, r9
 8007ec6:	e793      	b.n	8007df0 <_printf_float+0x1d8>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	465a      	mov	r2, fp
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b8      	blx	r7
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	f43f aefb 	beq.w	8007cce <_printf_float+0xb6>
 8007ed8:	f10a 0a01 	add.w	sl, sl, #1
 8007edc:	e7ee      	b.n	8007ebc <_printf_float+0x2a4>
 8007ede:	bf00      	nop
 8007ee0:	7fefffff 	.word	0x7fefffff
 8007ee4:	0800c7fc 	.word	0x0800c7fc
 8007ee8:	0800c7f8 	.word	0x0800c7f8
 8007eec:	0800c804 	.word	0x0800c804
 8007ef0:	0800c800 	.word	0x0800c800
 8007ef4:	0800c808 	.word	0x0800c808
 8007ef8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007efa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007efe:	4553      	cmp	r3, sl
 8007f00:	bfa8      	it	ge
 8007f02:	4653      	movge	r3, sl
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	4699      	mov	r9, r3
 8007f08:	dc36      	bgt.n	8007f78 <_printf_float+0x360>
 8007f0a:	f04f 0b00 	mov.w	fp, #0
 8007f0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f12:	f104 021a 	add.w	r2, r4, #26
 8007f16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f18:	9306      	str	r3, [sp, #24]
 8007f1a:	eba3 0309 	sub.w	r3, r3, r9
 8007f1e:	455b      	cmp	r3, fp
 8007f20:	dc31      	bgt.n	8007f86 <_printf_float+0x36e>
 8007f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f24:	459a      	cmp	sl, r3
 8007f26:	dc3a      	bgt.n	8007f9e <_printf_float+0x386>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	07da      	lsls	r2, r3, #31
 8007f2c:	d437      	bmi.n	8007f9e <_printf_float+0x386>
 8007f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f30:	ebaa 0903 	sub.w	r9, sl, r3
 8007f34:	9b06      	ldr	r3, [sp, #24]
 8007f36:	ebaa 0303 	sub.w	r3, sl, r3
 8007f3a:	4599      	cmp	r9, r3
 8007f3c:	bfa8      	it	ge
 8007f3e:	4699      	movge	r9, r3
 8007f40:	f1b9 0f00 	cmp.w	r9, #0
 8007f44:	dc33      	bgt.n	8007fae <_printf_float+0x396>
 8007f46:	f04f 0800 	mov.w	r8, #0
 8007f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f4e:	f104 0b1a 	add.w	fp, r4, #26
 8007f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f54:	ebaa 0303 	sub.w	r3, sl, r3
 8007f58:	eba3 0309 	sub.w	r3, r3, r9
 8007f5c:	4543      	cmp	r3, r8
 8007f5e:	f77f af79 	ble.w	8007e54 <_printf_float+0x23c>
 8007f62:	2301      	movs	r3, #1
 8007f64:	465a      	mov	r2, fp
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b8      	blx	r7
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	f43f aeae 	beq.w	8007cce <_printf_float+0xb6>
 8007f72:	f108 0801 	add.w	r8, r8, #1
 8007f76:	e7ec      	b.n	8007f52 <_printf_float+0x33a>
 8007f78:	4642      	mov	r2, r8
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	47b8      	blx	r7
 8007f80:	3001      	adds	r0, #1
 8007f82:	d1c2      	bne.n	8007f0a <_printf_float+0x2f2>
 8007f84:	e6a3      	b.n	8007cce <_printf_float+0xb6>
 8007f86:	2301      	movs	r3, #1
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	9206      	str	r2, [sp, #24]
 8007f8e:	47b8      	blx	r7
 8007f90:	3001      	adds	r0, #1
 8007f92:	f43f ae9c 	beq.w	8007cce <_printf_float+0xb6>
 8007f96:	9a06      	ldr	r2, [sp, #24]
 8007f98:	f10b 0b01 	add.w	fp, fp, #1
 8007f9c:	e7bb      	b.n	8007f16 <_printf_float+0x2fe>
 8007f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fa2:	4631      	mov	r1, r6
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	47b8      	blx	r7
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d1c0      	bne.n	8007f2e <_printf_float+0x316>
 8007fac:	e68f      	b.n	8007cce <_printf_float+0xb6>
 8007fae:	9a06      	ldr	r2, [sp, #24]
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	4442      	add	r2, r8
 8007fb4:	4631      	mov	r1, r6
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	47b8      	blx	r7
 8007fba:	3001      	adds	r0, #1
 8007fbc:	d1c3      	bne.n	8007f46 <_printf_float+0x32e>
 8007fbe:	e686      	b.n	8007cce <_printf_float+0xb6>
 8007fc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fc4:	f1ba 0f01 	cmp.w	sl, #1
 8007fc8:	dc01      	bgt.n	8007fce <_printf_float+0x3b6>
 8007fca:	07db      	lsls	r3, r3, #31
 8007fcc:	d536      	bpl.n	800803c <_printf_float+0x424>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b8      	blx	r7
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f43f ae78 	beq.w	8007cce <_printf_float+0xb6>
 8007fde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	f43f ae70 	beq.w	8007cce <_printf_float+0xb6>
 8007fee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ffa:	f7f8 fd7d 	bl	8000af8 <__aeabi_dcmpeq>
 8007ffe:	b9c0      	cbnz	r0, 8008032 <_printf_float+0x41a>
 8008000:	4653      	mov	r3, sl
 8008002:	f108 0201 	add.w	r2, r8, #1
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	47b8      	blx	r7
 800800c:	3001      	adds	r0, #1
 800800e:	d10c      	bne.n	800802a <_printf_float+0x412>
 8008010:	e65d      	b.n	8007cce <_printf_float+0xb6>
 8008012:	2301      	movs	r3, #1
 8008014:	465a      	mov	r2, fp
 8008016:	4631      	mov	r1, r6
 8008018:	4628      	mov	r0, r5
 800801a:	47b8      	blx	r7
 800801c:	3001      	adds	r0, #1
 800801e:	f43f ae56 	beq.w	8007cce <_printf_float+0xb6>
 8008022:	f108 0801 	add.w	r8, r8, #1
 8008026:	45d0      	cmp	r8, sl
 8008028:	dbf3      	blt.n	8008012 <_printf_float+0x3fa>
 800802a:	464b      	mov	r3, r9
 800802c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008030:	e6df      	b.n	8007df2 <_printf_float+0x1da>
 8008032:	f04f 0800 	mov.w	r8, #0
 8008036:	f104 0b1a 	add.w	fp, r4, #26
 800803a:	e7f4      	b.n	8008026 <_printf_float+0x40e>
 800803c:	2301      	movs	r3, #1
 800803e:	4642      	mov	r2, r8
 8008040:	e7e1      	b.n	8008006 <_printf_float+0x3ee>
 8008042:	2301      	movs	r3, #1
 8008044:	464a      	mov	r2, r9
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	f43f ae3e 	beq.w	8007cce <_printf_float+0xb6>
 8008052:	f108 0801 	add.w	r8, r8, #1
 8008056:	68e3      	ldr	r3, [r4, #12]
 8008058:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800805a:	1a5b      	subs	r3, r3, r1
 800805c:	4543      	cmp	r3, r8
 800805e:	dcf0      	bgt.n	8008042 <_printf_float+0x42a>
 8008060:	e6fc      	b.n	8007e5c <_printf_float+0x244>
 8008062:	f04f 0800 	mov.w	r8, #0
 8008066:	f104 0919 	add.w	r9, r4, #25
 800806a:	e7f4      	b.n	8008056 <_printf_float+0x43e>

0800806c <_printf_common>:
 800806c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	4616      	mov	r6, r2
 8008072:	4698      	mov	r8, r3
 8008074:	688a      	ldr	r2, [r1, #8]
 8008076:	690b      	ldr	r3, [r1, #16]
 8008078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800807c:	4293      	cmp	r3, r2
 800807e:	bfb8      	it	lt
 8008080:	4613      	movlt	r3, r2
 8008082:	6033      	str	r3, [r6, #0]
 8008084:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008088:	4607      	mov	r7, r0
 800808a:	460c      	mov	r4, r1
 800808c:	b10a      	cbz	r2, 8008092 <_printf_common+0x26>
 800808e:	3301      	adds	r3, #1
 8008090:	6033      	str	r3, [r6, #0]
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	0699      	lsls	r1, r3, #26
 8008096:	bf42      	ittt	mi
 8008098:	6833      	ldrmi	r3, [r6, #0]
 800809a:	3302      	addmi	r3, #2
 800809c:	6033      	strmi	r3, [r6, #0]
 800809e:	6825      	ldr	r5, [r4, #0]
 80080a0:	f015 0506 	ands.w	r5, r5, #6
 80080a4:	d106      	bne.n	80080b4 <_printf_common+0x48>
 80080a6:	f104 0a19 	add.w	sl, r4, #25
 80080aa:	68e3      	ldr	r3, [r4, #12]
 80080ac:	6832      	ldr	r2, [r6, #0]
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	42ab      	cmp	r3, r5
 80080b2:	dc26      	bgt.n	8008102 <_printf_common+0x96>
 80080b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080b8:	6822      	ldr	r2, [r4, #0]
 80080ba:	3b00      	subs	r3, #0
 80080bc:	bf18      	it	ne
 80080be:	2301      	movne	r3, #1
 80080c0:	0692      	lsls	r2, r2, #26
 80080c2:	d42b      	bmi.n	800811c <_printf_common+0xb0>
 80080c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080c8:	4641      	mov	r1, r8
 80080ca:	4638      	mov	r0, r7
 80080cc:	47c8      	blx	r9
 80080ce:	3001      	adds	r0, #1
 80080d0:	d01e      	beq.n	8008110 <_printf_common+0xa4>
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	6922      	ldr	r2, [r4, #16]
 80080d6:	f003 0306 	and.w	r3, r3, #6
 80080da:	2b04      	cmp	r3, #4
 80080dc:	bf02      	ittt	eq
 80080de:	68e5      	ldreq	r5, [r4, #12]
 80080e0:	6833      	ldreq	r3, [r6, #0]
 80080e2:	1aed      	subeq	r5, r5, r3
 80080e4:	68a3      	ldr	r3, [r4, #8]
 80080e6:	bf0c      	ite	eq
 80080e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080ec:	2500      	movne	r5, #0
 80080ee:	4293      	cmp	r3, r2
 80080f0:	bfc4      	itt	gt
 80080f2:	1a9b      	subgt	r3, r3, r2
 80080f4:	18ed      	addgt	r5, r5, r3
 80080f6:	2600      	movs	r6, #0
 80080f8:	341a      	adds	r4, #26
 80080fa:	42b5      	cmp	r5, r6
 80080fc:	d11a      	bne.n	8008134 <_printf_common+0xc8>
 80080fe:	2000      	movs	r0, #0
 8008100:	e008      	b.n	8008114 <_printf_common+0xa8>
 8008102:	2301      	movs	r3, #1
 8008104:	4652      	mov	r2, sl
 8008106:	4641      	mov	r1, r8
 8008108:	4638      	mov	r0, r7
 800810a:	47c8      	blx	r9
 800810c:	3001      	adds	r0, #1
 800810e:	d103      	bne.n	8008118 <_printf_common+0xac>
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008118:	3501      	adds	r5, #1
 800811a:	e7c6      	b.n	80080aa <_printf_common+0x3e>
 800811c:	18e1      	adds	r1, r4, r3
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	2030      	movs	r0, #48	@ 0x30
 8008122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008126:	4422      	add	r2, r4
 8008128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800812c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008130:	3302      	adds	r3, #2
 8008132:	e7c7      	b.n	80080c4 <_printf_common+0x58>
 8008134:	2301      	movs	r3, #1
 8008136:	4622      	mov	r2, r4
 8008138:	4641      	mov	r1, r8
 800813a:	4638      	mov	r0, r7
 800813c:	47c8      	blx	r9
 800813e:	3001      	adds	r0, #1
 8008140:	d0e6      	beq.n	8008110 <_printf_common+0xa4>
 8008142:	3601      	adds	r6, #1
 8008144:	e7d9      	b.n	80080fa <_printf_common+0x8e>
	...

08008148 <_printf_i>:
 8008148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800814c:	7e0f      	ldrb	r7, [r1, #24]
 800814e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008150:	2f78      	cmp	r7, #120	@ 0x78
 8008152:	4691      	mov	r9, r2
 8008154:	4680      	mov	r8, r0
 8008156:	460c      	mov	r4, r1
 8008158:	469a      	mov	sl, r3
 800815a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800815e:	d807      	bhi.n	8008170 <_printf_i+0x28>
 8008160:	2f62      	cmp	r7, #98	@ 0x62
 8008162:	d80a      	bhi.n	800817a <_printf_i+0x32>
 8008164:	2f00      	cmp	r7, #0
 8008166:	f000 80d1 	beq.w	800830c <_printf_i+0x1c4>
 800816a:	2f58      	cmp	r7, #88	@ 0x58
 800816c:	f000 80b8 	beq.w	80082e0 <_printf_i+0x198>
 8008170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008178:	e03a      	b.n	80081f0 <_printf_i+0xa8>
 800817a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800817e:	2b15      	cmp	r3, #21
 8008180:	d8f6      	bhi.n	8008170 <_printf_i+0x28>
 8008182:	a101      	add	r1, pc, #4	@ (adr r1, 8008188 <_printf_i+0x40>)
 8008184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008188:	080081e1 	.word	0x080081e1
 800818c:	080081f5 	.word	0x080081f5
 8008190:	08008171 	.word	0x08008171
 8008194:	08008171 	.word	0x08008171
 8008198:	08008171 	.word	0x08008171
 800819c:	08008171 	.word	0x08008171
 80081a0:	080081f5 	.word	0x080081f5
 80081a4:	08008171 	.word	0x08008171
 80081a8:	08008171 	.word	0x08008171
 80081ac:	08008171 	.word	0x08008171
 80081b0:	08008171 	.word	0x08008171
 80081b4:	080082f3 	.word	0x080082f3
 80081b8:	0800821f 	.word	0x0800821f
 80081bc:	080082ad 	.word	0x080082ad
 80081c0:	08008171 	.word	0x08008171
 80081c4:	08008171 	.word	0x08008171
 80081c8:	08008315 	.word	0x08008315
 80081cc:	08008171 	.word	0x08008171
 80081d0:	0800821f 	.word	0x0800821f
 80081d4:	08008171 	.word	0x08008171
 80081d8:	08008171 	.word	0x08008171
 80081dc:	080082b5 	.word	0x080082b5
 80081e0:	6833      	ldr	r3, [r6, #0]
 80081e2:	1d1a      	adds	r2, r3, #4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6032      	str	r2, [r6, #0]
 80081e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081f0:	2301      	movs	r3, #1
 80081f2:	e09c      	b.n	800832e <_printf_i+0x1e6>
 80081f4:	6833      	ldr	r3, [r6, #0]
 80081f6:	6820      	ldr	r0, [r4, #0]
 80081f8:	1d19      	adds	r1, r3, #4
 80081fa:	6031      	str	r1, [r6, #0]
 80081fc:	0606      	lsls	r6, r0, #24
 80081fe:	d501      	bpl.n	8008204 <_printf_i+0xbc>
 8008200:	681d      	ldr	r5, [r3, #0]
 8008202:	e003      	b.n	800820c <_printf_i+0xc4>
 8008204:	0645      	lsls	r5, r0, #25
 8008206:	d5fb      	bpl.n	8008200 <_printf_i+0xb8>
 8008208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800820c:	2d00      	cmp	r5, #0
 800820e:	da03      	bge.n	8008218 <_printf_i+0xd0>
 8008210:	232d      	movs	r3, #45	@ 0x2d
 8008212:	426d      	negs	r5, r5
 8008214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008218:	4858      	ldr	r0, [pc, #352]	@ (800837c <_printf_i+0x234>)
 800821a:	230a      	movs	r3, #10
 800821c:	e011      	b.n	8008242 <_printf_i+0xfa>
 800821e:	6821      	ldr	r1, [r4, #0]
 8008220:	6833      	ldr	r3, [r6, #0]
 8008222:	0608      	lsls	r0, r1, #24
 8008224:	f853 5b04 	ldr.w	r5, [r3], #4
 8008228:	d402      	bmi.n	8008230 <_printf_i+0xe8>
 800822a:	0649      	lsls	r1, r1, #25
 800822c:	bf48      	it	mi
 800822e:	b2ad      	uxthmi	r5, r5
 8008230:	2f6f      	cmp	r7, #111	@ 0x6f
 8008232:	4852      	ldr	r0, [pc, #328]	@ (800837c <_printf_i+0x234>)
 8008234:	6033      	str	r3, [r6, #0]
 8008236:	bf14      	ite	ne
 8008238:	230a      	movne	r3, #10
 800823a:	2308      	moveq	r3, #8
 800823c:	2100      	movs	r1, #0
 800823e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008242:	6866      	ldr	r6, [r4, #4]
 8008244:	60a6      	str	r6, [r4, #8]
 8008246:	2e00      	cmp	r6, #0
 8008248:	db05      	blt.n	8008256 <_printf_i+0x10e>
 800824a:	6821      	ldr	r1, [r4, #0]
 800824c:	432e      	orrs	r6, r5
 800824e:	f021 0104 	bic.w	r1, r1, #4
 8008252:	6021      	str	r1, [r4, #0]
 8008254:	d04b      	beq.n	80082ee <_printf_i+0x1a6>
 8008256:	4616      	mov	r6, r2
 8008258:	fbb5 f1f3 	udiv	r1, r5, r3
 800825c:	fb03 5711 	mls	r7, r3, r1, r5
 8008260:	5dc7      	ldrb	r7, [r0, r7]
 8008262:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008266:	462f      	mov	r7, r5
 8008268:	42bb      	cmp	r3, r7
 800826a:	460d      	mov	r5, r1
 800826c:	d9f4      	bls.n	8008258 <_printf_i+0x110>
 800826e:	2b08      	cmp	r3, #8
 8008270:	d10b      	bne.n	800828a <_printf_i+0x142>
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	07df      	lsls	r7, r3, #31
 8008276:	d508      	bpl.n	800828a <_printf_i+0x142>
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	6861      	ldr	r1, [r4, #4]
 800827c:	4299      	cmp	r1, r3
 800827e:	bfde      	ittt	le
 8008280:	2330      	movle	r3, #48	@ 0x30
 8008282:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008286:	f106 36ff 	addle.w	r6, r6, #4294967295
 800828a:	1b92      	subs	r2, r2, r6
 800828c:	6122      	str	r2, [r4, #16]
 800828e:	f8cd a000 	str.w	sl, [sp]
 8008292:	464b      	mov	r3, r9
 8008294:	aa03      	add	r2, sp, #12
 8008296:	4621      	mov	r1, r4
 8008298:	4640      	mov	r0, r8
 800829a:	f7ff fee7 	bl	800806c <_printf_common>
 800829e:	3001      	adds	r0, #1
 80082a0:	d14a      	bne.n	8008338 <_printf_i+0x1f0>
 80082a2:	f04f 30ff 	mov.w	r0, #4294967295
 80082a6:	b004      	add	sp, #16
 80082a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	f043 0320 	orr.w	r3, r3, #32
 80082b2:	6023      	str	r3, [r4, #0]
 80082b4:	4832      	ldr	r0, [pc, #200]	@ (8008380 <_printf_i+0x238>)
 80082b6:	2778      	movs	r7, #120	@ 0x78
 80082b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	6831      	ldr	r1, [r6, #0]
 80082c0:	061f      	lsls	r7, r3, #24
 80082c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80082c6:	d402      	bmi.n	80082ce <_printf_i+0x186>
 80082c8:	065f      	lsls	r7, r3, #25
 80082ca:	bf48      	it	mi
 80082cc:	b2ad      	uxthmi	r5, r5
 80082ce:	6031      	str	r1, [r6, #0]
 80082d0:	07d9      	lsls	r1, r3, #31
 80082d2:	bf44      	itt	mi
 80082d4:	f043 0320 	orrmi.w	r3, r3, #32
 80082d8:	6023      	strmi	r3, [r4, #0]
 80082da:	b11d      	cbz	r5, 80082e4 <_printf_i+0x19c>
 80082dc:	2310      	movs	r3, #16
 80082de:	e7ad      	b.n	800823c <_printf_i+0xf4>
 80082e0:	4826      	ldr	r0, [pc, #152]	@ (800837c <_printf_i+0x234>)
 80082e2:	e7e9      	b.n	80082b8 <_printf_i+0x170>
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	f023 0320 	bic.w	r3, r3, #32
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	e7f6      	b.n	80082dc <_printf_i+0x194>
 80082ee:	4616      	mov	r6, r2
 80082f0:	e7bd      	b.n	800826e <_printf_i+0x126>
 80082f2:	6833      	ldr	r3, [r6, #0]
 80082f4:	6825      	ldr	r5, [r4, #0]
 80082f6:	6961      	ldr	r1, [r4, #20]
 80082f8:	1d18      	adds	r0, r3, #4
 80082fa:	6030      	str	r0, [r6, #0]
 80082fc:	062e      	lsls	r6, r5, #24
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	d501      	bpl.n	8008306 <_printf_i+0x1be>
 8008302:	6019      	str	r1, [r3, #0]
 8008304:	e002      	b.n	800830c <_printf_i+0x1c4>
 8008306:	0668      	lsls	r0, r5, #25
 8008308:	d5fb      	bpl.n	8008302 <_printf_i+0x1ba>
 800830a:	8019      	strh	r1, [r3, #0]
 800830c:	2300      	movs	r3, #0
 800830e:	6123      	str	r3, [r4, #16]
 8008310:	4616      	mov	r6, r2
 8008312:	e7bc      	b.n	800828e <_printf_i+0x146>
 8008314:	6833      	ldr	r3, [r6, #0]
 8008316:	1d1a      	adds	r2, r3, #4
 8008318:	6032      	str	r2, [r6, #0]
 800831a:	681e      	ldr	r6, [r3, #0]
 800831c:	6862      	ldr	r2, [r4, #4]
 800831e:	2100      	movs	r1, #0
 8008320:	4630      	mov	r0, r6
 8008322:	f7f7 ff6d 	bl	8000200 <memchr>
 8008326:	b108      	cbz	r0, 800832c <_printf_i+0x1e4>
 8008328:	1b80      	subs	r0, r0, r6
 800832a:	6060      	str	r0, [r4, #4]
 800832c:	6863      	ldr	r3, [r4, #4]
 800832e:	6123      	str	r3, [r4, #16]
 8008330:	2300      	movs	r3, #0
 8008332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008336:	e7aa      	b.n	800828e <_printf_i+0x146>
 8008338:	6923      	ldr	r3, [r4, #16]
 800833a:	4632      	mov	r2, r6
 800833c:	4649      	mov	r1, r9
 800833e:	4640      	mov	r0, r8
 8008340:	47d0      	blx	sl
 8008342:	3001      	adds	r0, #1
 8008344:	d0ad      	beq.n	80082a2 <_printf_i+0x15a>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	079b      	lsls	r3, r3, #30
 800834a:	d413      	bmi.n	8008374 <_printf_i+0x22c>
 800834c:	68e0      	ldr	r0, [r4, #12]
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	4298      	cmp	r0, r3
 8008352:	bfb8      	it	lt
 8008354:	4618      	movlt	r0, r3
 8008356:	e7a6      	b.n	80082a6 <_printf_i+0x15e>
 8008358:	2301      	movs	r3, #1
 800835a:	4632      	mov	r2, r6
 800835c:	4649      	mov	r1, r9
 800835e:	4640      	mov	r0, r8
 8008360:	47d0      	blx	sl
 8008362:	3001      	adds	r0, #1
 8008364:	d09d      	beq.n	80082a2 <_printf_i+0x15a>
 8008366:	3501      	adds	r5, #1
 8008368:	68e3      	ldr	r3, [r4, #12]
 800836a:	9903      	ldr	r1, [sp, #12]
 800836c:	1a5b      	subs	r3, r3, r1
 800836e:	42ab      	cmp	r3, r5
 8008370:	dcf2      	bgt.n	8008358 <_printf_i+0x210>
 8008372:	e7eb      	b.n	800834c <_printf_i+0x204>
 8008374:	2500      	movs	r5, #0
 8008376:	f104 0619 	add.w	r6, r4, #25
 800837a:	e7f5      	b.n	8008368 <_printf_i+0x220>
 800837c:	0800c80a 	.word	0x0800c80a
 8008380:	0800c81b 	.word	0x0800c81b

08008384 <_scanf_float>:
 8008384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	b087      	sub	sp, #28
 800838a:	4691      	mov	r9, r2
 800838c:	9303      	str	r3, [sp, #12]
 800838e:	688b      	ldr	r3, [r1, #8]
 8008390:	1e5a      	subs	r2, r3, #1
 8008392:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008396:	bf81      	itttt	hi
 8008398:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800839c:	eb03 0b05 	addhi.w	fp, r3, r5
 80083a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80083a4:	608b      	strhi	r3, [r1, #8]
 80083a6:	680b      	ldr	r3, [r1, #0]
 80083a8:	460a      	mov	r2, r1
 80083aa:	f04f 0500 	mov.w	r5, #0
 80083ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80083b2:	f842 3b1c 	str.w	r3, [r2], #28
 80083b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80083ba:	4680      	mov	r8, r0
 80083bc:	460c      	mov	r4, r1
 80083be:	bf98      	it	ls
 80083c0:	f04f 0b00 	movls.w	fp, #0
 80083c4:	9201      	str	r2, [sp, #4]
 80083c6:	4616      	mov	r6, r2
 80083c8:	46aa      	mov	sl, r5
 80083ca:	462f      	mov	r7, r5
 80083cc:	9502      	str	r5, [sp, #8]
 80083ce:	68a2      	ldr	r2, [r4, #8]
 80083d0:	b15a      	cbz	r2, 80083ea <_scanf_float+0x66>
 80083d2:	f8d9 3000 	ldr.w	r3, [r9]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	2b4e      	cmp	r3, #78	@ 0x4e
 80083da:	d863      	bhi.n	80084a4 <_scanf_float+0x120>
 80083dc:	2b40      	cmp	r3, #64	@ 0x40
 80083de:	d83b      	bhi.n	8008458 <_scanf_float+0xd4>
 80083e0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80083e4:	b2c8      	uxtb	r0, r1
 80083e6:	280e      	cmp	r0, #14
 80083e8:	d939      	bls.n	800845e <_scanf_float+0xda>
 80083ea:	b11f      	cbz	r7, 80083f4 <_scanf_float+0x70>
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083f2:	6023      	str	r3, [r4, #0]
 80083f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083f8:	f1ba 0f01 	cmp.w	sl, #1
 80083fc:	f200 8114 	bhi.w	8008628 <_scanf_float+0x2a4>
 8008400:	9b01      	ldr	r3, [sp, #4]
 8008402:	429e      	cmp	r6, r3
 8008404:	f200 8105 	bhi.w	8008612 <_scanf_float+0x28e>
 8008408:	2001      	movs	r0, #1
 800840a:	b007      	add	sp, #28
 800840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008410:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008414:	2a0d      	cmp	r2, #13
 8008416:	d8e8      	bhi.n	80083ea <_scanf_float+0x66>
 8008418:	a101      	add	r1, pc, #4	@ (adr r1, 8008420 <_scanf_float+0x9c>)
 800841a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800841e:	bf00      	nop
 8008420:	08008569 	.word	0x08008569
 8008424:	080083eb 	.word	0x080083eb
 8008428:	080083eb 	.word	0x080083eb
 800842c:	080083eb 	.word	0x080083eb
 8008430:	080085c5 	.word	0x080085c5
 8008434:	0800859f 	.word	0x0800859f
 8008438:	080083eb 	.word	0x080083eb
 800843c:	080083eb 	.word	0x080083eb
 8008440:	08008577 	.word	0x08008577
 8008444:	080083eb 	.word	0x080083eb
 8008448:	080083eb 	.word	0x080083eb
 800844c:	080083eb 	.word	0x080083eb
 8008450:	080083eb 	.word	0x080083eb
 8008454:	08008533 	.word	0x08008533
 8008458:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800845c:	e7da      	b.n	8008414 <_scanf_float+0x90>
 800845e:	290e      	cmp	r1, #14
 8008460:	d8c3      	bhi.n	80083ea <_scanf_float+0x66>
 8008462:	a001      	add	r0, pc, #4	@ (adr r0, 8008468 <_scanf_float+0xe4>)
 8008464:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008468:	08008523 	.word	0x08008523
 800846c:	080083eb 	.word	0x080083eb
 8008470:	08008523 	.word	0x08008523
 8008474:	080085b3 	.word	0x080085b3
 8008478:	080083eb 	.word	0x080083eb
 800847c:	080084c5 	.word	0x080084c5
 8008480:	08008509 	.word	0x08008509
 8008484:	08008509 	.word	0x08008509
 8008488:	08008509 	.word	0x08008509
 800848c:	08008509 	.word	0x08008509
 8008490:	08008509 	.word	0x08008509
 8008494:	08008509 	.word	0x08008509
 8008498:	08008509 	.word	0x08008509
 800849c:	08008509 	.word	0x08008509
 80084a0:	08008509 	.word	0x08008509
 80084a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80084a6:	d809      	bhi.n	80084bc <_scanf_float+0x138>
 80084a8:	2b60      	cmp	r3, #96	@ 0x60
 80084aa:	d8b1      	bhi.n	8008410 <_scanf_float+0x8c>
 80084ac:	2b54      	cmp	r3, #84	@ 0x54
 80084ae:	d07b      	beq.n	80085a8 <_scanf_float+0x224>
 80084b0:	2b59      	cmp	r3, #89	@ 0x59
 80084b2:	d19a      	bne.n	80083ea <_scanf_float+0x66>
 80084b4:	2d07      	cmp	r5, #7
 80084b6:	d198      	bne.n	80083ea <_scanf_float+0x66>
 80084b8:	2508      	movs	r5, #8
 80084ba:	e02f      	b.n	800851c <_scanf_float+0x198>
 80084bc:	2b74      	cmp	r3, #116	@ 0x74
 80084be:	d073      	beq.n	80085a8 <_scanf_float+0x224>
 80084c0:	2b79      	cmp	r3, #121	@ 0x79
 80084c2:	e7f6      	b.n	80084b2 <_scanf_float+0x12e>
 80084c4:	6821      	ldr	r1, [r4, #0]
 80084c6:	05c8      	lsls	r0, r1, #23
 80084c8:	d51e      	bpl.n	8008508 <_scanf_float+0x184>
 80084ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80084ce:	6021      	str	r1, [r4, #0]
 80084d0:	3701      	adds	r7, #1
 80084d2:	f1bb 0f00 	cmp.w	fp, #0
 80084d6:	d003      	beq.n	80084e0 <_scanf_float+0x15c>
 80084d8:	3201      	adds	r2, #1
 80084da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084de:	60a2      	str	r2, [r4, #8]
 80084e0:	68a3      	ldr	r3, [r4, #8]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	60a3      	str	r3, [r4, #8]
 80084e6:	6923      	ldr	r3, [r4, #16]
 80084e8:	3301      	adds	r3, #1
 80084ea:	6123      	str	r3, [r4, #16]
 80084ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f8c9 3004 	str.w	r3, [r9, #4]
 80084f8:	f340 8082 	ble.w	8008600 <_scanf_float+0x27c>
 80084fc:	f8d9 3000 	ldr.w	r3, [r9]
 8008500:	3301      	adds	r3, #1
 8008502:	f8c9 3000 	str.w	r3, [r9]
 8008506:	e762      	b.n	80083ce <_scanf_float+0x4a>
 8008508:	eb1a 0105 	adds.w	r1, sl, r5
 800850c:	f47f af6d 	bne.w	80083ea <_scanf_float+0x66>
 8008510:	6822      	ldr	r2, [r4, #0]
 8008512:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008516:	6022      	str	r2, [r4, #0]
 8008518:	460d      	mov	r5, r1
 800851a:	468a      	mov	sl, r1
 800851c:	f806 3b01 	strb.w	r3, [r6], #1
 8008520:	e7de      	b.n	80084e0 <_scanf_float+0x15c>
 8008522:	6822      	ldr	r2, [r4, #0]
 8008524:	0610      	lsls	r0, r2, #24
 8008526:	f57f af60 	bpl.w	80083ea <_scanf_float+0x66>
 800852a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800852e:	6022      	str	r2, [r4, #0]
 8008530:	e7f4      	b.n	800851c <_scanf_float+0x198>
 8008532:	f1ba 0f00 	cmp.w	sl, #0
 8008536:	d10c      	bne.n	8008552 <_scanf_float+0x1ce>
 8008538:	b977      	cbnz	r7, 8008558 <_scanf_float+0x1d4>
 800853a:	6822      	ldr	r2, [r4, #0]
 800853c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008540:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008544:	d108      	bne.n	8008558 <_scanf_float+0x1d4>
 8008546:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800854a:	6022      	str	r2, [r4, #0]
 800854c:	f04f 0a01 	mov.w	sl, #1
 8008550:	e7e4      	b.n	800851c <_scanf_float+0x198>
 8008552:	f1ba 0f02 	cmp.w	sl, #2
 8008556:	d050      	beq.n	80085fa <_scanf_float+0x276>
 8008558:	2d01      	cmp	r5, #1
 800855a:	d002      	beq.n	8008562 <_scanf_float+0x1de>
 800855c:	2d04      	cmp	r5, #4
 800855e:	f47f af44 	bne.w	80083ea <_scanf_float+0x66>
 8008562:	3501      	adds	r5, #1
 8008564:	b2ed      	uxtb	r5, r5
 8008566:	e7d9      	b.n	800851c <_scanf_float+0x198>
 8008568:	f1ba 0f01 	cmp.w	sl, #1
 800856c:	f47f af3d 	bne.w	80083ea <_scanf_float+0x66>
 8008570:	f04f 0a02 	mov.w	sl, #2
 8008574:	e7d2      	b.n	800851c <_scanf_float+0x198>
 8008576:	b975      	cbnz	r5, 8008596 <_scanf_float+0x212>
 8008578:	2f00      	cmp	r7, #0
 800857a:	f47f af37 	bne.w	80083ec <_scanf_float+0x68>
 800857e:	6822      	ldr	r2, [r4, #0]
 8008580:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008584:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008588:	f040 8103 	bne.w	8008792 <_scanf_float+0x40e>
 800858c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008590:	6022      	str	r2, [r4, #0]
 8008592:	2501      	movs	r5, #1
 8008594:	e7c2      	b.n	800851c <_scanf_float+0x198>
 8008596:	2d03      	cmp	r5, #3
 8008598:	d0e3      	beq.n	8008562 <_scanf_float+0x1de>
 800859a:	2d05      	cmp	r5, #5
 800859c:	e7df      	b.n	800855e <_scanf_float+0x1da>
 800859e:	2d02      	cmp	r5, #2
 80085a0:	f47f af23 	bne.w	80083ea <_scanf_float+0x66>
 80085a4:	2503      	movs	r5, #3
 80085a6:	e7b9      	b.n	800851c <_scanf_float+0x198>
 80085a8:	2d06      	cmp	r5, #6
 80085aa:	f47f af1e 	bne.w	80083ea <_scanf_float+0x66>
 80085ae:	2507      	movs	r5, #7
 80085b0:	e7b4      	b.n	800851c <_scanf_float+0x198>
 80085b2:	6822      	ldr	r2, [r4, #0]
 80085b4:	0591      	lsls	r1, r2, #22
 80085b6:	f57f af18 	bpl.w	80083ea <_scanf_float+0x66>
 80085ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80085be:	6022      	str	r2, [r4, #0]
 80085c0:	9702      	str	r7, [sp, #8]
 80085c2:	e7ab      	b.n	800851c <_scanf_float+0x198>
 80085c4:	6822      	ldr	r2, [r4, #0]
 80085c6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80085ca:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80085ce:	d005      	beq.n	80085dc <_scanf_float+0x258>
 80085d0:	0550      	lsls	r0, r2, #21
 80085d2:	f57f af0a 	bpl.w	80083ea <_scanf_float+0x66>
 80085d6:	2f00      	cmp	r7, #0
 80085d8:	f000 80db 	beq.w	8008792 <_scanf_float+0x40e>
 80085dc:	0591      	lsls	r1, r2, #22
 80085de:	bf58      	it	pl
 80085e0:	9902      	ldrpl	r1, [sp, #8]
 80085e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80085e6:	bf58      	it	pl
 80085e8:	1a79      	subpl	r1, r7, r1
 80085ea:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80085ee:	bf58      	it	pl
 80085f0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80085f4:	6022      	str	r2, [r4, #0]
 80085f6:	2700      	movs	r7, #0
 80085f8:	e790      	b.n	800851c <_scanf_float+0x198>
 80085fa:	f04f 0a03 	mov.w	sl, #3
 80085fe:	e78d      	b.n	800851c <_scanf_float+0x198>
 8008600:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008604:	4649      	mov	r1, r9
 8008606:	4640      	mov	r0, r8
 8008608:	4798      	blx	r3
 800860a:	2800      	cmp	r0, #0
 800860c:	f43f aedf 	beq.w	80083ce <_scanf_float+0x4a>
 8008610:	e6eb      	b.n	80083ea <_scanf_float+0x66>
 8008612:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008616:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800861a:	464a      	mov	r2, r9
 800861c:	4640      	mov	r0, r8
 800861e:	4798      	blx	r3
 8008620:	6923      	ldr	r3, [r4, #16]
 8008622:	3b01      	subs	r3, #1
 8008624:	6123      	str	r3, [r4, #16]
 8008626:	e6eb      	b.n	8008400 <_scanf_float+0x7c>
 8008628:	1e6b      	subs	r3, r5, #1
 800862a:	2b06      	cmp	r3, #6
 800862c:	d824      	bhi.n	8008678 <_scanf_float+0x2f4>
 800862e:	2d02      	cmp	r5, #2
 8008630:	d836      	bhi.n	80086a0 <_scanf_float+0x31c>
 8008632:	9b01      	ldr	r3, [sp, #4]
 8008634:	429e      	cmp	r6, r3
 8008636:	f67f aee7 	bls.w	8008408 <_scanf_float+0x84>
 800863a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800863e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008642:	464a      	mov	r2, r9
 8008644:	4640      	mov	r0, r8
 8008646:	4798      	blx	r3
 8008648:	6923      	ldr	r3, [r4, #16]
 800864a:	3b01      	subs	r3, #1
 800864c:	6123      	str	r3, [r4, #16]
 800864e:	e7f0      	b.n	8008632 <_scanf_float+0x2ae>
 8008650:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008654:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008658:	464a      	mov	r2, r9
 800865a:	4640      	mov	r0, r8
 800865c:	4798      	blx	r3
 800865e:	6923      	ldr	r3, [r4, #16]
 8008660:	3b01      	subs	r3, #1
 8008662:	6123      	str	r3, [r4, #16]
 8008664:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008668:	fa5f fa8a 	uxtb.w	sl, sl
 800866c:	f1ba 0f02 	cmp.w	sl, #2
 8008670:	d1ee      	bne.n	8008650 <_scanf_float+0x2cc>
 8008672:	3d03      	subs	r5, #3
 8008674:	b2ed      	uxtb	r5, r5
 8008676:	1b76      	subs	r6, r6, r5
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	05da      	lsls	r2, r3, #23
 800867c:	d530      	bpl.n	80086e0 <_scanf_float+0x35c>
 800867e:	055b      	lsls	r3, r3, #21
 8008680:	d511      	bpl.n	80086a6 <_scanf_float+0x322>
 8008682:	9b01      	ldr	r3, [sp, #4]
 8008684:	429e      	cmp	r6, r3
 8008686:	f67f aebf 	bls.w	8008408 <_scanf_float+0x84>
 800868a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800868e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008692:	464a      	mov	r2, r9
 8008694:	4640      	mov	r0, r8
 8008696:	4798      	blx	r3
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	3b01      	subs	r3, #1
 800869c:	6123      	str	r3, [r4, #16]
 800869e:	e7f0      	b.n	8008682 <_scanf_float+0x2fe>
 80086a0:	46aa      	mov	sl, r5
 80086a2:	46b3      	mov	fp, r6
 80086a4:	e7de      	b.n	8008664 <_scanf_float+0x2e0>
 80086a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	2965      	cmp	r1, #101	@ 0x65
 80086ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80086b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80086b6:	6123      	str	r3, [r4, #16]
 80086b8:	d00c      	beq.n	80086d4 <_scanf_float+0x350>
 80086ba:	2945      	cmp	r1, #69	@ 0x45
 80086bc:	d00a      	beq.n	80086d4 <_scanf_float+0x350>
 80086be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086c2:	464a      	mov	r2, r9
 80086c4:	4640      	mov	r0, r8
 80086c6:	4798      	blx	r3
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	1eb5      	subs	r5, r6, #2
 80086d2:	6123      	str	r3, [r4, #16]
 80086d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086d8:	464a      	mov	r2, r9
 80086da:	4640      	mov	r0, r8
 80086dc:	4798      	blx	r3
 80086de:	462e      	mov	r6, r5
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	f012 0210 	ands.w	r2, r2, #16
 80086e6:	d001      	beq.n	80086ec <_scanf_float+0x368>
 80086e8:	2000      	movs	r0, #0
 80086ea:	e68e      	b.n	800840a <_scanf_float+0x86>
 80086ec:	7032      	strb	r2, [r6, #0]
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80086f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086f8:	d125      	bne.n	8008746 <_scanf_float+0x3c2>
 80086fa:	9b02      	ldr	r3, [sp, #8]
 80086fc:	429f      	cmp	r7, r3
 80086fe:	d00a      	beq.n	8008716 <_scanf_float+0x392>
 8008700:	1bda      	subs	r2, r3, r7
 8008702:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008706:	429e      	cmp	r6, r3
 8008708:	bf28      	it	cs
 800870a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800870e:	4922      	ldr	r1, [pc, #136]	@ (8008798 <_scanf_float+0x414>)
 8008710:	4630      	mov	r0, r6
 8008712:	f000 f907 	bl	8008924 <siprintf>
 8008716:	9901      	ldr	r1, [sp, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	4640      	mov	r0, r8
 800871c:	f002 fc68 	bl	800aff0 <_strtod_r>
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	6821      	ldr	r1, [r4, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f011 0f02 	tst.w	r1, #2
 800872a:	ec57 6b10 	vmov	r6, r7, d0
 800872e:	f103 0204 	add.w	r2, r3, #4
 8008732:	d015      	beq.n	8008760 <_scanf_float+0x3dc>
 8008734:	9903      	ldr	r1, [sp, #12]
 8008736:	600a      	str	r2, [r1, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	e9c3 6700 	strd	r6, r7, [r3]
 800873e:	68e3      	ldr	r3, [r4, #12]
 8008740:	3301      	adds	r3, #1
 8008742:	60e3      	str	r3, [r4, #12]
 8008744:	e7d0      	b.n	80086e8 <_scanf_float+0x364>
 8008746:	9b04      	ldr	r3, [sp, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0e4      	beq.n	8008716 <_scanf_float+0x392>
 800874c:	9905      	ldr	r1, [sp, #20]
 800874e:	230a      	movs	r3, #10
 8008750:	3101      	adds	r1, #1
 8008752:	4640      	mov	r0, r8
 8008754:	f002 fccc 	bl	800b0f0 <_strtol_r>
 8008758:	9b04      	ldr	r3, [sp, #16]
 800875a:	9e05      	ldr	r6, [sp, #20]
 800875c:	1ac2      	subs	r2, r0, r3
 800875e:	e7d0      	b.n	8008702 <_scanf_float+0x37e>
 8008760:	f011 0f04 	tst.w	r1, #4
 8008764:	9903      	ldr	r1, [sp, #12]
 8008766:	600a      	str	r2, [r1, #0]
 8008768:	d1e6      	bne.n	8008738 <_scanf_float+0x3b4>
 800876a:	681d      	ldr	r5, [r3, #0]
 800876c:	4632      	mov	r2, r6
 800876e:	463b      	mov	r3, r7
 8008770:	4630      	mov	r0, r6
 8008772:	4639      	mov	r1, r7
 8008774:	f7f8 f9f2 	bl	8000b5c <__aeabi_dcmpun>
 8008778:	b128      	cbz	r0, 8008786 <_scanf_float+0x402>
 800877a:	4808      	ldr	r0, [pc, #32]	@ (800879c <_scanf_float+0x418>)
 800877c:	f000 fa2e 	bl	8008bdc <nanf>
 8008780:	ed85 0a00 	vstr	s0, [r5]
 8008784:	e7db      	b.n	800873e <_scanf_float+0x3ba>
 8008786:	4630      	mov	r0, r6
 8008788:	4639      	mov	r1, r7
 800878a:	f7f8 fa45 	bl	8000c18 <__aeabi_d2f>
 800878e:	6028      	str	r0, [r5, #0]
 8008790:	e7d5      	b.n	800873e <_scanf_float+0x3ba>
 8008792:	2700      	movs	r7, #0
 8008794:	e62e      	b.n	80083f4 <_scanf_float+0x70>
 8008796:	bf00      	nop
 8008798:	0800c82c 	.word	0x0800c82c
 800879c:	0800c96d 	.word	0x0800c96d

080087a0 <std>:
 80087a0:	2300      	movs	r3, #0
 80087a2:	b510      	push	{r4, lr}
 80087a4:	4604      	mov	r4, r0
 80087a6:	e9c0 3300 	strd	r3, r3, [r0]
 80087aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087ae:	6083      	str	r3, [r0, #8]
 80087b0:	8181      	strh	r1, [r0, #12]
 80087b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80087b4:	81c2      	strh	r2, [r0, #14]
 80087b6:	6183      	str	r3, [r0, #24]
 80087b8:	4619      	mov	r1, r3
 80087ba:	2208      	movs	r2, #8
 80087bc:	305c      	adds	r0, #92	@ 0x5c
 80087be:	f000 f921 	bl	8008a04 <memset>
 80087c2:	4b0d      	ldr	r3, [pc, #52]	@ (80087f8 <std+0x58>)
 80087c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80087c6:	4b0d      	ldr	r3, [pc, #52]	@ (80087fc <std+0x5c>)
 80087c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008800 <std+0x60>)
 80087cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008804 <std+0x64>)
 80087d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80087d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008808 <std+0x68>)
 80087d4:	6224      	str	r4, [r4, #32]
 80087d6:	429c      	cmp	r4, r3
 80087d8:	d006      	beq.n	80087e8 <std+0x48>
 80087da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087de:	4294      	cmp	r4, r2
 80087e0:	d002      	beq.n	80087e8 <std+0x48>
 80087e2:	33d0      	adds	r3, #208	@ 0xd0
 80087e4:	429c      	cmp	r4, r3
 80087e6:	d105      	bne.n	80087f4 <std+0x54>
 80087e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f0:	f000 b9e2 	b.w	8008bb8 <__retarget_lock_init_recursive>
 80087f4:	bd10      	pop	{r4, pc}
 80087f6:	bf00      	nop
 80087f8:	08008969 	.word	0x08008969
 80087fc:	0800898b 	.word	0x0800898b
 8008800:	080089c3 	.word	0x080089c3
 8008804:	080089e7 	.word	0x080089e7
 8008808:	2000610c 	.word	0x2000610c

0800880c <stdio_exit_handler>:
 800880c:	4a02      	ldr	r2, [pc, #8]	@ (8008818 <stdio_exit_handler+0xc>)
 800880e:	4903      	ldr	r1, [pc, #12]	@ (800881c <stdio_exit_handler+0x10>)
 8008810:	4803      	ldr	r0, [pc, #12]	@ (8008820 <stdio_exit_handler+0x14>)
 8008812:	f000 b869 	b.w	80088e8 <_fwalk_sglue>
 8008816:	bf00      	nop
 8008818:	20000010 	.word	0x20000010
 800881c:	0800b731 	.word	0x0800b731
 8008820:	20000020 	.word	0x20000020

08008824 <cleanup_stdio>:
 8008824:	6841      	ldr	r1, [r0, #4]
 8008826:	4b0c      	ldr	r3, [pc, #48]	@ (8008858 <cleanup_stdio+0x34>)
 8008828:	4299      	cmp	r1, r3
 800882a:	b510      	push	{r4, lr}
 800882c:	4604      	mov	r4, r0
 800882e:	d001      	beq.n	8008834 <cleanup_stdio+0x10>
 8008830:	f002 ff7e 	bl	800b730 <_fflush_r>
 8008834:	68a1      	ldr	r1, [r4, #8]
 8008836:	4b09      	ldr	r3, [pc, #36]	@ (800885c <cleanup_stdio+0x38>)
 8008838:	4299      	cmp	r1, r3
 800883a:	d002      	beq.n	8008842 <cleanup_stdio+0x1e>
 800883c:	4620      	mov	r0, r4
 800883e:	f002 ff77 	bl	800b730 <_fflush_r>
 8008842:	68e1      	ldr	r1, [r4, #12]
 8008844:	4b06      	ldr	r3, [pc, #24]	@ (8008860 <cleanup_stdio+0x3c>)
 8008846:	4299      	cmp	r1, r3
 8008848:	d004      	beq.n	8008854 <cleanup_stdio+0x30>
 800884a:	4620      	mov	r0, r4
 800884c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008850:	f002 bf6e 	b.w	800b730 <_fflush_r>
 8008854:	bd10      	pop	{r4, pc}
 8008856:	bf00      	nop
 8008858:	2000610c 	.word	0x2000610c
 800885c:	20006174 	.word	0x20006174
 8008860:	200061dc 	.word	0x200061dc

08008864 <global_stdio_init.part.0>:
 8008864:	b510      	push	{r4, lr}
 8008866:	4b0b      	ldr	r3, [pc, #44]	@ (8008894 <global_stdio_init.part.0+0x30>)
 8008868:	4c0b      	ldr	r4, [pc, #44]	@ (8008898 <global_stdio_init.part.0+0x34>)
 800886a:	4a0c      	ldr	r2, [pc, #48]	@ (800889c <global_stdio_init.part.0+0x38>)
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	4620      	mov	r0, r4
 8008870:	2200      	movs	r2, #0
 8008872:	2104      	movs	r1, #4
 8008874:	f7ff ff94 	bl	80087a0 <std>
 8008878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800887c:	2201      	movs	r2, #1
 800887e:	2109      	movs	r1, #9
 8008880:	f7ff ff8e 	bl	80087a0 <std>
 8008884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008888:	2202      	movs	r2, #2
 800888a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800888e:	2112      	movs	r1, #18
 8008890:	f7ff bf86 	b.w	80087a0 <std>
 8008894:	20006244 	.word	0x20006244
 8008898:	2000610c 	.word	0x2000610c
 800889c:	0800880d 	.word	0x0800880d

080088a0 <__sfp_lock_acquire>:
 80088a0:	4801      	ldr	r0, [pc, #4]	@ (80088a8 <__sfp_lock_acquire+0x8>)
 80088a2:	f000 b98a 	b.w	8008bba <__retarget_lock_acquire_recursive>
 80088a6:	bf00      	nop
 80088a8:	2000624d 	.word	0x2000624d

080088ac <__sfp_lock_release>:
 80088ac:	4801      	ldr	r0, [pc, #4]	@ (80088b4 <__sfp_lock_release+0x8>)
 80088ae:	f000 b985 	b.w	8008bbc <__retarget_lock_release_recursive>
 80088b2:	bf00      	nop
 80088b4:	2000624d 	.word	0x2000624d

080088b8 <__sinit>:
 80088b8:	b510      	push	{r4, lr}
 80088ba:	4604      	mov	r4, r0
 80088bc:	f7ff fff0 	bl	80088a0 <__sfp_lock_acquire>
 80088c0:	6a23      	ldr	r3, [r4, #32]
 80088c2:	b11b      	cbz	r3, 80088cc <__sinit+0x14>
 80088c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c8:	f7ff bff0 	b.w	80088ac <__sfp_lock_release>
 80088cc:	4b04      	ldr	r3, [pc, #16]	@ (80088e0 <__sinit+0x28>)
 80088ce:	6223      	str	r3, [r4, #32]
 80088d0:	4b04      	ldr	r3, [pc, #16]	@ (80088e4 <__sinit+0x2c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1f5      	bne.n	80088c4 <__sinit+0xc>
 80088d8:	f7ff ffc4 	bl	8008864 <global_stdio_init.part.0>
 80088dc:	e7f2      	b.n	80088c4 <__sinit+0xc>
 80088de:	bf00      	nop
 80088e0:	08008825 	.word	0x08008825
 80088e4:	20006244 	.word	0x20006244

080088e8 <_fwalk_sglue>:
 80088e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ec:	4607      	mov	r7, r0
 80088ee:	4688      	mov	r8, r1
 80088f0:	4614      	mov	r4, r2
 80088f2:	2600      	movs	r6, #0
 80088f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088f8:	f1b9 0901 	subs.w	r9, r9, #1
 80088fc:	d505      	bpl.n	800890a <_fwalk_sglue+0x22>
 80088fe:	6824      	ldr	r4, [r4, #0]
 8008900:	2c00      	cmp	r4, #0
 8008902:	d1f7      	bne.n	80088f4 <_fwalk_sglue+0xc>
 8008904:	4630      	mov	r0, r6
 8008906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800890a:	89ab      	ldrh	r3, [r5, #12]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d907      	bls.n	8008920 <_fwalk_sglue+0x38>
 8008910:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008914:	3301      	adds	r3, #1
 8008916:	d003      	beq.n	8008920 <_fwalk_sglue+0x38>
 8008918:	4629      	mov	r1, r5
 800891a:	4638      	mov	r0, r7
 800891c:	47c0      	blx	r8
 800891e:	4306      	orrs	r6, r0
 8008920:	3568      	adds	r5, #104	@ 0x68
 8008922:	e7e9      	b.n	80088f8 <_fwalk_sglue+0x10>

08008924 <siprintf>:
 8008924:	b40e      	push	{r1, r2, r3}
 8008926:	b510      	push	{r4, lr}
 8008928:	b09d      	sub	sp, #116	@ 0x74
 800892a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800892c:	9002      	str	r0, [sp, #8]
 800892e:	9006      	str	r0, [sp, #24]
 8008930:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008934:	480a      	ldr	r0, [pc, #40]	@ (8008960 <siprintf+0x3c>)
 8008936:	9107      	str	r1, [sp, #28]
 8008938:	9104      	str	r1, [sp, #16]
 800893a:	490a      	ldr	r1, [pc, #40]	@ (8008964 <siprintf+0x40>)
 800893c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008940:	9105      	str	r1, [sp, #20]
 8008942:	2400      	movs	r4, #0
 8008944:	a902      	add	r1, sp, #8
 8008946:	6800      	ldr	r0, [r0, #0]
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800894c:	f002 fc2e 	bl	800b1ac <_svfiprintf_r>
 8008950:	9b02      	ldr	r3, [sp, #8]
 8008952:	701c      	strb	r4, [r3, #0]
 8008954:	b01d      	add	sp, #116	@ 0x74
 8008956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800895a:	b003      	add	sp, #12
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	2000001c 	.word	0x2000001c
 8008964:	ffff0208 	.word	0xffff0208

08008968 <__sread>:
 8008968:	b510      	push	{r4, lr}
 800896a:	460c      	mov	r4, r1
 800896c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008970:	f000 f8d4 	bl	8008b1c <_read_r>
 8008974:	2800      	cmp	r0, #0
 8008976:	bfab      	itete	ge
 8008978:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800897a:	89a3      	ldrhlt	r3, [r4, #12]
 800897c:	181b      	addge	r3, r3, r0
 800897e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008982:	bfac      	ite	ge
 8008984:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008986:	81a3      	strhlt	r3, [r4, #12]
 8008988:	bd10      	pop	{r4, pc}

0800898a <__swrite>:
 800898a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800898e:	461f      	mov	r7, r3
 8008990:	898b      	ldrh	r3, [r1, #12]
 8008992:	05db      	lsls	r3, r3, #23
 8008994:	4605      	mov	r5, r0
 8008996:	460c      	mov	r4, r1
 8008998:	4616      	mov	r6, r2
 800899a:	d505      	bpl.n	80089a8 <__swrite+0x1e>
 800899c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a0:	2302      	movs	r3, #2
 80089a2:	2200      	movs	r2, #0
 80089a4:	f000 f8a8 	bl	8008af8 <_lseek_r>
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089b2:	81a3      	strh	r3, [r4, #12]
 80089b4:	4632      	mov	r2, r6
 80089b6:	463b      	mov	r3, r7
 80089b8:	4628      	mov	r0, r5
 80089ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089be:	f000 b8bf 	b.w	8008b40 <_write_r>

080089c2 <__sseek>:
 80089c2:	b510      	push	{r4, lr}
 80089c4:	460c      	mov	r4, r1
 80089c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ca:	f000 f895 	bl	8008af8 <_lseek_r>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	bf15      	itete	ne
 80089d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089de:	81a3      	strheq	r3, [r4, #12]
 80089e0:	bf18      	it	ne
 80089e2:	81a3      	strhne	r3, [r4, #12]
 80089e4:	bd10      	pop	{r4, pc}

080089e6 <__sclose>:
 80089e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ea:	f000 b817 	b.w	8008a1c <_close_r>
	...

080089f0 <viprintf>:
 80089f0:	460b      	mov	r3, r1
 80089f2:	4903      	ldr	r1, [pc, #12]	@ (8008a00 <viprintf+0x10>)
 80089f4:	4602      	mov	r2, r0
 80089f6:	6808      	ldr	r0, [r1, #0]
 80089f8:	6881      	ldr	r1, [r0, #8]
 80089fa:	f002 bcfd 	b.w	800b3f8 <_vfiprintf_r>
 80089fe:	bf00      	nop
 8008a00:	2000001c 	.word	0x2000001c

08008a04 <memset>:
 8008a04:	4402      	add	r2, r0
 8008a06:	4603      	mov	r3, r0
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d100      	bne.n	8008a0e <memset+0xa>
 8008a0c:	4770      	bx	lr
 8008a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a12:	e7f9      	b.n	8008a08 <memset+0x4>

08008a14 <_localeconv_r>:
 8008a14:	4800      	ldr	r0, [pc, #0]	@ (8008a18 <_localeconv_r+0x4>)
 8008a16:	4770      	bx	lr
 8008a18:	2000015c 	.word	0x2000015c

08008a1c <_close_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d06      	ldr	r5, [pc, #24]	@ (8008a38 <_close_r+0x1c>)
 8008a20:	2300      	movs	r3, #0
 8008a22:	4604      	mov	r4, r0
 8008a24:	4608      	mov	r0, r1
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	f7f9 fade 	bl	8001fe8 <_close>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d102      	bne.n	8008a36 <_close_r+0x1a>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	b103      	cbz	r3, 8008a36 <_close_r+0x1a>
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	20006248 	.word	0x20006248

08008a3c <_reclaim_reent>:
 8008a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8008af4 <_reclaim_reent+0xb8>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4283      	cmp	r3, r0
 8008a42:	b570      	push	{r4, r5, r6, lr}
 8008a44:	4604      	mov	r4, r0
 8008a46:	d053      	beq.n	8008af0 <_reclaim_reent+0xb4>
 8008a48:	69c3      	ldr	r3, [r0, #28]
 8008a4a:	b31b      	cbz	r3, 8008a94 <_reclaim_reent+0x58>
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	b163      	cbz	r3, 8008a6a <_reclaim_reent+0x2e>
 8008a50:	2500      	movs	r5, #0
 8008a52:	69e3      	ldr	r3, [r4, #28]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	5959      	ldr	r1, [r3, r5]
 8008a58:	b9b1      	cbnz	r1, 8008a88 <_reclaim_reent+0x4c>
 8008a5a:	3504      	adds	r5, #4
 8008a5c:	2d80      	cmp	r5, #128	@ 0x80
 8008a5e:	d1f8      	bne.n	8008a52 <_reclaim_reent+0x16>
 8008a60:	69e3      	ldr	r3, [r4, #28]
 8008a62:	4620      	mov	r0, r4
 8008a64:	68d9      	ldr	r1, [r3, #12]
 8008a66:	f000 ff17 	bl	8009898 <_free_r>
 8008a6a:	69e3      	ldr	r3, [r4, #28]
 8008a6c:	6819      	ldr	r1, [r3, #0]
 8008a6e:	b111      	cbz	r1, 8008a76 <_reclaim_reent+0x3a>
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 ff11 	bl	8009898 <_free_r>
 8008a76:	69e3      	ldr	r3, [r4, #28]
 8008a78:	689d      	ldr	r5, [r3, #8]
 8008a7a:	b15d      	cbz	r5, 8008a94 <_reclaim_reent+0x58>
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	4620      	mov	r0, r4
 8008a80:	682d      	ldr	r5, [r5, #0]
 8008a82:	f000 ff09 	bl	8009898 <_free_r>
 8008a86:	e7f8      	b.n	8008a7a <_reclaim_reent+0x3e>
 8008a88:	680e      	ldr	r6, [r1, #0]
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 ff04 	bl	8009898 <_free_r>
 8008a90:	4631      	mov	r1, r6
 8008a92:	e7e1      	b.n	8008a58 <_reclaim_reent+0x1c>
 8008a94:	6961      	ldr	r1, [r4, #20]
 8008a96:	b111      	cbz	r1, 8008a9e <_reclaim_reent+0x62>
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 fefd 	bl	8009898 <_free_r>
 8008a9e:	69e1      	ldr	r1, [r4, #28]
 8008aa0:	b111      	cbz	r1, 8008aa8 <_reclaim_reent+0x6c>
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f000 fef8 	bl	8009898 <_free_r>
 8008aa8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008aaa:	b111      	cbz	r1, 8008ab2 <_reclaim_reent+0x76>
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 fef3 	bl	8009898 <_free_r>
 8008ab2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ab4:	b111      	cbz	r1, 8008abc <_reclaim_reent+0x80>
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 feee 	bl	8009898 <_free_r>
 8008abc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008abe:	b111      	cbz	r1, 8008ac6 <_reclaim_reent+0x8a>
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fee9 	bl	8009898 <_free_r>
 8008ac6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008ac8:	b111      	cbz	r1, 8008ad0 <_reclaim_reent+0x94>
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fee4 	bl	8009898 <_free_r>
 8008ad0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008ad2:	b111      	cbz	r1, 8008ada <_reclaim_reent+0x9e>
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f000 fedf 	bl	8009898 <_free_r>
 8008ada:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008adc:	b111      	cbz	r1, 8008ae4 <_reclaim_reent+0xa8>
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 feda 	bl	8009898 <_free_r>
 8008ae4:	6a23      	ldr	r3, [r4, #32]
 8008ae6:	b11b      	cbz	r3, 8008af0 <_reclaim_reent+0xb4>
 8008ae8:	4620      	mov	r0, r4
 8008aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008aee:	4718      	bx	r3
 8008af0:	bd70      	pop	{r4, r5, r6, pc}
 8008af2:	bf00      	nop
 8008af4:	2000001c 	.word	0x2000001c

08008af8 <_lseek_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d07      	ldr	r5, [pc, #28]	@ (8008b18 <_lseek_r+0x20>)
 8008afc:	4604      	mov	r4, r0
 8008afe:	4608      	mov	r0, r1
 8008b00:	4611      	mov	r1, r2
 8008b02:	2200      	movs	r2, #0
 8008b04:	602a      	str	r2, [r5, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	f7f9 fa95 	bl	8002036 <_lseek>
 8008b0c:	1c43      	adds	r3, r0, #1
 8008b0e:	d102      	bne.n	8008b16 <_lseek_r+0x1e>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	b103      	cbz	r3, 8008b16 <_lseek_r+0x1e>
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
 8008b18:	20006248 	.word	0x20006248

08008b1c <_read_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4d07      	ldr	r5, [pc, #28]	@ (8008b3c <_read_r+0x20>)
 8008b20:	4604      	mov	r4, r0
 8008b22:	4608      	mov	r0, r1
 8008b24:	4611      	mov	r1, r2
 8008b26:	2200      	movs	r2, #0
 8008b28:	602a      	str	r2, [r5, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f7f9 fa23 	bl	8001f76 <_read>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d102      	bne.n	8008b3a <_read_r+0x1e>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	b103      	cbz	r3, 8008b3a <_read_r+0x1e>
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	20006248 	.word	0x20006248

08008b40 <_write_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4d07      	ldr	r5, [pc, #28]	@ (8008b60 <_write_r+0x20>)
 8008b44:	4604      	mov	r4, r0
 8008b46:	4608      	mov	r0, r1
 8008b48:	4611      	mov	r1, r2
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	602a      	str	r2, [r5, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f7f9 fa2e 	bl	8001fb0 <_write>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d102      	bne.n	8008b5e <_write_r+0x1e>
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	b103      	cbz	r3, 8008b5e <_write_r+0x1e>
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	20006248 	.word	0x20006248

08008b64 <__errno>:
 8008b64:	4b01      	ldr	r3, [pc, #4]	@ (8008b6c <__errno+0x8>)
 8008b66:	6818      	ldr	r0, [r3, #0]
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	2000001c 	.word	0x2000001c

08008b70 <__libc_init_array>:
 8008b70:	b570      	push	{r4, r5, r6, lr}
 8008b72:	4d0d      	ldr	r5, [pc, #52]	@ (8008ba8 <__libc_init_array+0x38>)
 8008b74:	4c0d      	ldr	r4, [pc, #52]	@ (8008bac <__libc_init_array+0x3c>)
 8008b76:	1b64      	subs	r4, r4, r5
 8008b78:	10a4      	asrs	r4, r4, #2
 8008b7a:	2600      	movs	r6, #0
 8008b7c:	42a6      	cmp	r6, r4
 8008b7e:	d109      	bne.n	8008b94 <__libc_init_array+0x24>
 8008b80:	4d0b      	ldr	r5, [pc, #44]	@ (8008bb0 <__libc_init_array+0x40>)
 8008b82:	4c0c      	ldr	r4, [pc, #48]	@ (8008bb4 <__libc_init_array+0x44>)
 8008b84:	f003 fb76 	bl	800c274 <_init>
 8008b88:	1b64      	subs	r4, r4, r5
 8008b8a:	10a4      	asrs	r4, r4, #2
 8008b8c:	2600      	movs	r6, #0
 8008b8e:	42a6      	cmp	r6, r4
 8008b90:	d105      	bne.n	8008b9e <__libc_init_array+0x2e>
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
 8008b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b98:	4798      	blx	r3
 8008b9a:	3601      	adds	r6, #1
 8008b9c:	e7ee      	b.n	8008b7c <__libc_init_array+0xc>
 8008b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba2:	4798      	blx	r3
 8008ba4:	3601      	adds	r6, #1
 8008ba6:	e7f2      	b.n	8008b8e <__libc_init_array+0x1e>
 8008ba8:	0800cc2c 	.word	0x0800cc2c
 8008bac:	0800cc2c 	.word	0x0800cc2c
 8008bb0:	0800cc2c 	.word	0x0800cc2c
 8008bb4:	0800cc30 	.word	0x0800cc30

08008bb8 <__retarget_lock_init_recursive>:
 8008bb8:	4770      	bx	lr

08008bba <__retarget_lock_acquire_recursive>:
 8008bba:	4770      	bx	lr

08008bbc <__retarget_lock_release_recursive>:
 8008bbc:	4770      	bx	lr

08008bbe <memcpy>:
 8008bbe:	440a      	add	r2, r1
 8008bc0:	4291      	cmp	r1, r2
 8008bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bc6:	d100      	bne.n	8008bca <memcpy+0xc>
 8008bc8:	4770      	bx	lr
 8008bca:	b510      	push	{r4, lr}
 8008bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bd4:	4291      	cmp	r1, r2
 8008bd6:	d1f9      	bne.n	8008bcc <memcpy+0xe>
 8008bd8:	bd10      	pop	{r4, pc}
	...

08008bdc <nanf>:
 8008bdc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008be4 <nanf+0x8>
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	7fc00000 	.word	0x7fc00000

08008be8 <quorem>:
 8008be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	6903      	ldr	r3, [r0, #16]
 8008bee:	690c      	ldr	r4, [r1, #16]
 8008bf0:	42a3      	cmp	r3, r4
 8008bf2:	4607      	mov	r7, r0
 8008bf4:	db7e      	blt.n	8008cf4 <quorem+0x10c>
 8008bf6:	3c01      	subs	r4, #1
 8008bf8:	f101 0814 	add.w	r8, r1, #20
 8008bfc:	00a3      	lsls	r3, r4, #2
 8008bfe:	f100 0514 	add.w	r5, r0, #20
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c12:	3301      	adds	r3, #1
 8008c14:	429a      	cmp	r2, r3
 8008c16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c1e:	d32e      	bcc.n	8008c7e <quorem+0x96>
 8008c20:	f04f 0a00 	mov.w	sl, #0
 8008c24:	46c4      	mov	ip, r8
 8008c26:	46ae      	mov	lr, r5
 8008c28:	46d3      	mov	fp, sl
 8008c2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c2e:	b298      	uxth	r0, r3
 8008c30:	fb06 a000 	mla	r0, r6, r0, sl
 8008c34:	0c02      	lsrs	r2, r0, #16
 8008c36:	0c1b      	lsrs	r3, r3, #16
 8008c38:	fb06 2303 	mla	r3, r6, r3, r2
 8008c3c:	f8de 2000 	ldr.w	r2, [lr]
 8008c40:	b280      	uxth	r0, r0
 8008c42:	b292      	uxth	r2, r2
 8008c44:	1a12      	subs	r2, r2, r0
 8008c46:	445a      	add	r2, fp
 8008c48:	f8de 0000 	ldr.w	r0, [lr]
 8008c4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008c56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008c5a:	b292      	uxth	r2, r2
 8008c5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008c60:	45e1      	cmp	r9, ip
 8008c62:	f84e 2b04 	str.w	r2, [lr], #4
 8008c66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008c6a:	d2de      	bcs.n	8008c2a <quorem+0x42>
 8008c6c:	9b00      	ldr	r3, [sp, #0]
 8008c6e:	58eb      	ldr	r3, [r5, r3]
 8008c70:	b92b      	cbnz	r3, 8008c7e <quorem+0x96>
 8008c72:	9b01      	ldr	r3, [sp, #4]
 8008c74:	3b04      	subs	r3, #4
 8008c76:	429d      	cmp	r5, r3
 8008c78:	461a      	mov	r2, r3
 8008c7a:	d32f      	bcc.n	8008cdc <quorem+0xf4>
 8008c7c:	613c      	str	r4, [r7, #16]
 8008c7e:	4638      	mov	r0, r7
 8008c80:	f001 f9c6 	bl	800a010 <__mcmp>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	db25      	blt.n	8008cd4 <quorem+0xec>
 8008c88:	4629      	mov	r1, r5
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c90:	f8d1 c000 	ldr.w	ip, [r1]
 8008c94:	fa1f fe82 	uxth.w	lr, r2
 8008c98:	fa1f f38c 	uxth.w	r3, ip
 8008c9c:	eba3 030e 	sub.w	r3, r3, lr
 8008ca0:	4403      	add	r3, r0
 8008ca2:	0c12      	lsrs	r2, r2, #16
 8008ca4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008ca8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cb2:	45c1      	cmp	r9, r8
 8008cb4:	f841 3b04 	str.w	r3, [r1], #4
 8008cb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008cbc:	d2e6      	bcs.n	8008c8c <quorem+0xa4>
 8008cbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cc6:	b922      	cbnz	r2, 8008cd2 <quorem+0xea>
 8008cc8:	3b04      	subs	r3, #4
 8008cca:	429d      	cmp	r5, r3
 8008ccc:	461a      	mov	r2, r3
 8008cce:	d30b      	bcc.n	8008ce8 <quorem+0x100>
 8008cd0:	613c      	str	r4, [r7, #16]
 8008cd2:	3601      	adds	r6, #1
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	b003      	add	sp, #12
 8008cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cdc:	6812      	ldr	r2, [r2, #0]
 8008cde:	3b04      	subs	r3, #4
 8008ce0:	2a00      	cmp	r2, #0
 8008ce2:	d1cb      	bne.n	8008c7c <quorem+0x94>
 8008ce4:	3c01      	subs	r4, #1
 8008ce6:	e7c6      	b.n	8008c76 <quorem+0x8e>
 8008ce8:	6812      	ldr	r2, [r2, #0]
 8008cea:	3b04      	subs	r3, #4
 8008cec:	2a00      	cmp	r2, #0
 8008cee:	d1ef      	bne.n	8008cd0 <quorem+0xe8>
 8008cf0:	3c01      	subs	r4, #1
 8008cf2:	e7ea      	b.n	8008cca <quorem+0xe2>
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	e7ee      	b.n	8008cd6 <quorem+0xee>

08008cf8 <_dtoa_r>:
 8008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	69c7      	ldr	r7, [r0, #28]
 8008cfe:	b097      	sub	sp, #92	@ 0x5c
 8008d00:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008d04:	ec55 4b10 	vmov	r4, r5, d0
 8008d08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008d0a:	9107      	str	r1, [sp, #28]
 8008d0c:	4681      	mov	r9, r0
 8008d0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d10:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d12:	b97f      	cbnz	r7, 8008d34 <_dtoa_r+0x3c>
 8008d14:	2010      	movs	r0, #16
 8008d16:	f000 fe09 	bl	800992c <malloc>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008d20:	b920      	cbnz	r0, 8008d2c <_dtoa_r+0x34>
 8008d22:	4ba9      	ldr	r3, [pc, #676]	@ (8008fc8 <_dtoa_r+0x2d0>)
 8008d24:	21ef      	movs	r1, #239	@ 0xef
 8008d26:	48a9      	ldr	r0, [pc, #676]	@ (8008fcc <_dtoa_r+0x2d4>)
 8008d28:	f002 fe02 	bl	800b930 <__assert_func>
 8008d2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008d30:	6007      	str	r7, [r0, #0]
 8008d32:	60c7      	str	r7, [r0, #12]
 8008d34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d38:	6819      	ldr	r1, [r3, #0]
 8008d3a:	b159      	cbz	r1, 8008d54 <_dtoa_r+0x5c>
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	604a      	str	r2, [r1, #4]
 8008d40:	2301      	movs	r3, #1
 8008d42:	4093      	lsls	r3, r2
 8008d44:	608b      	str	r3, [r1, #8]
 8008d46:	4648      	mov	r0, r9
 8008d48:	f000 fee6 	bl	8009b18 <_Bfree>
 8008d4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d50:	2200      	movs	r2, #0
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	1e2b      	subs	r3, r5, #0
 8008d56:	bfb9      	ittee	lt
 8008d58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008d5c:	9305      	strlt	r3, [sp, #20]
 8008d5e:	2300      	movge	r3, #0
 8008d60:	6033      	strge	r3, [r6, #0]
 8008d62:	9f05      	ldr	r7, [sp, #20]
 8008d64:	4b9a      	ldr	r3, [pc, #616]	@ (8008fd0 <_dtoa_r+0x2d8>)
 8008d66:	bfbc      	itt	lt
 8008d68:	2201      	movlt	r2, #1
 8008d6a:	6032      	strlt	r2, [r6, #0]
 8008d6c:	43bb      	bics	r3, r7
 8008d6e:	d112      	bne.n	8008d96 <_dtoa_r+0x9e>
 8008d70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008d72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d7c:	4323      	orrs	r3, r4
 8008d7e:	f000 855a 	beq.w	8009836 <_dtoa_r+0xb3e>
 8008d82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008fe4 <_dtoa_r+0x2ec>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 855c 	beq.w	8009846 <_dtoa_r+0xb4e>
 8008d8e:	f10a 0303 	add.w	r3, sl, #3
 8008d92:	f000 bd56 	b.w	8009842 <_dtoa_r+0xb4a>
 8008d96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	ec51 0b17 	vmov	r0, r1, d7
 8008da0:	2300      	movs	r3, #0
 8008da2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008da6:	f7f7 fea7 	bl	8000af8 <__aeabi_dcmpeq>
 8008daa:	4680      	mov	r8, r0
 8008dac:	b158      	cbz	r0, 8008dc6 <_dtoa_r+0xce>
 8008dae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008db0:	2301      	movs	r3, #1
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008db6:	b113      	cbz	r3, 8008dbe <_dtoa_r+0xc6>
 8008db8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008dba:	4b86      	ldr	r3, [pc, #536]	@ (8008fd4 <_dtoa_r+0x2dc>)
 8008dbc:	6013      	str	r3, [r2, #0]
 8008dbe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008fe8 <_dtoa_r+0x2f0>
 8008dc2:	f000 bd40 	b.w	8009846 <_dtoa_r+0xb4e>
 8008dc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008dca:	aa14      	add	r2, sp, #80	@ 0x50
 8008dcc:	a915      	add	r1, sp, #84	@ 0x54
 8008dce:	4648      	mov	r0, r9
 8008dd0:	f001 fa3e 	bl	800a250 <__d2b>
 8008dd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008dd8:	9002      	str	r0, [sp, #8]
 8008dda:	2e00      	cmp	r6, #0
 8008ddc:	d078      	beq.n	8008ed0 <_dtoa_r+0x1d8>
 8008dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008de0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008de8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008dec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008df0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008df4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008df8:	4619      	mov	r1, r3
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	4b76      	ldr	r3, [pc, #472]	@ (8008fd8 <_dtoa_r+0x2e0>)
 8008dfe:	f7f7 fa5b 	bl	80002b8 <__aeabi_dsub>
 8008e02:	a36b      	add	r3, pc, #428	@ (adr r3, 8008fb0 <_dtoa_r+0x2b8>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	f7f7 fc0e 	bl	8000628 <__aeabi_dmul>
 8008e0c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008fb8 <_dtoa_r+0x2c0>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	f7f7 fa53 	bl	80002bc <__adddf3>
 8008e16:	4604      	mov	r4, r0
 8008e18:	4630      	mov	r0, r6
 8008e1a:	460d      	mov	r5, r1
 8008e1c:	f7f7 fb9a 	bl	8000554 <__aeabi_i2d>
 8008e20:	a367      	add	r3, pc, #412	@ (adr r3, 8008fc0 <_dtoa_r+0x2c8>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7f7 fbff 	bl	8000628 <__aeabi_dmul>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4620      	mov	r0, r4
 8008e30:	4629      	mov	r1, r5
 8008e32:	f7f7 fa43 	bl	80002bc <__adddf3>
 8008e36:	4604      	mov	r4, r0
 8008e38:	460d      	mov	r5, r1
 8008e3a:	f7f7 fea5 	bl	8000b88 <__aeabi_d2iz>
 8008e3e:	2200      	movs	r2, #0
 8008e40:	4607      	mov	r7, r0
 8008e42:	2300      	movs	r3, #0
 8008e44:	4620      	mov	r0, r4
 8008e46:	4629      	mov	r1, r5
 8008e48:	f7f7 fe60 	bl	8000b0c <__aeabi_dcmplt>
 8008e4c:	b140      	cbz	r0, 8008e60 <_dtoa_r+0x168>
 8008e4e:	4638      	mov	r0, r7
 8008e50:	f7f7 fb80 	bl	8000554 <__aeabi_i2d>
 8008e54:	4622      	mov	r2, r4
 8008e56:	462b      	mov	r3, r5
 8008e58:	f7f7 fe4e 	bl	8000af8 <__aeabi_dcmpeq>
 8008e5c:	b900      	cbnz	r0, 8008e60 <_dtoa_r+0x168>
 8008e5e:	3f01      	subs	r7, #1
 8008e60:	2f16      	cmp	r7, #22
 8008e62:	d852      	bhi.n	8008f0a <_dtoa_r+0x212>
 8008e64:	4b5d      	ldr	r3, [pc, #372]	@ (8008fdc <_dtoa_r+0x2e4>)
 8008e66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e72:	f7f7 fe4b 	bl	8000b0c <__aeabi_dcmplt>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d049      	beq.n	8008f0e <_dtoa_r+0x216>
 8008e7a:	3f01      	subs	r7, #1
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e82:	1b9b      	subs	r3, r3, r6
 8008e84:	1e5a      	subs	r2, r3, #1
 8008e86:	bf45      	ittet	mi
 8008e88:	f1c3 0301 	rsbmi	r3, r3, #1
 8008e8c:	9300      	strmi	r3, [sp, #0]
 8008e8e:	2300      	movpl	r3, #0
 8008e90:	2300      	movmi	r3, #0
 8008e92:	9206      	str	r2, [sp, #24]
 8008e94:	bf54      	ite	pl
 8008e96:	9300      	strpl	r3, [sp, #0]
 8008e98:	9306      	strmi	r3, [sp, #24]
 8008e9a:	2f00      	cmp	r7, #0
 8008e9c:	db39      	blt.n	8008f12 <_dtoa_r+0x21a>
 8008e9e:	9b06      	ldr	r3, [sp, #24]
 8008ea0:	970d      	str	r7, [sp, #52]	@ 0x34
 8008ea2:	443b      	add	r3, r7
 8008ea4:	9306      	str	r3, [sp, #24]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9308      	str	r3, [sp, #32]
 8008eaa:	9b07      	ldr	r3, [sp, #28]
 8008eac:	2b09      	cmp	r3, #9
 8008eae:	d863      	bhi.n	8008f78 <_dtoa_r+0x280>
 8008eb0:	2b05      	cmp	r3, #5
 8008eb2:	bfc4      	itt	gt
 8008eb4:	3b04      	subgt	r3, #4
 8008eb6:	9307      	strgt	r3, [sp, #28]
 8008eb8:	9b07      	ldr	r3, [sp, #28]
 8008eba:	f1a3 0302 	sub.w	r3, r3, #2
 8008ebe:	bfcc      	ite	gt
 8008ec0:	2400      	movgt	r4, #0
 8008ec2:	2401      	movle	r4, #1
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d863      	bhi.n	8008f90 <_dtoa_r+0x298>
 8008ec8:	e8df f003 	tbb	[pc, r3]
 8008ecc:	2b375452 	.word	0x2b375452
 8008ed0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008ed4:	441e      	add	r6, r3
 8008ed6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008eda:	2b20      	cmp	r3, #32
 8008edc:	bfc1      	itttt	gt
 8008ede:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008ee2:	409f      	lslgt	r7, r3
 8008ee4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ee8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008eec:	bfd6      	itet	le
 8008eee:	f1c3 0320 	rsble	r3, r3, #32
 8008ef2:	ea47 0003 	orrgt.w	r0, r7, r3
 8008ef6:	fa04 f003 	lslle.w	r0, r4, r3
 8008efa:	f7f7 fb1b 	bl	8000534 <__aeabi_ui2d>
 8008efe:	2201      	movs	r2, #1
 8008f00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008f04:	3e01      	subs	r6, #1
 8008f06:	9212      	str	r2, [sp, #72]	@ 0x48
 8008f08:	e776      	b.n	8008df8 <_dtoa_r+0x100>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e7b7      	b.n	8008e7e <_dtoa_r+0x186>
 8008f0e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008f10:	e7b6      	b.n	8008e80 <_dtoa_r+0x188>
 8008f12:	9b00      	ldr	r3, [sp, #0]
 8008f14:	1bdb      	subs	r3, r3, r7
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	427b      	negs	r3, r7
 8008f1a:	9308      	str	r3, [sp, #32]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008f20:	e7c3      	b.n	8008eaa <_dtoa_r+0x1b2>
 8008f22:	2301      	movs	r3, #1
 8008f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f28:	eb07 0b03 	add.w	fp, r7, r3
 8008f2c:	f10b 0301 	add.w	r3, fp, #1
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	9303      	str	r3, [sp, #12]
 8008f34:	bfb8      	it	lt
 8008f36:	2301      	movlt	r3, #1
 8008f38:	e006      	b.n	8008f48 <_dtoa_r+0x250>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dd28      	ble.n	8008f96 <_dtoa_r+0x29e>
 8008f44:	469b      	mov	fp, r3
 8008f46:	9303      	str	r3, [sp, #12]
 8008f48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	2204      	movs	r2, #4
 8008f50:	f102 0514 	add.w	r5, r2, #20
 8008f54:	429d      	cmp	r5, r3
 8008f56:	d926      	bls.n	8008fa6 <_dtoa_r+0x2ae>
 8008f58:	6041      	str	r1, [r0, #4]
 8008f5a:	4648      	mov	r0, r9
 8008f5c:	f000 fd9c 	bl	8009a98 <_Balloc>
 8008f60:	4682      	mov	sl, r0
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d142      	bne.n	8008fec <_dtoa_r+0x2f4>
 8008f66:	4b1e      	ldr	r3, [pc, #120]	@ (8008fe0 <_dtoa_r+0x2e8>)
 8008f68:	4602      	mov	r2, r0
 8008f6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8008f6e:	e6da      	b.n	8008d26 <_dtoa_r+0x2e>
 8008f70:	2300      	movs	r3, #0
 8008f72:	e7e3      	b.n	8008f3c <_dtoa_r+0x244>
 8008f74:	2300      	movs	r3, #0
 8008f76:	e7d5      	b.n	8008f24 <_dtoa_r+0x22c>
 8008f78:	2401      	movs	r4, #1
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9307      	str	r3, [sp, #28]
 8008f7e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008f80:	f04f 3bff 	mov.w	fp, #4294967295
 8008f84:	2200      	movs	r2, #0
 8008f86:	f8cd b00c 	str.w	fp, [sp, #12]
 8008f8a:	2312      	movs	r3, #18
 8008f8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f8e:	e7db      	b.n	8008f48 <_dtoa_r+0x250>
 8008f90:	2301      	movs	r3, #1
 8008f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f94:	e7f4      	b.n	8008f80 <_dtoa_r+0x288>
 8008f96:	f04f 0b01 	mov.w	fp, #1
 8008f9a:	f8cd b00c 	str.w	fp, [sp, #12]
 8008f9e:	465b      	mov	r3, fp
 8008fa0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008fa4:	e7d0      	b.n	8008f48 <_dtoa_r+0x250>
 8008fa6:	3101      	adds	r1, #1
 8008fa8:	0052      	lsls	r2, r2, #1
 8008faa:	e7d1      	b.n	8008f50 <_dtoa_r+0x258>
 8008fac:	f3af 8000 	nop.w
 8008fb0:	636f4361 	.word	0x636f4361
 8008fb4:	3fd287a7 	.word	0x3fd287a7
 8008fb8:	8b60c8b3 	.word	0x8b60c8b3
 8008fbc:	3fc68a28 	.word	0x3fc68a28
 8008fc0:	509f79fb 	.word	0x509f79fb
 8008fc4:	3fd34413 	.word	0x3fd34413
 8008fc8:	0800c83e 	.word	0x0800c83e
 8008fcc:	0800c855 	.word	0x0800c855
 8008fd0:	7ff00000 	.word	0x7ff00000
 8008fd4:	0800c809 	.word	0x0800c809
 8008fd8:	3ff80000 	.word	0x3ff80000
 8008fdc:	0800ca08 	.word	0x0800ca08
 8008fe0:	0800c8ad 	.word	0x0800c8ad
 8008fe4:	0800c83a 	.word	0x0800c83a
 8008fe8:	0800c808 	.word	0x0800c808
 8008fec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ff0:	6018      	str	r0, [r3, #0]
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	2b0e      	cmp	r3, #14
 8008ff6:	f200 80a1 	bhi.w	800913c <_dtoa_r+0x444>
 8008ffa:	2c00      	cmp	r4, #0
 8008ffc:	f000 809e 	beq.w	800913c <_dtoa_r+0x444>
 8009000:	2f00      	cmp	r7, #0
 8009002:	dd33      	ble.n	800906c <_dtoa_r+0x374>
 8009004:	4b9c      	ldr	r3, [pc, #624]	@ (8009278 <_dtoa_r+0x580>)
 8009006:	f007 020f 	and.w	r2, r7, #15
 800900a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800900e:	ed93 7b00 	vldr	d7, [r3]
 8009012:	05f8      	lsls	r0, r7, #23
 8009014:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009018:	ea4f 1427 	mov.w	r4, r7, asr #4
 800901c:	d516      	bpl.n	800904c <_dtoa_r+0x354>
 800901e:	4b97      	ldr	r3, [pc, #604]	@ (800927c <_dtoa_r+0x584>)
 8009020:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009028:	f7f7 fc28 	bl	800087c <__aeabi_ddiv>
 800902c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009030:	f004 040f 	and.w	r4, r4, #15
 8009034:	2603      	movs	r6, #3
 8009036:	4d91      	ldr	r5, [pc, #580]	@ (800927c <_dtoa_r+0x584>)
 8009038:	b954      	cbnz	r4, 8009050 <_dtoa_r+0x358>
 800903a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800903e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009042:	f7f7 fc1b 	bl	800087c <__aeabi_ddiv>
 8009046:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800904a:	e028      	b.n	800909e <_dtoa_r+0x3a6>
 800904c:	2602      	movs	r6, #2
 800904e:	e7f2      	b.n	8009036 <_dtoa_r+0x33e>
 8009050:	07e1      	lsls	r1, r4, #31
 8009052:	d508      	bpl.n	8009066 <_dtoa_r+0x36e>
 8009054:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009058:	e9d5 2300 	ldrd	r2, r3, [r5]
 800905c:	f7f7 fae4 	bl	8000628 <__aeabi_dmul>
 8009060:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009064:	3601      	adds	r6, #1
 8009066:	1064      	asrs	r4, r4, #1
 8009068:	3508      	adds	r5, #8
 800906a:	e7e5      	b.n	8009038 <_dtoa_r+0x340>
 800906c:	f000 80af 	beq.w	80091ce <_dtoa_r+0x4d6>
 8009070:	427c      	negs	r4, r7
 8009072:	4b81      	ldr	r3, [pc, #516]	@ (8009278 <_dtoa_r+0x580>)
 8009074:	4d81      	ldr	r5, [pc, #516]	@ (800927c <_dtoa_r+0x584>)
 8009076:	f004 020f 	and.w	r2, r4, #15
 800907a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009086:	f7f7 facf 	bl	8000628 <__aeabi_dmul>
 800908a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800908e:	1124      	asrs	r4, r4, #4
 8009090:	2300      	movs	r3, #0
 8009092:	2602      	movs	r6, #2
 8009094:	2c00      	cmp	r4, #0
 8009096:	f040 808f 	bne.w	80091b8 <_dtoa_r+0x4c0>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1d3      	bne.n	8009046 <_dtoa_r+0x34e>
 800909e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80090a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 8094 	beq.w	80091d2 <_dtoa_r+0x4da>
 80090aa:	4b75      	ldr	r3, [pc, #468]	@ (8009280 <_dtoa_r+0x588>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	4620      	mov	r0, r4
 80090b0:	4629      	mov	r1, r5
 80090b2:	f7f7 fd2b 	bl	8000b0c <__aeabi_dcmplt>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f000 808b 	beq.w	80091d2 <_dtoa_r+0x4da>
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 8087 	beq.w	80091d2 <_dtoa_r+0x4da>
 80090c4:	f1bb 0f00 	cmp.w	fp, #0
 80090c8:	dd34      	ble.n	8009134 <_dtoa_r+0x43c>
 80090ca:	4620      	mov	r0, r4
 80090cc:	4b6d      	ldr	r3, [pc, #436]	@ (8009284 <_dtoa_r+0x58c>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	4629      	mov	r1, r5
 80090d2:	f7f7 faa9 	bl	8000628 <__aeabi_dmul>
 80090d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090da:	f107 38ff 	add.w	r8, r7, #4294967295
 80090de:	3601      	adds	r6, #1
 80090e0:	465c      	mov	r4, fp
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7f7 fa36 	bl	8000554 <__aeabi_i2d>
 80090e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ec:	f7f7 fa9c 	bl	8000628 <__aeabi_dmul>
 80090f0:	4b65      	ldr	r3, [pc, #404]	@ (8009288 <_dtoa_r+0x590>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	f7f7 f8e2 	bl	80002bc <__adddf3>
 80090f8:	4605      	mov	r5, r0
 80090fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80090fe:	2c00      	cmp	r4, #0
 8009100:	d16a      	bne.n	80091d8 <_dtoa_r+0x4e0>
 8009102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009106:	4b61      	ldr	r3, [pc, #388]	@ (800928c <_dtoa_r+0x594>)
 8009108:	2200      	movs	r2, #0
 800910a:	f7f7 f8d5 	bl	80002b8 <__aeabi_dsub>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009116:	462a      	mov	r2, r5
 8009118:	4633      	mov	r3, r6
 800911a:	f7f7 fd15 	bl	8000b48 <__aeabi_dcmpgt>
 800911e:	2800      	cmp	r0, #0
 8009120:	f040 8298 	bne.w	8009654 <_dtoa_r+0x95c>
 8009124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009128:	462a      	mov	r2, r5
 800912a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800912e:	f7f7 fced 	bl	8000b0c <__aeabi_dcmplt>
 8009132:	bb38      	cbnz	r0, 8009184 <_dtoa_r+0x48c>
 8009134:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009138:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800913c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800913e:	2b00      	cmp	r3, #0
 8009140:	f2c0 8157 	blt.w	80093f2 <_dtoa_r+0x6fa>
 8009144:	2f0e      	cmp	r7, #14
 8009146:	f300 8154 	bgt.w	80093f2 <_dtoa_r+0x6fa>
 800914a:	4b4b      	ldr	r3, [pc, #300]	@ (8009278 <_dtoa_r+0x580>)
 800914c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009150:	ed93 7b00 	vldr	d7, [r3]
 8009154:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009156:	2b00      	cmp	r3, #0
 8009158:	ed8d 7b00 	vstr	d7, [sp]
 800915c:	f280 80e5 	bge.w	800932a <_dtoa_r+0x632>
 8009160:	9b03      	ldr	r3, [sp, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	f300 80e1 	bgt.w	800932a <_dtoa_r+0x632>
 8009168:	d10c      	bne.n	8009184 <_dtoa_r+0x48c>
 800916a:	4b48      	ldr	r3, [pc, #288]	@ (800928c <_dtoa_r+0x594>)
 800916c:	2200      	movs	r2, #0
 800916e:	ec51 0b17 	vmov	r0, r1, d7
 8009172:	f7f7 fa59 	bl	8000628 <__aeabi_dmul>
 8009176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800917a:	f7f7 fcdb 	bl	8000b34 <__aeabi_dcmpge>
 800917e:	2800      	cmp	r0, #0
 8009180:	f000 8266 	beq.w	8009650 <_dtoa_r+0x958>
 8009184:	2400      	movs	r4, #0
 8009186:	4625      	mov	r5, r4
 8009188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800918a:	4656      	mov	r6, sl
 800918c:	ea6f 0803 	mvn.w	r8, r3
 8009190:	2700      	movs	r7, #0
 8009192:	4621      	mov	r1, r4
 8009194:	4648      	mov	r0, r9
 8009196:	f000 fcbf 	bl	8009b18 <_Bfree>
 800919a:	2d00      	cmp	r5, #0
 800919c:	f000 80bd 	beq.w	800931a <_dtoa_r+0x622>
 80091a0:	b12f      	cbz	r7, 80091ae <_dtoa_r+0x4b6>
 80091a2:	42af      	cmp	r7, r5
 80091a4:	d003      	beq.n	80091ae <_dtoa_r+0x4b6>
 80091a6:	4639      	mov	r1, r7
 80091a8:	4648      	mov	r0, r9
 80091aa:	f000 fcb5 	bl	8009b18 <_Bfree>
 80091ae:	4629      	mov	r1, r5
 80091b0:	4648      	mov	r0, r9
 80091b2:	f000 fcb1 	bl	8009b18 <_Bfree>
 80091b6:	e0b0      	b.n	800931a <_dtoa_r+0x622>
 80091b8:	07e2      	lsls	r2, r4, #31
 80091ba:	d505      	bpl.n	80091c8 <_dtoa_r+0x4d0>
 80091bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091c0:	f7f7 fa32 	bl	8000628 <__aeabi_dmul>
 80091c4:	3601      	adds	r6, #1
 80091c6:	2301      	movs	r3, #1
 80091c8:	1064      	asrs	r4, r4, #1
 80091ca:	3508      	adds	r5, #8
 80091cc:	e762      	b.n	8009094 <_dtoa_r+0x39c>
 80091ce:	2602      	movs	r6, #2
 80091d0:	e765      	b.n	800909e <_dtoa_r+0x3a6>
 80091d2:	9c03      	ldr	r4, [sp, #12]
 80091d4:	46b8      	mov	r8, r7
 80091d6:	e784      	b.n	80090e2 <_dtoa_r+0x3ea>
 80091d8:	4b27      	ldr	r3, [pc, #156]	@ (8009278 <_dtoa_r+0x580>)
 80091da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091e4:	4454      	add	r4, sl
 80091e6:	2900      	cmp	r1, #0
 80091e8:	d054      	beq.n	8009294 <_dtoa_r+0x59c>
 80091ea:	4929      	ldr	r1, [pc, #164]	@ (8009290 <_dtoa_r+0x598>)
 80091ec:	2000      	movs	r0, #0
 80091ee:	f7f7 fb45 	bl	800087c <__aeabi_ddiv>
 80091f2:	4633      	mov	r3, r6
 80091f4:	462a      	mov	r2, r5
 80091f6:	f7f7 f85f 	bl	80002b8 <__aeabi_dsub>
 80091fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80091fe:	4656      	mov	r6, sl
 8009200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009204:	f7f7 fcc0 	bl	8000b88 <__aeabi_d2iz>
 8009208:	4605      	mov	r5, r0
 800920a:	f7f7 f9a3 	bl	8000554 <__aeabi_i2d>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009216:	f7f7 f84f 	bl	80002b8 <__aeabi_dsub>
 800921a:	3530      	adds	r5, #48	@ 0x30
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009224:	f806 5b01 	strb.w	r5, [r6], #1
 8009228:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800922c:	f7f7 fc6e 	bl	8000b0c <__aeabi_dcmplt>
 8009230:	2800      	cmp	r0, #0
 8009232:	d172      	bne.n	800931a <_dtoa_r+0x622>
 8009234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009238:	4911      	ldr	r1, [pc, #68]	@ (8009280 <_dtoa_r+0x588>)
 800923a:	2000      	movs	r0, #0
 800923c:	f7f7 f83c 	bl	80002b8 <__aeabi_dsub>
 8009240:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009244:	f7f7 fc62 	bl	8000b0c <__aeabi_dcmplt>
 8009248:	2800      	cmp	r0, #0
 800924a:	f040 80b4 	bne.w	80093b6 <_dtoa_r+0x6be>
 800924e:	42a6      	cmp	r6, r4
 8009250:	f43f af70 	beq.w	8009134 <_dtoa_r+0x43c>
 8009254:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009258:	4b0a      	ldr	r3, [pc, #40]	@ (8009284 <_dtoa_r+0x58c>)
 800925a:	2200      	movs	r2, #0
 800925c:	f7f7 f9e4 	bl	8000628 <__aeabi_dmul>
 8009260:	4b08      	ldr	r3, [pc, #32]	@ (8009284 <_dtoa_r+0x58c>)
 8009262:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009266:	2200      	movs	r2, #0
 8009268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800926c:	f7f7 f9dc 	bl	8000628 <__aeabi_dmul>
 8009270:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009274:	e7c4      	b.n	8009200 <_dtoa_r+0x508>
 8009276:	bf00      	nop
 8009278:	0800ca08 	.word	0x0800ca08
 800927c:	0800c9e0 	.word	0x0800c9e0
 8009280:	3ff00000 	.word	0x3ff00000
 8009284:	40240000 	.word	0x40240000
 8009288:	401c0000 	.word	0x401c0000
 800928c:	40140000 	.word	0x40140000
 8009290:	3fe00000 	.word	0x3fe00000
 8009294:	4631      	mov	r1, r6
 8009296:	4628      	mov	r0, r5
 8009298:	f7f7 f9c6 	bl	8000628 <__aeabi_dmul>
 800929c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80092a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80092a2:	4656      	mov	r6, sl
 80092a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092a8:	f7f7 fc6e 	bl	8000b88 <__aeabi_d2iz>
 80092ac:	4605      	mov	r5, r0
 80092ae:	f7f7 f951 	bl	8000554 <__aeabi_i2d>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092ba:	f7f6 fffd 	bl	80002b8 <__aeabi_dsub>
 80092be:	3530      	adds	r5, #48	@ 0x30
 80092c0:	f806 5b01 	strb.w	r5, [r6], #1
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	42a6      	cmp	r6, r4
 80092ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80092ce:	f04f 0200 	mov.w	r2, #0
 80092d2:	d124      	bne.n	800931e <_dtoa_r+0x626>
 80092d4:	4baf      	ldr	r3, [pc, #700]	@ (8009594 <_dtoa_r+0x89c>)
 80092d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80092da:	f7f6 ffef 	bl	80002bc <__adddf3>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092e6:	f7f7 fc2f 	bl	8000b48 <__aeabi_dcmpgt>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d163      	bne.n	80093b6 <_dtoa_r+0x6be>
 80092ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092f2:	49a8      	ldr	r1, [pc, #672]	@ (8009594 <_dtoa_r+0x89c>)
 80092f4:	2000      	movs	r0, #0
 80092f6:	f7f6 ffdf 	bl	80002b8 <__aeabi_dsub>
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009302:	f7f7 fc03 	bl	8000b0c <__aeabi_dcmplt>
 8009306:	2800      	cmp	r0, #0
 8009308:	f43f af14 	beq.w	8009134 <_dtoa_r+0x43c>
 800930c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800930e:	1e73      	subs	r3, r6, #1
 8009310:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009312:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009316:	2b30      	cmp	r3, #48	@ 0x30
 8009318:	d0f8      	beq.n	800930c <_dtoa_r+0x614>
 800931a:	4647      	mov	r7, r8
 800931c:	e03b      	b.n	8009396 <_dtoa_r+0x69e>
 800931e:	4b9e      	ldr	r3, [pc, #632]	@ (8009598 <_dtoa_r+0x8a0>)
 8009320:	f7f7 f982 	bl	8000628 <__aeabi_dmul>
 8009324:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009328:	e7bc      	b.n	80092a4 <_dtoa_r+0x5ac>
 800932a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800932e:	4656      	mov	r6, sl
 8009330:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009334:	4620      	mov	r0, r4
 8009336:	4629      	mov	r1, r5
 8009338:	f7f7 faa0 	bl	800087c <__aeabi_ddiv>
 800933c:	f7f7 fc24 	bl	8000b88 <__aeabi_d2iz>
 8009340:	4680      	mov	r8, r0
 8009342:	f7f7 f907 	bl	8000554 <__aeabi_i2d>
 8009346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800934a:	f7f7 f96d 	bl	8000628 <__aeabi_dmul>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	4620      	mov	r0, r4
 8009354:	4629      	mov	r1, r5
 8009356:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800935a:	f7f6 ffad 	bl	80002b8 <__aeabi_dsub>
 800935e:	f806 4b01 	strb.w	r4, [r6], #1
 8009362:	9d03      	ldr	r5, [sp, #12]
 8009364:	eba6 040a 	sub.w	r4, r6, sl
 8009368:	42a5      	cmp	r5, r4
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	d133      	bne.n	80093d8 <_dtoa_r+0x6e0>
 8009370:	f7f6 ffa4 	bl	80002bc <__adddf3>
 8009374:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009378:	4604      	mov	r4, r0
 800937a:	460d      	mov	r5, r1
 800937c:	f7f7 fbe4 	bl	8000b48 <__aeabi_dcmpgt>
 8009380:	b9c0      	cbnz	r0, 80093b4 <_dtoa_r+0x6bc>
 8009382:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009386:	4620      	mov	r0, r4
 8009388:	4629      	mov	r1, r5
 800938a:	f7f7 fbb5 	bl	8000af8 <__aeabi_dcmpeq>
 800938e:	b110      	cbz	r0, 8009396 <_dtoa_r+0x69e>
 8009390:	f018 0f01 	tst.w	r8, #1
 8009394:	d10e      	bne.n	80093b4 <_dtoa_r+0x6bc>
 8009396:	9902      	ldr	r1, [sp, #8]
 8009398:	4648      	mov	r0, r9
 800939a:	f000 fbbd 	bl	8009b18 <_Bfree>
 800939e:	2300      	movs	r3, #0
 80093a0:	7033      	strb	r3, [r6, #0]
 80093a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80093a4:	3701      	adds	r7, #1
 80093a6:	601f      	str	r7, [r3, #0]
 80093a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 824b 	beq.w	8009846 <_dtoa_r+0xb4e>
 80093b0:	601e      	str	r6, [r3, #0]
 80093b2:	e248      	b.n	8009846 <_dtoa_r+0xb4e>
 80093b4:	46b8      	mov	r8, r7
 80093b6:	4633      	mov	r3, r6
 80093b8:	461e      	mov	r6, r3
 80093ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093be:	2a39      	cmp	r2, #57	@ 0x39
 80093c0:	d106      	bne.n	80093d0 <_dtoa_r+0x6d8>
 80093c2:	459a      	cmp	sl, r3
 80093c4:	d1f8      	bne.n	80093b8 <_dtoa_r+0x6c0>
 80093c6:	2230      	movs	r2, #48	@ 0x30
 80093c8:	f108 0801 	add.w	r8, r8, #1
 80093cc:	f88a 2000 	strb.w	r2, [sl]
 80093d0:	781a      	ldrb	r2, [r3, #0]
 80093d2:	3201      	adds	r2, #1
 80093d4:	701a      	strb	r2, [r3, #0]
 80093d6:	e7a0      	b.n	800931a <_dtoa_r+0x622>
 80093d8:	4b6f      	ldr	r3, [pc, #444]	@ (8009598 <_dtoa_r+0x8a0>)
 80093da:	2200      	movs	r2, #0
 80093dc:	f7f7 f924 	bl	8000628 <__aeabi_dmul>
 80093e0:	2200      	movs	r2, #0
 80093e2:	2300      	movs	r3, #0
 80093e4:	4604      	mov	r4, r0
 80093e6:	460d      	mov	r5, r1
 80093e8:	f7f7 fb86 	bl	8000af8 <__aeabi_dcmpeq>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d09f      	beq.n	8009330 <_dtoa_r+0x638>
 80093f0:	e7d1      	b.n	8009396 <_dtoa_r+0x69e>
 80093f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	f000 80ea 	beq.w	80095ce <_dtoa_r+0x8d6>
 80093fa:	9a07      	ldr	r2, [sp, #28]
 80093fc:	2a01      	cmp	r2, #1
 80093fe:	f300 80cd 	bgt.w	800959c <_dtoa_r+0x8a4>
 8009402:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009404:	2a00      	cmp	r2, #0
 8009406:	f000 80c1 	beq.w	800958c <_dtoa_r+0x894>
 800940a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800940e:	9c08      	ldr	r4, [sp, #32]
 8009410:	9e00      	ldr	r6, [sp, #0]
 8009412:	9a00      	ldr	r2, [sp, #0]
 8009414:	441a      	add	r2, r3
 8009416:	9200      	str	r2, [sp, #0]
 8009418:	9a06      	ldr	r2, [sp, #24]
 800941a:	2101      	movs	r1, #1
 800941c:	441a      	add	r2, r3
 800941e:	4648      	mov	r0, r9
 8009420:	9206      	str	r2, [sp, #24]
 8009422:	f000 fc77 	bl	8009d14 <__i2b>
 8009426:	4605      	mov	r5, r0
 8009428:	b166      	cbz	r6, 8009444 <_dtoa_r+0x74c>
 800942a:	9b06      	ldr	r3, [sp, #24]
 800942c:	2b00      	cmp	r3, #0
 800942e:	dd09      	ble.n	8009444 <_dtoa_r+0x74c>
 8009430:	42b3      	cmp	r3, r6
 8009432:	9a00      	ldr	r2, [sp, #0]
 8009434:	bfa8      	it	ge
 8009436:	4633      	movge	r3, r6
 8009438:	1ad2      	subs	r2, r2, r3
 800943a:	9200      	str	r2, [sp, #0]
 800943c:	9a06      	ldr	r2, [sp, #24]
 800943e:	1af6      	subs	r6, r6, r3
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	9306      	str	r3, [sp, #24]
 8009444:	9b08      	ldr	r3, [sp, #32]
 8009446:	b30b      	cbz	r3, 800948c <_dtoa_r+0x794>
 8009448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 80c6 	beq.w	80095dc <_dtoa_r+0x8e4>
 8009450:	2c00      	cmp	r4, #0
 8009452:	f000 80c0 	beq.w	80095d6 <_dtoa_r+0x8de>
 8009456:	4629      	mov	r1, r5
 8009458:	4622      	mov	r2, r4
 800945a:	4648      	mov	r0, r9
 800945c:	f000 fd12 	bl	8009e84 <__pow5mult>
 8009460:	9a02      	ldr	r2, [sp, #8]
 8009462:	4601      	mov	r1, r0
 8009464:	4605      	mov	r5, r0
 8009466:	4648      	mov	r0, r9
 8009468:	f000 fc6a 	bl	8009d40 <__multiply>
 800946c:	9902      	ldr	r1, [sp, #8]
 800946e:	4680      	mov	r8, r0
 8009470:	4648      	mov	r0, r9
 8009472:	f000 fb51 	bl	8009b18 <_Bfree>
 8009476:	9b08      	ldr	r3, [sp, #32]
 8009478:	1b1b      	subs	r3, r3, r4
 800947a:	9308      	str	r3, [sp, #32]
 800947c:	f000 80b1 	beq.w	80095e2 <_dtoa_r+0x8ea>
 8009480:	9a08      	ldr	r2, [sp, #32]
 8009482:	4641      	mov	r1, r8
 8009484:	4648      	mov	r0, r9
 8009486:	f000 fcfd 	bl	8009e84 <__pow5mult>
 800948a:	9002      	str	r0, [sp, #8]
 800948c:	2101      	movs	r1, #1
 800948e:	4648      	mov	r0, r9
 8009490:	f000 fc40 	bl	8009d14 <__i2b>
 8009494:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009496:	4604      	mov	r4, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 81d8 	beq.w	800984e <_dtoa_r+0xb56>
 800949e:	461a      	mov	r2, r3
 80094a0:	4601      	mov	r1, r0
 80094a2:	4648      	mov	r0, r9
 80094a4:	f000 fcee 	bl	8009e84 <__pow5mult>
 80094a8:	9b07      	ldr	r3, [sp, #28]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	4604      	mov	r4, r0
 80094ae:	f300 809f 	bgt.w	80095f0 <_dtoa_r+0x8f8>
 80094b2:	9b04      	ldr	r3, [sp, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f040 8097 	bne.w	80095e8 <_dtoa_r+0x8f0>
 80094ba:	9b05      	ldr	r3, [sp, #20]
 80094bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f040 8093 	bne.w	80095ec <_dtoa_r+0x8f4>
 80094c6:	9b05      	ldr	r3, [sp, #20]
 80094c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094cc:	0d1b      	lsrs	r3, r3, #20
 80094ce:	051b      	lsls	r3, r3, #20
 80094d0:	b133      	cbz	r3, 80094e0 <_dtoa_r+0x7e8>
 80094d2:	9b00      	ldr	r3, [sp, #0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	9b06      	ldr	r3, [sp, #24]
 80094da:	3301      	adds	r3, #1
 80094dc:	9306      	str	r3, [sp, #24]
 80094de:	2301      	movs	r3, #1
 80094e0:	9308      	str	r3, [sp, #32]
 80094e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 81b8 	beq.w	800985a <_dtoa_r+0xb62>
 80094ea:	6923      	ldr	r3, [r4, #16]
 80094ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80094f0:	6918      	ldr	r0, [r3, #16]
 80094f2:	f000 fbc3 	bl	8009c7c <__hi0bits>
 80094f6:	f1c0 0020 	rsb	r0, r0, #32
 80094fa:	9b06      	ldr	r3, [sp, #24]
 80094fc:	4418      	add	r0, r3
 80094fe:	f010 001f 	ands.w	r0, r0, #31
 8009502:	f000 8082 	beq.w	800960a <_dtoa_r+0x912>
 8009506:	f1c0 0320 	rsb	r3, r0, #32
 800950a:	2b04      	cmp	r3, #4
 800950c:	dd73      	ble.n	80095f6 <_dtoa_r+0x8fe>
 800950e:	9b00      	ldr	r3, [sp, #0]
 8009510:	f1c0 001c 	rsb	r0, r0, #28
 8009514:	4403      	add	r3, r0
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	9b06      	ldr	r3, [sp, #24]
 800951a:	4403      	add	r3, r0
 800951c:	4406      	add	r6, r0
 800951e:	9306      	str	r3, [sp, #24]
 8009520:	9b00      	ldr	r3, [sp, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	dd05      	ble.n	8009532 <_dtoa_r+0x83a>
 8009526:	9902      	ldr	r1, [sp, #8]
 8009528:	461a      	mov	r2, r3
 800952a:	4648      	mov	r0, r9
 800952c:	f000 fd04 	bl	8009f38 <__lshift>
 8009530:	9002      	str	r0, [sp, #8]
 8009532:	9b06      	ldr	r3, [sp, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	dd05      	ble.n	8009544 <_dtoa_r+0x84c>
 8009538:	4621      	mov	r1, r4
 800953a:	461a      	mov	r2, r3
 800953c:	4648      	mov	r0, r9
 800953e:	f000 fcfb 	bl	8009f38 <__lshift>
 8009542:	4604      	mov	r4, r0
 8009544:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009546:	2b00      	cmp	r3, #0
 8009548:	d061      	beq.n	800960e <_dtoa_r+0x916>
 800954a:	9802      	ldr	r0, [sp, #8]
 800954c:	4621      	mov	r1, r4
 800954e:	f000 fd5f 	bl	800a010 <__mcmp>
 8009552:	2800      	cmp	r0, #0
 8009554:	da5b      	bge.n	800960e <_dtoa_r+0x916>
 8009556:	2300      	movs	r3, #0
 8009558:	9902      	ldr	r1, [sp, #8]
 800955a:	220a      	movs	r2, #10
 800955c:	4648      	mov	r0, r9
 800955e:	f000 fafd 	bl	8009b5c <__multadd>
 8009562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009564:	9002      	str	r0, [sp, #8]
 8009566:	f107 38ff 	add.w	r8, r7, #4294967295
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 8177 	beq.w	800985e <_dtoa_r+0xb66>
 8009570:	4629      	mov	r1, r5
 8009572:	2300      	movs	r3, #0
 8009574:	220a      	movs	r2, #10
 8009576:	4648      	mov	r0, r9
 8009578:	f000 faf0 	bl	8009b5c <__multadd>
 800957c:	f1bb 0f00 	cmp.w	fp, #0
 8009580:	4605      	mov	r5, r0
 8009582:	dc6f      	bgt.n	8009664 <_dtoa_r+0x96c>
 8009584:	9b07      	ldr	r3, [sp, #28]
 8009586:	2b02      	cmp	r3, #2
 8009588:	dc49      	bgt.n	800961e <_dtoa_r+0x926>
 800958a:	e06b      	b.n	8009664 <_dtoa_r+0x96c>
 800958c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800958e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009592:	e73c      	b.n	800940e <_dtoa_r+0x716>
 8009594:	3fe00000 	.word	0x3fe00000
 8009598:	40240000 	.word	0x40240000
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	1e5c      	subs	r4, r3, #1
 80095a0:	9b08      	ldr	r3, [sp, #32]
 80095a2:	42a3      	cmp	r3, r4
 80095a4:	db09      	blt.n	80095ba <_dtoa_r+0x8c2>
 80095a6:	1b1c      	subs	r4, r3, r4
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f6bf af30 	bge.w	8009410 <_dtoa_r+0x718>
 80095b0:	9b00      	ldr	r3, [sp, #0]
 80095b2:	9a03      	ldr	r2, [sp, #12]
 80095b4:	1a9e      	subs	r6, r3, r2
 80095b6:	2300      	movs	r3, #0
 80095b8:	e72b      	b.n	8009412 <_dtoa_r+0x71a>
 80095ba:	9b08      	ldr	r3, [sp, #32]
 80095bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095be:	9408      	str	r4, [sp, #32]
 80095c0:	1ae3      	subs	r3, r4, r3
 80095c2:	441a      	add	r2, r3
 80095c4:	9e00      	ldr	r6, [sp, #0]
 80095c6:	9b03      	ldr	r3, [sp, #12]
 80095c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80095ca:	2400      	movs	r4, #0
 80095cc:	e721      	b.n	8009412 <_dtoa_r+0x71a>
 80095ce:	9c08      	ldr	r4, [sp, #32]
 80095d0:	9e00      	ldr	r6, [sp, #0]
 80095d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80095d4:	e728      	b.n	8009428 <_dtoa_r+0x730>
 80095d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80095da:	e751      	b.n	8009480 <_dtoa_r+0x788>
 80095dc:	9a08      	ldr	r2, [sp, #32]
 80095de:	9902      	ldr	r1, [sp, #8]
 80095e0:	e750      	b.n	8009484 <_dtoa_r+0x78c>
 80095e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80095e6:	e751      	b.n	800948c <_dtoa_r+0x794>
 80095e8:	2300      	movs	r3, #0
 80095ea:	e779      	b.n	80094e0 <_dtoa_r+0x7e8>
 80095ec:	9b04      	ldr	r3, [sp, #16]
 80095ee:	e777      	b.n	80094e0 <_dtoa_r+0x7e8>
 80095f0:	2300      	movs	r3, #0
 80095f2:	9308      	str	r3, [sp, #32]
 80095f4:	e779      	b.n	80094ea <_dtoa_r+0x7f2>
 80095f6:	d093      	beq.n	8009520 <_dtoa_r+0x828>
 80095f8:	9a00      	ldr	r2, [sp, #0]
 80095fa:	331c      	adds	r3, #28
 80095fc:	441a      	add	r2, r3
 80095fe:	9200      	str	r2, [sp, #0]
 8009600:	9a06      	ldr	r2, [sp, #24]
 8009602:	441a      	add	r2, r3
 8009604:	441e      	add	r6, r3
 8009606:	9206      	str	r2, [sp, #24]
 8009608:	e78a      	b.n	8009520 <_dtoa_r+0x828>
 800960a:	4603      	mov	r3, r0
 800960c:	e7f4      	b.n	80095f8 <_dtoa_r+0x900>
 800960e:	9b03      	ldr	r3, [sp, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	46b8      	mov	r8, r7
 8009614:	dc20      	bgt.n	8009658 <_dtoa_r+0x960>
 8009616:	469b      	mov	fp, r3
 8009618:	9b07      	ldr	r3, [sp, #28]
 800961a:	2b02      	cmp	r3, #2
 800961c:	dd1e      	ble.n	800965c <_dtoa_r+0x964>
 800961e:	f1bb 0f00 	cmp.w	fp, #0
 8009622:	f47f adb1 	bne.w	8009188 <_dtoa_r+0x490>
 8009626:	4621      	mov	r1, r4
 8009628:	465b      	mov	r3, fp
 800962a:	2205      	movs	r2, #5
 800962c:	4648      	mov	r0, r9
 800962e:	f000 fa95 	bl	8009b5c <__multadd>
 8009632:	4601      	mov	r1, r0
 8009634:	4604      	mov	r4, r0
 8009636:	9802      	ldr	r0, [sp, #8]
 8009638:	f000 fcea 	bl	800a010 <__mcmp>
 800963c:	2800      	cmp	r0, #0
 800963e:	f77f ada3 	ble.w	8009188 <_dtoa_r+0x490>
 8009642:	4656      	mov	r6, sl
 8009644:	2331      	movs	r3, #49	@ 0x31
 8009646:	f806 3b01 	strb.w	r3, [r6], #1
 800964a:	f108 0801 	add.w	r8, r8, #1
 800964e:	e59f      	b.n	8009190 <_dtoa_r+0x498>
 8009650:	9c03      	ldr	r4, [sp, #12]
 8009652:	46b8      	mov	r8, r7
 8009654:	4625      	mov	r5, r4
 8009656:	e7f4      	b.n	8009642 <_dtoa_r+0x94a>
 8009658:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800965c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800965e:	2b00      	cmp	r3, #0
 8009660:	f000 8101 	beq.w	8009866 <_dtoa_r+0xb6e>
 8009664:	2e00      	cmp	r6, #0
 8009666:	dd05      	ble.n	8009674 <_dtoa_r+0x97c>
 8009668:	4629      	mov	r1, r5
 800966a:	4632      	mov	r2, r6
 800966c:	4648      	mov	r0, r9
 800966e:	f000 fc63 	bl	8009f38 <__lshift>
 8009672:	4605      	mov	r5, r0
 8009674:	9b08      	ldr	r3, [sp, #32]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d05c      	beq.n	8009734 <_dtoa_r+0xa3c>
 800967a:	6869      	ldr	r1, [r5, #4]
 800967c:	4648      	mov	r0, r9
 800967e:	f000 fa0b 	bl	8009a98 <_Balloc>
 8009682:	4606      	mov	r6, r0
 8009684:	b928      	cbnz	r0, 8009692 <_dtoa_r+0x99a>
 8009686:	4b82      	ldr	r3, [pc, #520]	@ (8009890 <_dtoa_r+0xb98>)
 8009688:	4602      	mov	r2, r0
 800968a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800968e:	f7ff bb4a 	b.w	8008d26 <_dtoa_r+0x2e>
 8009692:	692a      	ldr	r2, [r5, #16]
 8009694:	3202      	adds	r2, #2
 8009696:	0092      	lsls	r2, r2, #2
 8009698:	f105 010c 	add.w	r1, r5, #12
 800969c:	300c      	adds	r0, #12
 800969e:	f7ff fa8e 	bl	8008bbe <memcpy>
 80096a2:	2201      	movs	r2, #1
 80096a4:	4631      	mov	r1, r6
 80096a6:	4648      	mov	r0, r9
 80096a8:	f000 fc46 	bl	8009f38 <__lshift>
 80096ac:	f10a 0301 	add.w	r3, sl, #1
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	eb0a 030b 	add.w	r3, sl, fp
 80096b6:	9308      	str	r3, [sp, #32]
 80096b8:	9b04      	ldr	r3, [sp, #16]
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	462f      	mov	r7, r5
 80096c0:	9306      	str	r3, [sp, #24]
 80096c2:	4605      	mov	r5, r0
 80096c4:	9b00      	ldr	r3, [sp, #0]
 80096c6:	9802      	ldr	r0, [sp, #8]
 80096c8:	4621      	mov	r1, r4
 80096ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80096ce:	f7ff fa8b 	bl	8008be8 <quorem>
 80096d2:	4603      	mov	r3, r0
 80096d4:	3330      	adds	r3, #48	@ 0x30
 80096d6:	9003      	str	r0, [sp, #12]
 80096d8:	4639      	mov	r1, r7
 80096da:	9802      	ldr	r0, [sp, #8]
 80096dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096de:	f000 fc97 	bl	800a010 <__mcmp>
 80096e2:	462a      	mov	r2, r5
 80096e4:	9004      	str	r0, [sp, #16]
 80096e6:	4621      	mov	r1, r4
 80096e8:	4648      	mov	r0, r9
 80096ea:	f000 fcad 	bl	800a048 <__mdiff>
 80096ee:	68c2      	ldr	r2, [r0, #12]
 80096f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f2:	4606      	mov	r6, r0
 80096f4:	bb02      	cbnz	r2, 8009738 <_dtoa_r+0xa40>
 80096f6:	4601      	mov	r1, r0
 80096f8:	9802      	ldr	r0, [sp, #8]
 80096fa:	f000 fc89 	bl	800a010 <__mcmp>
 80096fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009700:	4602      	mov	r2, r0
 8009702:	4631      	mov	r1, r6
 8009704:	4648      	mov	r0, r9
 8009706:	920c      	str	r2, [sp, #48]	@ 0x30
 8009708:	9309      	str	r3, [sp, #36]	@ 0x24
 800970a:	f000 fa05 	bl	8009b18 <_Bfree>
 800970e:	9b07      	ldr	r3, [sp, #28]
 8009710:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009712:	9e00      	ldr	r6, [sp, #0]
 8009714:	ea42 0103 	orr.w	r1, r2, r3
 8009718:	9b06      	ldr	r3, [sp, #24]
 800971a:	4319      	orrs	r1, r3
 800971c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800971e:	d10d      	bne.n	800973c <_dtoa_r+0xa44>
 8009720:	2b39      	cmp	r3, #57	@ 0x39
 8009722:	d027      	beq.n	8009774 <_dtoa_r+0xa7c>
 8009724:	9a04      	ldr	r2, [sp, #16]
 8009726:	2a00      	cmp	r2, #0
 8009728:	dd01      	ble.n	800972e <_dtoa_r+0xa36>
 800972a:	9b03      	ldr	r3, [sp, #12]
 800972c:	3331      	adds	r3, #49	@ 0x31
 800972e:	f88b 3000 	strb.w	r3, [fp]
 8009732:	e52e      	b.n	8009192 <_dtoa_r+0x49a>
 8009734:	4628      	mov	r0, r5
 8009736:	e7b9      	b.n	80096ac <_dtoa_r+0x9b4>
 8009738:	2201      	movs	r2, #1
 800973a:	e7e2      	b.n	8009702 <_dtoa_r+0xa0a>
 800973c:	9904      	ldr	r1, [sp, #16]
 800973e:	2900      	cmp	r1, #0
 8009740:	db04      	blt.n	800974c <_dtoa_r+0xa54>
 8009742:	9807      	ldr	r0, [sp, #28]
 8009744:	4301      	orrs	r1, r0
 8009746:	9806      	ldr	r0, [sp, #24]
 8009748:	4301      	orrs	r1, r0
 800974a:	d120      	bne.n	800978e <_dtoa_r+0xa96>
 800974c:	2a00      	cmp	r2, #0
 800974e:	ddee      	ble.n	800972e <_dtoa_r+0xa36>
 8009750:	9902      	ldr	r1, [sp, #8]
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	2201      	movs	r2, #1
 8009756:	4648      	mov	r0, r9
 8009758:	f000 fbee 	bl	8009f38 <__lshift>
 800975c:	4621      	mov	r1, r4
 800975e:	9002      	str	r0, [sp, #8]
 8009760:	f000 fc56 	bl	800a010 <__mcmp>
 8009764:	2800      	cmp	r0, #0
 8009766:	9b00      	ldr	r3, [sp, #0]
 8009768:	dc02      	bgt.n	8009770 <_dtoa_r+0xa78>
 800976a:	d1e0      	bne.n	800972e <_dtoa_r+0xa36>
 800976c:	07da      	lsls	r2, r3, #31
 800976e:	d5de      	bpl.n	800972e <_dtoa_r+0xa36>
 8009770:	2b39      	cmp	r3, #57	@ 0x39
 8009772:	d1da      	bne.n	800972a <_dtoa_r+0xa32>
 8009774:	2339      	movs	r3, #57	@ 0x39
 8009776:	f88b 3000 	strb.w	r3, [fp]
 800977a:	4633      	mov	r3, r6
 800977c:	461e      	mov	r6, r3
 800977e:	3b01      	subs	r3, #1
 8009780:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009784:	2a39      	cmp	r2, #57	@ 0x39
 8009786:	d04e      	beq.n	8009826 <_dtoa_r+0xb2e>
 8009788:	3201      	adds	r2, #1
 800978a:	701a      	strb	r2, [r3, #0]
 800978c:	e501      	b.n	8009192 <_dtoa_r+0x49a>
 800978e:	2a00      	cmp	r2, #0
 8009790:	dd03      	ble.n	800979a <_dtoa_r+0xaa2>
 8009792:	2b39      	cmp	r3, #57	@ 0x39
 8009794:	d0ee      	beq.n	8009774 <_dtoa_r+0xa7c>
 8009796:	3301      	adds	r3, #1
 8009798:	e7c9      	b.n	800972e <_dtoa_r+0xa36>
 800979a:	9a00      	ldr	r2, [sp, #0]
 800979c:	9908      	ldr	r1, [sp, #32]
 800979e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80097a2:	428a      	cmp	r2, r1
 80097a4:	d028      	beq.n	80097f8 <_dtoa_r+0xb00>
 80097a6:	9902      	ldr	r1, [sp, #8]
 80097a8:	2300      	movs	r3, #0
 80097aa:	220a      	movs	r2, #10
 80097ac:	4648      	mov	r0, r9
 80097ae:	f000 f9d5 	bl	8009b5c <__multadd>
 80097b2:	42af      	cmp	r7, r5
 80097b4:	9002      	str	r0, [sp, #8]
 80097b6:	f04f 0300 	mov.w	r3, #0
 80097ba:	f04f 020a 	mov.w	r2, #10
 80097be:	4639      	mov	r1, r7
 80097c0:	4648      	mov	r0, r9
 80097c2:	d107      	bne.n	80097d4 <_dtoa_r+0xadc>
 80097c4:	f000 f9ca 	bl	8009b5c <__multadd>
 80097c8:	4607      	mov	r7, r0
 80097ca:	4605      	mov	r5, r0
 80097cc:	9b00      	ldr	r3, [sp, #0]
 80097ce:	3301      	adds	r3, #1
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	e777      	b.n	80096c4 <_dtoa_r+0x9cc>
 80097d4:	f000 f9c2 	bl	8009b5c <__multadd>
 80097d8:	4629      	mov	r1, r5
 80097da:	4607      	mov	r7, r0
 80097dc:	2300      	movs	r3, #0
 80097de:	220a      	movs	r2, #10
 80097e0:	4648      	mov	r0, r9
 80097e2:	f000 f9bb 	bl	8009b5c <__multadd>
 80097e6:	4605      	mov	r5, r0
 80097e8:	e7f0      	b.n	80097cc <_dtoa_r+0xad4>
 80097ea:	f1bb 0f00 	cmp.w	fp, #0
 80097ee:	bfcc      	ite	gt
 80097f0:	465e      	movgt	r6, fp
 80097f2:	2601      	movle	r6, #1
 80097f4:	4456      	add	r6, sl
 80097f6:	2700      	movs	r7, #0
 80097f8:	9902      	ldr	r1, [sp, #8]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	2201      	movs	r2, #1
 80097fe:	4648      	mov	r0, r9
 8009800:	f000 fb9a 	bl	8009f38 <__lshift>
 8009804:	4621      	mov	r1, r4
 8009806:	9002      	str	r0, [sp, #8]
 8009808:	f000 fc02 	bl	800a010 <__mcmp>
 800980c:	2800      	cmp	r0, #0
 800980e:	dcb4      	bgt.n	800977a <_dtoa_r+0xa82>
 8009810:	d102      	bne.n	8009818 <_dtoa_r+0xb20>
 8009812:	9b00      	ldr	r3, [sp, #0]
 8009814:	07db      	lsls	r3, r3, #31
 8009816:	d4b0      	bmi.n	800977a <_dtoa_r+0xa82>
 8009818:	4633      	mov	r3, r6
 800981a:	461e      	mov	r6, r3
 800981c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009820:	2a30      	cmp	r2, #48	@ 0x30
 8009822:	d0fa      	beq.n	800981a <_dtoa_r+0xb22>
 8009824:	e4b5      	b.n	8009192 <_dtoa_r+0x49a>
 8009826:	459a      	cmp	sl, r3
 8009828:	d1a8      	bne.n	800977c <_dtoa_r+0xa84>
 800982a:	2331      	movs	r3, #49	@ 0x31
 800982c:	f108 0801 	add.w	r8, r8, #1
 8009830:	f88a 3000 	strb.w	r3, [sl]
 8009834:	e4ad      	b.n	8009192 <_dtoa_r+0x49a>
 8009836:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009838:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009894 <_dtoa_r+0xb9c>
 800983c:	b11b      	cbz	r3, 8009846 <_dtoa_r+0xb4e>
 800983e:	f10a 0308 	add.w	r3, sl, #8
 8009842:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009844:	6013      	str	r3, [r2, #0]
 8009846:	4650      	mov	r0, sl
 8009848:	b017      	add	sp, #92	@ 0x5c
 800984a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984e:	9b07      	ldr	r3, [sp, #28]
 8009850:	2b01      	cmp	r3, #1
 8009852:	f77f ae2e 	ble.w	80094b2 <_dtoa_r+0x7ba>
 8009856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009858:	9308      	str	r3, [sp, #32]
 800985a:	2001      	movs	r0, #1
 800985c:	e64d      	b.n	80094fa <_dtoa_r+0x802>
 800985e:	f1bb 0f00 	cmp.w	fp, #0
 8009862:	f77f aed9 	ble.w	8009618 <_dtoa_r+0x920>
 8009866:	4656      	mov	r6, sl
 8009868:	9802      	ldr	r0, [sp, #8]
 800986a:	4621      	mov	r1, r4
 800986c:	f7ff f9bc 	bl	8008be8 <quorem>
 8009870:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009874:	f806 3b01 	strb.w	r3, [r6], #1
 8009878:	eba6 020a 	sub.w	r2, r6, sl
 800987c:	4593      	cmp	fp, r2
 800987e:	ddb4      	ble.n	80097ea <_dtoa_r+0xaf2>
 8009880:	9902      	ldr	r1, [sp, #8]
 8009882:	2300      	movs	r3, #0
 8009884:	220a      	movs	r2, #10
 8009886:	4648      	mov	r0, r9
 8009888:	f000 f968 	bl	8009b5c <__multadd>
 800988c:	9002      	str	r0, [sp, #8]
 800988e:	e7eb      	b.n	8009868 <_dtoa_r+0xb70>
 8009890:	0800c8ad 	.word	0x0800c8ad
 8009894:	0800c831 	.word	0x0800c831

08009898 <_free_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4605      	mov	r5, r0
 800989c:	2900      	cmp	r1, #0
 800989e:	d041      	beq.n	8009924 <_free_r+0x8c>
 80098a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a4:	1f0c      	subs	r4, r1, #4
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bfb8      	it	lt
 80098aa:	18e4      	addlt	r4, r4, r3
 80098ac:	f000 f8e8 	bl	8009a80 <__malloc_lock>
 80098b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009928 <_free_r+0x90>)
 80098b2:	6813      	ldr	r3, [r2, #0]
 80098b4:	b933      	cbnz	r3, 80098c4 <_free_r+0x2c>
 80098b6:	6063      	str	r3, [r4, #4]
 80098b8:	6014      	str	r4, [r2, #0]
 80098ba:	4628      	mov	r0, r5
 80098bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098c0:	f000 b8e4 	b.w	8009a8c <__malloc_unlock>
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	d908      	bls.n	80098da <_free_r+0x42>
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	1821      	adds	r1, r4, r0
 80098cc:	428b      	cmp	r3, r1
 80098ce:	bf01      	itttt	eq
 80098d0:	6819      	ldreq	r1, [r3, #0]
 80098d2:	685b      	ldreq	r3, [r3, #4]
 80098d4:	1809      	addeq	r1, r1, r0
 80098d6:	6021      	streq	r1, [r4, #0]
 80098d8:	e7ed      	b.n	80098b6 <_free_r+0x1e>
 80098da:	461a      	mov	r2, r3
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	b10b      	cbz	r3, 80098e4 <_free_r+0x4c>
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	d9fa      	bls.n	80098da <_free_r+0x42>
 80098e4:	6811      	ldr	r1, [r2, #0]
 80098e6:	1850      	adds	r0, r2, r1
 80098e8:	42a0      	cmp	r0, r4
 80098ea:	d10b      	bne.n	8009904 <_free_r+0x6c>
 80098ec:	6820      	ldr	r0, [r4, #0]
 80098ee:	4401      	add	r1, r0
 80098f0:	1850      	adds	r0, r2, r1
 80098f2:	4283      	cmp	r3, r0
 80098f4:	6011      	str	r1, [r2, #0]
 80098f6:	d1e0      	bne.n	80098ba <_free_r+0x22>
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	6053      	str	r3, [r2, #4]
 80098fe:	4408      	add	r0, r1
 8009900:	6010      	str	r0, [r2, #0]
 8009902:	e7da      	b.n	80098ba <_free_r+0x22>
 8009904:	d902      	bls.n	800990c <_free_r+0x74>
 8009906:	230c      	movs	r3, #12
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	e7d6      	b.n	80098ba <_free_r+0x22>
 800990c:	6820      	ldr	r0, [r4, #0]
 800990e:	1821      	adds	r1, r4, r0
 8009910:	428b      	cmp	r3, r1
 8009912:	bf04      	itt	eq
 8009914:	6819      	ldreq	r1, [r3, #0]
 8009916:	685b      	ldreq	r3, [r3, #4]
 8009918:	6063      	str	r3, [r4, #4]
 800991a:	bf04      	itt	eq
 800991c:	1809      	addeq	r1, r1, r0
 800991e:	6021      	streq	r1, [r4, #0]
 8009920:	6054      	str	r4, [r2, #4]
 8009922:	e7ca      	b.n	80098ba <_free_r+0x22>
 8009924:	bd38      	pop	{r3, r4, r5, pc}
 8009926:	bf00      	nop
 8009928:	20006254 	.word	0x20006254

0800992c <malloc>:
 800992c:	4b02      	ldr	r3, [pc, #8]	@ (8009938 <malloc+0xc>)
 800992e:	4601      	mov	r1, r0
 8009930:	6818      	ldr	r0, [r3, #0]
 8009932:	f000 b825 	b.w	8009980 <_malloc_r>
 8009936:	bf00      	nop
 8009938:	2000001c 	.word	0x2000001c

0800993c <sbrk_aligned>:
 800993c:	b570      	push	{r4, r5, r6, lr}
 800993e:	4e0f      	ldr	r6, [pc, #60]	@ (800997c <sbrk_aligned+0x40>)
 8009940:	460c      	mov	r4, r1
 8009942:	6831      	ldr	r1, [r6, #0]
 8009944:	4605      	mov	r5, r0
 8009946:	b911      	cbnz	r1, 800994e <sbrk_aligned+0x12>
 8009948:	f001 ffda 	bl	800b900 <_sbrk_r>
 800994c:	6030      	str	r0, [r6, #0]
 800994e:	4621      	mov	r1, r4
 8009950:	4628      	mov	r0, r5
 8009952:	f001 ffd5 	bl	800b900 <_sbrk_r>
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	d103      	bne.n	8009962 <sbrk_aligned+0x26>
 800995a:	f04f 34ff 	mov.w	r4, #4294967295
 800995e:	4620      	mov	r0, r4
 8009960:	bd70      	pop	{r4, r5, r6, pc}
 8009962:	1cc4      	adds	r4, r0, #3
 8009964:	f024 0403 	bic.w	r4, r4, #3
 8009968:	42a0      	cmp	r0, r4
 800996a:	d0f8      	beq.n	800995e <sbrk_aligned+0x22>
 800996c:	1a21      	subs	r1, r4, r0
 800996e:	4628      	mov	r0, r5
 8009970:	f001 ffc6 	bl	800b900 <_sbrk_r>
 8009974:	3001      	adds	r0, #1
 8009976:	d1f2      	bne.n	800995e <sbrk_aligned+0x22>
 8009978:	e7ef      	b.n	800995a <sbrk_aligned+0x1e>
 800997a:	bf00      	nop
 800997c:	20006250 	.word	0x20006250

08009980 <_malloc_r>:
 8009980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009984:	1ccd      	adds	r5, r1, #3
 8009986:	f025 0503 	bic.w	r5, r5, #3
 800998a:	3508      	adds	r5, #8
 800998c:	2d0c      	cmp	r5, #12
 800998e:	bf38      	it	cc
 8009990:	250c      	movcc	r5, #12
 8009992:	2d00      	cmp	r5, #0
 8009994:	4606      	mov	r6, r0
 8009996:	db01      	blt.n	800999c <_malloc_r+0x1c>
 8009998:	42a9      	cmp	r1, r5
 800999a:	d904      	bls.n	80099a6 <_malloc_r+0x26>
 800999c:	230c      	movs	r3, #12
 800999e:	6033      	str	r3, [r6, #0]
 80099a0:	2000      	movs	r0, #0
 80099a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a7c <_malloc_r+0xfc>
 80099aa:	f000 f869 	bl	8009a80 <__malloc_lock>
 80099ae:	f8d8 3000 	ldr.w	r3, [r8]
 80099b2:	461c      	mov	r4, r3
 80099b4:	bb44      	cbnz	r4, 8009a08 <_malloc_r+0x88>
 80099b6:	4629      	mov	r1, r5
 80099b8:	4630      	mov	r0, r6
 80099ba:	f7ff ffbf 	bl	800993c <sbrk_aligned>
 80099be:	1c43      	adds	r3, r0, #1
 80099c0:	4604      	mov	r4, r0
 80099c2:	d158      	bne.n	8009a76 <_malloc_r+0xf6>
 80099c4:	f8d8 4000 	ldr.w	r4, [r8]
 80099c8:	4627      	mov	r7, r4
 80099ca:	2f00      	cmp	r7, #0
 80099cc:	d143      	bne.n	8009a56 <_malloc_r+0xd6>
 80099ce:	2c00      	cmp	r4, #0
 80099d0:	d04b      	beq.n	8009a6a <_malloc_r+0xea>
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	4639      	mov	r1, r7
 80099d6:	4630      	mov	r0, r6
 80099d8:	eb04 0903 	add.w	r9, r4, r3
 80099dc:	f001 ff90 	bl	800b900 <_sbrk_r>
 80099e0:	4581      	cmp	r9, r0
 80099e2:	d142      	bne.n	8009a6a <_malloc_r+0xea>
 80099e4:	6821      	ldr	r1, [r4, #0]
 80099e6:	1a6d      	subs	r5, r5, r1
 80099e8:	4629      	mov	r1, r5
 80099ea:	4630      	mov	r0, r6
 80099ec:	f7ff ffa6 	bl	800993c <sbrk_aligned>
 80099f0:	3001      	adds	r0, #1
 80099f2:	d03a      	beq.n	8009a6a <_malloc_r+0xea>
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	442b      	add	r3, r5
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	f8d8 3000 	ldr.w	r3, [r8]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	bb62      	cbnz	r2, 8009a5c <_malloc_r+0xdc>
 8009a02:	f8c8 7000 	str.w	r7, [r8]
 8009a06:	e00f      	b.n	8009a28 <_malloc_r+0xa8>
 8009a08:	6822      	ldr	r2, [r4, #0]
 8009a0a:	1b52      	subs	r2, r2, r5
 8009a0c:	d420      	bmi.n	8009a50 <_malloc_r+0xd0>
 8009a0e:	2a0b      	cmp	r2, #11
 8009a10:	d917      	bls.n	8009a42 <_malloc_r+0xc2>
 8009a12:	1961      	adds	r1, r4, r5
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	6025      	str	r5, [r4, #0]
 8009a18:	bf18      	it	ne
 8009a1a:	6059      	strne	r1, [r3, #4]
 8009a1c:	6863      	ldr	r3, [r4, #4]
 8009a1e:	bf08      	it	eq
 8009a20:	f8c8 1000 	streq.w	r1, [r8]
 8009a24:	5162      	str	r2, [r4, r5]
 8009a26:	604b      	str	r3, [r1, #4]
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f000 f82f 	bl	8009a8c <__malloc_unlock>
 8009a2e:	f104 000b 	add.w	r0, r4, #11
 8009a32:	1d23      	adds	r3, r4, #4
 8009a34:	f020 0007 	bic.w	r0, r0, #7
 8009a38:	1ac2      	subs	r2, r0, r3
 8009a3a:	bf1c      	itt	ne
 8009a3c:	1a1b      	subne	r3, r3, r0
 8009a3e:	50a3      	strne	r3, [r4, r2]
 8009a40:	e7af      	b.n	80099a2 <_malloc_r+0x22>
 8009a42:	6862      	ldr	r2, [r4, #4]
 8009a44:	42a3      	cmp	r3, r4
 8009a46:	bf0c      	ite	eq
 8009a48:	f8c8 2000 	streq.w	r2, [r8]
 8009a4c:	605a      	strne	r2, [r3, #4]
 8009a4e:	e7eb      	b.n	8009a28 <_malloc_r+0xa8>
 8009a50:	4623      	mov	r3, r4
 8009a52:	6864      	ldr	r4, [r4, #4]
 8009a54:	e7ae      	b.n	80099b4 <_malloc_r+0x34>
 8009a56:	463c      	mov	r4, r7
 8009a58:	687f      	ldr	r7, [r7, #4]
 8009a5a:	e7b6      	b.n	80099ca <_malloc_r+0x4a>
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	42a3      	cmp	r3, r4
 8009a62:	d1fb      	bne.n	8009a5c <_malloc_r+0xdc>
 8009a64:	2300      	movs	r3, #0
 8009a66:	6053      	str	r3, [r2, #4]
 8009a68:	e7de      	b.n	8009a28 <_malloc_r+0xa8>
 8009a6a:	230c      	movs	r3, #12
 8009a6c:	6033      	str	r3, [r6, #0]
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f000 f80c 	bl	8009a8c <__malloc_unlock>
 8009a74:	e794      	b.n	80099a0 <_malloc_r+0x20>
 8009a76:	6005      	str	r5, [r0, #0]
 8009a78:	e7d6      	b.n	8009a28 <_malloc_r+0xa8>
 8009a7a:	bf00      	nop
 8009a7c:	20006254 	.word	0x20006254

08009a80 <__malloc_lock>:
 8009a80:	4801      	ldr	r0, [pc, #4]	@ (8009a88 <__malloc_lock+0x8>)
 8009a82:	f7ff b89a 	b.w	8008bba <__retarget_lock_acquire_recursive>
 8009a86:	bf00      	nop
 8009a88:	2000624c 	.word	0x2000624c

08009a8c <__malloc_unlock>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	@ (8009a94 <__malloc_unlock+0x8>)
 8009a8e:	f7ff b895 	b.w	8008bbc <__retarget_lock_release_recursive>
 8009a92:	bf00      	nop
 8009a94:	2000624c 	.word	0x2000624c

08009a98 <_Balloc>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	69c6      	ldr	r6, [r0, #28]
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	460d      	mov	r5, r1
 8009aa0:	b976      	cbnz	r6, 8009ac0 <_Balloc+0x28>
 8009aa2:	2010      	movs	r0, #16
 8009aa4:	f7ff ff42 	bl	800992c <malloc>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	61e0      	str	r0, [r4, #28]
 8009aac:	b920      	cbnz	r0, 8009ab8 <_Balloc+0x20>
 8009aae:	4b18      	ldr	r3, [pc, #96]	@ (8009b10 <_Balloc+0x78>)
 8009ab0:	4818      	ldr	r0, [pc, #96]	@ (8009b14 <_Balloc+0x7c>)
 8009ab2:	216b      	movs	r1, #107	@ 0x6b
 8009ab4:	f001 ff3c 	bl	800b930 <__assert_func>
 8009ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009abc:	6006      	str	r6, [r0, #0]
 8009abe:	60c6      	str	r6, [r0, #12]
 8009ac0:	69e6      	ldr	r6, [r4, #28]
 8009ac2:	68f3      	ldr	r3, [r6, #12]
 8009ac4:	b183      	cbz	r3, 8009ae8 <_Balloc+0x50>
 8009ac6:	69e3      	ldr	r3, [r4, #28]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ace:	b9b8      	cbnz	r0, 8009b00 <_Balloc+0x68>
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ad6:	1d72      	adds	r2, r6, #5
 8009ad8:	0092      	lsls	r2, r2, #2
 8009ada:	4620      	mov	r0, r4
 8009adc:	f001 ff46 	bl	800b96c <_calloc_r>
 8009ae0:	b160      	cbz	r0, 8009afc <_Balloc+0x64>
 8009ae2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ae6:	e00e      	b.n	8009b06 <_Balloc+0x6e>
 8009ae8:	2221      	movs	r2, #33	@ 0x21
 8009aea:	2104      	movs	r1, #4
 8009aec:	4620      	mov	r0, r4
 8009aee:	f001 ff3d 	bl	800b96c <_calloc_r>
 8009af2:	69e3      	ldr	r3, [r4, #28]
 8009af4:	60f0      	str	r0, [r6, #12]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e4      	bne.n	8009ac6 <_Balloc+0x2e>
 8009afc:	2000      	movs	r0, #0
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	6802      	ldr	r2, [r0, #0]
 8009b02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b06:	2300      	movs	r3, #0
 8009b08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b0c:	e7f7      	b.n	8009afe <_Balloc+0x66>
 8009b0e:	bf00      	nop
 8009b10:	0800c83e 	.word	0x0800c83e
 8009b14:	0800c8be 	.word	0x0800c8be

08009b18 <_Bfree>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	69c6      	ldr	r6, [r0, #28]
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	b976      	cbnz	r6, 8009b40 <_Bfree+0x28>
 8009b22:	2010      	movs	r0, #16
 8009b24:	f7ff ff02 	bl	800992c <malloc>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	61e8      	str	r0, [r5, #28]
 8009b2c:	b920      	cbnz	r0, 8009b38 <_Bfree+0x20>
 8009b2e:	4b09      	ldr	r3, [pc, #36]	@ (8009b54 <_Bfree+0x3c>)
 8009b30:	4809      	ldr	r0, [pc, #36]	@ (8009b58 <_Bfree+0x40>)
 8009b32:	218f      	movs	r1, #143	@ 0x8f
 8009b34:	f001 fefc 	bl	800b930 <__assert_func>
 8009b38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b3c:	6006      	str	r6, [r0, #0]
 8009b3e:	60c6      	str	r6, [r0, #12]
 8009b40:	b13c      	cbz	r4, 8009b52 <_Bfree+0x3a>
 8009b42:	69eb      	ldr	r3, [r5, #28]
 8009b44:	6862      	ldr	r2, [r4, #4]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b4c:	6021      	str	r1, [r4, #0]
 8009b4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	0800c83e 	.word	0x0800c83e
 8009b58:	0800c8be 	.word	0x0800c8be

08009b5c <__multadd>:
 8009b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b60:	690d      	ldr	r5, [r1, #16]
 8009b62:	4607      	mov	r7, r0
 8009b64:	460c      	mov	r4, r1
 8009b66:	461e      	mov	r6, r3
 8009b68:	f101 0c14 	add.w	ip, r1, #20
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	f8dc 3000 	ldr.w	r3, [ip]
 8009b72:	b299      	uxth	r1, r3
 8009b74:	fb02 6101 	mla	r1, r2, r1, r6
 8009b78:	0c1e      	lsrs	r6, r3, #16
 8009b7a:	0c0b      	lsrs	r3, r1, #16
 8009b7c:	fb02 3306 	mla	r3, r2, r6, r3
 8009b80:	b289      	uxth	r1, r1
 8009b82:	3001      	adds	r0, #1
 8009b84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b88:	4285      	cmp	r5, r0
 8009b8a:	f84c 1b04 	str.w	r1, [ip], #4
 8009b8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b92:	dcec      	bgt.n	8009b6e <__multadd+0x12>
 8009b94:	b30e      	cbz	r6, 8009bda <__multadd+0x7e>
 8009b96:	68a3      	ldr	r3, [r4, #8]
 8009b98:	42ab      	cmp	r3, r5
 8009b9a:	dc19      	bgt.n	8009bd0 <__multadd+0x74>
 8009b9c:	6861      	ldr	r1, [r4, #4]
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	3101      	adds	r1, #1
 8009ba2:	f7ff ff79 	bl	8009a98 <_Balloc>
 8009ba6:	4680      	mov	r8, r0
 8009ba8:	b928      	cbnz	r0, 8009bb6 <__multadd+0x5a>
 8009baa:	4602      	mov	r2, r0
 8009bac:	4b0c      	ldr	r3, [pc, #48]	@ (8009be0 <__multadd+0x84>)
 8009bae:	480d      	ldr	r0, [pc, #52]	@ (8009be4 <__multadd+0x88>)
 8009bb0:	21ba      	movs	r1, #186	@ 0xba
 8009bb2:	f001 febd 	bl	800b930 <__assert_func>
 8009bb6:	6922      	ldr	r2, [r4, #16]
 8009bb8:	3202      	adds	r2, #2
 8009bba:	f104 010c 	add.w	r1, r4, #12
 8009bbe:	0092      	lsls	r2, r2, #2
 8009bc0:	300c      	adds	r0, #12
 8009bc2:	f7fe fffc 	bl	8008bbe <memcpy>
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	4638      	mov	r0, r7
 8009bca:	f7ff ffa5 	bl	8009b18 <_Bfree>
 8009bce:	4644      	mov	r4, r8
 8009bd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bd4:	3501      	adds	r5, #1
 8009bd6:	615e      	str	r6, [r3, #20]
 8009bd8:	6125      	str	r5, [r4, #16]
 8009bda:	4620      	mov	r0, r4
 8009bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be0:	0800c8ad 	.word	0x0800c8ad
 8009be4:	0800c8be 	.word	0x0800c8be

08009be8 <__s2b>:
 8009be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bec:	460c      	mov	r4, r1
 8009bee:	4615      	mov	r5, r2
 8009bf0:	461f      	mov	r7, r3
 8009bf2:	2209      	movs	r2, #9
 8009bf4:	3308      	adds	r3, #8
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	2201      	movs	r2, #1
 8009c00:	429a      	cmp	r2, r3
 8009c02:	db09      	blt.n	8009c18 <__s2b+0x30>
 8009c04:	4630      	mov	r0, r6
 8009c06:	f7ff ff47 	bl	8009a98 <_Balloc>
 8009c0a:	b940      	cbnz	r0, 8009c1e <__s2b+0x36>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	4b19      	ldr	r3, [pc, #100]	@ (8009c74 <__s2b+0x8c>)
 8009c10:	4819      	ldr	r0, [pc, #100]	@ (8009c78 <__s2b+0x90>)
 8009c12:	21d3      	movs	r1, #211	@ 0xd3
 8009c14:	f001 fe8c 	bl	800b930 <__assert_func>
 8009c18:	0052      	lsls	r2, r2, #1
 8009c1a:	3101      	adds	r1, #1
 8009c1c:	e7f0      	b.n	8009c00 <__s2b+0x18>
 8009c1e:	9b08      	ldr	r3, [sp, #32]
 8009c20:	6143      	str	r3, [r0, #20]
 8009c22:	2d09      	cmp	r5, #9
 8009c24:	f04f 0301 	mov.w	r3, #1
 8009c28:	6103      	str	r3, [r0, #16]
 8009c2a:	dd16      	ble.n	8009c5a <__s2b+0x72>
 8009c2c:	f104 0909 	add.w	r9, r4, #9
 8009c30:	46c8      	mov	r8, r9
 8009c32:	442c      	add	r4, r5
 8009c34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c38:	4601      	mov	r1, r0
 8009c3a:	3b30      	subs	r3, #48	@ 0x30
 8009c3c:	220a      	movs	r2, #10
 8009c3e:	4630      	mov	r0, r6
 8009c40:	f7ff ff8c 	bl	8009b5c <__multadd>
 8009c44:	45a0      	cmp	r8, r4
 8009c46:	d1f5      	bne.n	8009c34 <__s2b+0x4c>
 8009c48:	f1a5 0408 	sub.w	r4, r5, #8
 8009c4c:	444c      	add	r4, r9
 8009c4e:	1b2d      	subs	r5, r5, r4
 8009c50:	1963      	adds	r3, r4, r5
 8009c52:	42bb      	cmp	r3, r7
 8009c54:	db04      	blt.n	8009c60 <__s2b+0x78>
 8009c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c5a:	340a      	adds	r4, #10
 8009c5c:	2509      	movs	r5, #9
 8009c5e:	e7f6      	b.n	8009c4e <__s2b+0x66>
 8009c60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c64:	4601      	mov	r1, r0
 8009c66:	3b30      	subs	r3, #48	@ 0x30
 8009c68:	220a      	movs	r2, #10
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f7ff ff76 	bl	8009b5c <__multadd>
 8009c70:	e7ee      	b.n	8009c50 <__s2b+0x68>
 8009c72:	bf00      	nop
 8009c74:	0800c8ad 	.word	0x0800c8ad
 8009c78:	0800c8be 	.word	0x0800c8be

08009c7c <__hi0bits>:
 8009c7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c80:	4603      	mov	r3, r0
 8009c82:	bf36      	itet	cc
 8009c84:	0403      	lslcc	r3, r0, #16
 8009c86:	2000      	movcs	r0, #0
 8009c88:	2010      	movcc	r0, #16
 8009c8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c8e:	bf3c      	itt	cc
 8009c90:	021b      	lslcc	r3, r3, #8
 8009c92:	3008      	addcc	r0, #8
 8009c94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c98:	bf3c      	itt	cc
 8009c9a:	011b      	lslcc	r3, r3, #4
 8009c9c:	3004      	addcc	r0, #4
 8009c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ca2:	bf3c      	itt	cc
 8009ca4:	009b      	lslcc	r3, r3, #2
 8009ca6:	3002      	addcc	r0, #2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	db05      	blt.n	8009cb8 <__hi0bits+0x3c>
 8009cac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009cb0:	f100 0001 	add.w	r0, r0, #1
 8009cb4:	bf08      	it	eq
 8009cb6:	2020      	moveq	r0, #32
 8009cb8:	4770      	bx	lr

08009cba <__lo0bits>:
 8009cba:	6803      	ldr	r3, [r0, #0]
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	f013 0007 	ands.w	r0, r3, #7
 8009cc2:	d00b      	beq.n	8009cdc <__lo0bits+0x22>
 8009cc4:	07d9      	lsls	r1, r3, #31
 8009cc6:	d421      	bmi.n	8009d0c <__lo0bits+0x52>
 8009cc8:	0798      	lsls	r0, r3, #30
 8009cca:	bf49      	itett	mi
 8009ccc:	085b      	lsrmi	r3, r3, #1
 8009cce:	089b      	lsrpl	r3, r3, #2
 8009cd0:	2001      	movmi	r0, #1
 8009cd2:	6013      	strmi	r3, [r2, #0]
 8009cd4:	bf5c      	itt	pl
 8009cd6:	6013      	strpl	r3, [r2, #0]
 8009cd8:	2002      	movpl	r0, #2
 8009cda:	4770      	bx	lr
 8009cdc:	b299      	uxth	r1, r3
 8009cde:	b909      	cbnz	r1, 8009ce4 <__lo0bits+0x2a>
 8009ce0:	0c1b      	lsrs	r3, r3, #16
 8009ce2:	2010      	movs	r0, #16
 8009ce4:	b2d9      	uxtb	r1, r3
 8009ce6:	b909      	cbnz	r1, 8009cec <__lo0bits+0x32>
 8009ce8:	3008      	adds	r0, #8
 8009cea:	0a1b      	lsrs	r3, r3, #8
 8009cec:	0719      	lsls	r1, r3, #28
 8009cee:	bf04      	itt	eq
 8009cf0:	091b      	lsreq	r3, r3, #4
 8009cf2:	3004      	addeq	r0, #4
 8009cf4:	0799      	lsls	r1, r3, #30
 8009cf6:	bf04      	itt	eq
 8009cf8:	089b      	lsreq	r3, r3, #2
 8009cfa:	3002      	addeq	r0, #2
 8009cfc:	07d9      	lsls	r1, r3, #31
 8009cfe:	d403      	bmi.n	8009d08 <__lo0bits+0x4e>
 8009d00:	085b      	lsrs	r3, r3, #1
 8009d02:	f100 0001 	add.w	r0, r0, #1
 8009d06:	d003      	beq.n	8009d10 <__lo0bits+0x56>
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	4770      	bx	lr
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	4770      	bx	lr
 8009d10:	2020      	movs	r0, #32
 8009d12:	4770      	bx	lr

08009d14 <__i2b>:
 8009d14:	b510      	push	{r4, lr}
 8009d16:	460c      	mov	r4, r1
 8009d18:	2101      	movs	r1, #1
 8009d1a:	f7ff febd 	bl	8009a98 <_Balloc>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	b928      	cbnz	r0, 8009d2e <__i2b+0x1a>
 8009d22:	4b05      	ldr	r3, [pc, #20]	@ (8009d38 <__i2b+0x24>)
 8009d24:	4805      	ldr	r0, [pc, #20]	@ (8009d3c <__i2b+0x28>)
 8009d26:	f240 1145 	movw	r1, #325	@ 0x145
 8009d2a:	f001 fe01 	bl	800b930 <__assert_func>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	6144      	str	r4, [r0, #20]
 8009d32:	6103      	str	r3, [r0, #16]
 8009d34:	bd10      	pop	{r4, pc}
 8009d36:	bf00      	nop
 8009d38:	0800c8ad 	.word	0x0800c8ad
 8009d3c:	0800c8be 	.word	0x0800c8be

08009d40 <__multiply>:
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	4617      	mov	r7, r2
 8009d46:	690a      	ldr	r2, [r1, #16]
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	bfa8      	it	ge
 8009d4e:	463b      	movge	r3, r7
 8009d50:	4689      	mov	r9, r1
 8009d52:	bfa4      	itt	ge
 8009d54:	460f      	movge	r7, r1
 8009d56:	4699      	movge	r9, r3
 8009d58:	693d      	ldr	r5, [r7, #16]
 8009d5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	6879      	ldr	r1, [r7, #4]
 8009d62:	eb05 060a 	add.w	r6, r5, sl
 8009d66:	42b3      	cmp	r3, r6
 8009d68:	b085      	sub	sp, #20
 8009d6a:	bfb8      	it	lt
 8009d6c:	3101      	addlt	r1, #1
 8009d6e:	f7ff fe93 	bl	8009a98 <_Balloc>
 8009d72:	b930      	cbnz	r0, 8009d82 <__multiply+0x42>
 8009d74:	4602      	mov	r2, r0
 8009d76:	4b41      	ldr	r3, [pc, #260]	@ (8009e7c <__multiply+0x13c>)
 8009d78:	4841      	ldr	r0, [pc, #260]	@ (8009e80 <__multiply+0x140>)
 8009d7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d7e:	f001 fdd7 	bl	800b930 <__assert_func>
 8009d82:	f100 0414 	add.w	r4, r0, #20
 8009d86:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009d8a:	4623      	mov	r3, r4
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	4573      	cmp	r3, lr
 8009d90:	d320      	bcc.n	8009dd4 <__multiply+0x94>
 8009d92:	f107 0814 	add.w	r8, r7, #20
 8009d96:	f109 0114 	add.w	r1, r9, #20
 8009d9a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009d9e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009da2:	9302      	str	r3, [sp, #8]
 8009da4:	1beb      	subs	r3, r5, r7
 8009da6:	3b15      	subs	r3, #21
 8009da8:	f023 0303 	bic.w	r3, r3, #3
 8009dac:	3304      	adds	r3, #4
 8009dae:	3715      	adds	r7, #21
 8009db0:	42bd      	cmp	r5, r7
 8009db2:	bf38      	it	cc
 8009db4:	2304      	movcc	r3, #4
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	9b02      	ldr	r3, [sp, #8]
 8009dba:	9103      	str	r1, [sp, #12]
 8009dbc:	428b      	cmp	r3, r1
 8009dbe:	d80c      	bhi.n	8009dda <__multiply+0x9a>
 8009dc0:	2e00      	cmp	r6, #0
 8009dc2:	dd03      	ble.n	8009dcc <__multiply+0x8c>
 8009dc4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d055      	beq.n	8009e78 <__multiply+0x138>
 8009dcc:	6106      	str	r6, [r0, #16]
 8009dce:	b005      	add	sp, #20
 8009dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd4:	f843 2b04 	str.w	r2, [r3], #4
 8009dd8:	e7d9      	b.n	8009d8e <__multiply+0x4e>
 8009dda:	f8b1 a000 	ldrh.w	sl, [r1]
 8009dde:	f1ba 0f00 	cmp.w	sl, #0
 8009de2:	d01f      	beq.n	8009e24 <__multiply+0xe4>
 8009de4:	46c4      	mov	ip, r8
 8009de6:	46a1      	mov	r9, r4
 8009de8:	2700      	movs	r7, #0
 8009dea:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009dee:	f8d9 3000 	ldr.w	r3, [r9]
 8009df2:	fa1f fb82 	uxth.w	fp, r2
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	fb0a 330b 	mla	r3, sl, fp, r3
 8009dfc:	443b      	add	r3, r7
 8009dfe:	f8d9 7000 	ldr.w	r7, [r9]
 8009e02:	0c12      	lsrs	r2, r2, #16
 8009e04:	0c3f      	lsrs	r7, r7, #16
 8009e06:	fb0a 7202 	mla	r2, sl, r2, r7
 8009e0a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e14:	4565      	cmp	r5, ip
 8009e16:	f849 3b04 	str.w	r3, [r9], #4
 8009e1a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009e1e:	d8e4      	bhi.n	8009dea <__multiply+0xaa>
 8009e20:	9b01      	ldr	r3, [sp, #4]
 8009e22:	50e7      	str	r7, [r4, r3]
 8009e24:	9b03      	ldr	r3, [sp, #12]
 8009e26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e2a:	3104      	adds	r1, #4
 8009e2c:	f1b9 0f00 	cmp.w	r9, #0
 8009e30:	d020      	beq.n	8009e74 <__multiply+0x134>
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	4647      	mov	r7, r8
 8009e36:	46a4      	mov	ip, r4
 8009e38:	f04f 0a00 	mov.w	sl, #0
 8009e3c:	f8b7 b000 	ldrh.w	fp, [r7]
 8009e40:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009e44:	fb09 220b 	mla	r2, r9, fp, r2
 8009e48:	4452      	add	r2, sl
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e50:	f84c 3b04 	str.w	r3, [ip], #4
 8009e54:	f857 3b04 	ldr.w	r3, [r7], #4
 8009e58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e5c:	f8bc 3000 	ldrh.w	r3, [ip]
 8009e60:	fb09 330a 	mla	r3, r9, sl, r3
 8009e64:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009e68:	42bd      	cmp	r5, r7
 8009e6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e6e:	d8e5      	bhi.n	8009e3c <__multiply+0xfc>
 8009e70:	9a01      	ldr	r2, [sp, #4]
 8009e72:	50a3      	str	r3, [r4, r2]
 8009e74:	3404      	adds	r4, #4
 8009e76:	e79f      	b.n	8009db8 <__multiply+0x78>
 8009e78:	3e01      	subs	r6, #1
 8009e7a:	e7a1      	b.n	8009dc0 <__multiply+0x80>
 8009e7c:	0800c8ad 	.word	0x0800c8ad
 8009e80:	0800c8be 	.word	0x0800c8be

08009e84 <__pow5mult>:
 8009e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e88:	4615      	mov	r5, r2
 8009e8a:	f012 0203 	ands.w	r2, r2, #3
 8009e8e:	4607      	mov	r7, r0
 8009e90:	460e      	mov	r6, r1
 8009e92:	d007      	beq.n	8009ea4 <__pow5mult+0x20>
 8009e94:	4c25      	ldr	r4, [pc, #148]	@ (8009f2c <__pow5mult+0xa8>)
 8009e96:	3a01      	subs	r2, #1
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e9e:	f7ff fe5d 	bl	8009b5c <__multadd>
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	10ad      	asrs	r5, r5, #2
 8009ea6:	d03d      	beq.n	8009f24 <__pow5mult+0xa0>
 8009ea8:	69fc      	ldr	r4, [r7, #28]
 8009eaa:	b97c      	cbnz	r4, 8009ecc <__pow5mult+0x48>
 8009eac:	2010      	movs	r0, #16
 8009eae:	f7ff fd3d 	bl	800992c <malloc>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	61f8      	str	r0, [r7, #28]
 8009eb6:	b928      	cbnz	r0, 8009ec4 <__pow5mult+0x40>
 8009eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8009f30 <__pow5mult+0xac>)
 8009eba:	481e      	ldr	r0, [pc, #120]	@ (8009f34 <__pow5mult+0xb0>)
 8009ebc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009ec0:	f001 fd36 	bl	800b930 <__assert_func>
 8009ec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ec8:	6004      	str	r4, [r0, #0]
 8009eca:	60c4      	str	r4, [r0, #12]
 8009ecc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ed0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ed4:	b94c      	cbnz	r4, 8009eea <__pow5mult+0x66>
 8009ed6:	f240 2171 	movw	r1, #625	@ 0x271
 8009eda:	4638      	mov	r0, r7
 8009edc:	f7ff ff1a 	bl	8009d14 <__i2b>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	6003      	str	r3, [r0, #0]
 8009eea:	f04f 0900 	mov.w	r9, #0
 8009eee:	07eb      	lsls	r3, r5, #31
 8009ef0:	d50a      	bpl.n	8009f08 <__pow5mult+0x84>
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	4622      	mov	r2, r4
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	f7ff ff22 	bl	8009d40 <__multiply>
 8009efc:	4631      	mov	r1, r6
 8009efe:	4680      	mov	r8, r0
 8009f00:	4638      	mov	r0, r7
 8009f02:	f7ff fe09 	bl	8009b18 <_Bfree>
 8009f06:	4646      	mov	r6, r8
 8009f08:	106d      	asrs	r5, r5, #1
 8009f0a:	d00b      	beq.n	8009f24 <__pow5mult+0xa0>
 8009f0c:	6820      	ldr	r0, [r4, #0]
 8009f0e:	b938      	cbnz	r0, 8009f20 <__pow5mult+0x9c>
 8009f10:	4622      	mov	r2, r4
 8009f12:	4621      	mov	r1, r4
 8009f14:	4638      	mov	r0, r7
 8009f16:	f7ff ff13 	bl	8009d40 <__multiply>
 8009f1a:	6020      	str	r0, [r4, #0]
 8009f1c:	f8c0 9000 	str.w	r9, [r0]
 8009f20:	4604      	mov	r4, r0
 8009f22:	e7e4      	b.n	8009eee <__pow5mult+0x6a>
 8009f24:	4630      	mov	r0, r6
 8009f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2a:	bf00      	nop
 8009f2c:	0800c9d0 	.word	0x0800c9d0
 8009f30:	0800c83e 	.word	0x0800c83e
 8009f34:	0800c8be 	.word	0x0800c8be

08009f38 <__lshift>:
 8009f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	6849      	ldr	r1, [r1, #4]
 8009f40:	6923      	ldr	r3, [r4, #16]
 8009f42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f46:	68a3      	ldr	r3, [r4, #8]
 8009f48:	4607      	mov	r7, r0
 8009f4a:	4691      	mov	r9, r2
 8009f4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f50:	f108 0601 	add.w	r6, r8, #1
 8009f54:	42b3      	cmp	r3, r6
 8009f56:	db0b      	blt.n	8009f70 <__lshift+0x38>
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7ff fd9d 	bl	8009a98 <_Balloc>
 8009f5e:	4605      	mov	r5, r0
 8009f60:	b948      	cbnz	r0, 8009f76 <__lshift+0x3e>
 8009f62:	4602      	mov	r2, r0
 8009f64:	4b28      	ldr	r3, [pc, #160]	@ (800a008 <__lshift+0xd0>)
 8009f66:	4829      	ldr	r0, [pc, #164]	@ (800a00c <__lshift+0xd4>)
 8009f68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f6c:	f001 fce0 	bl	800b930 <__assert_func>
 8009f70:	3101      	adds	r1, #1
 8009f72:	005b      	lsls	r3, r3, #1
 8009f74:	e7ee      	b.n	8009f54 <__lshift+0x1c>
 8009f76:	2300      	movs	r3, #0
 8009f78:	f100 0114 	add.w	r1, r0, #20
 8009f7c:	f100 0210 	add.w	r2, r0, #16
 8009f80:	4618      	mov	r0, r3
 8009f82:	4553      	cmp	r3, sl
 8009f84:	db33      	blt.n	8009fee <__lshift+0xb6>
 8009f86:	6920      	ldr	r0, [r4, #16]
 8009f88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f8c:	f104 0314 	add.w	r3, r4, #20
 8009f90:	f019 091f 	ands.w	r9, r9, #31
 8009f94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f9c:	d02b      	beq.n	8009ff6 <__lshift+0xbe>
 8009f9e:	f1c9 0e20 	rsb	lr, r9, #32
 8009fa2:	468a      	mov	sl, r1
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	6818      	ldr	r0, [r3, #0]
 8009fa8:	fa00 f009 	lsl.w	r0, r0, r9
 8009fac:	4310      	orrs	r0, r2
 8009fae:	f84a 0b04 	str.w	r0, [sl], #4
 8009fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb6:	459c      	cmp	ip, r3
 8009fb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009fbc:	d8f3      	bhi.n	8009fa6 <__lshift+0x6e>
 8009fbe:	ebac 0304 	sub.w	r3, ip, r4
 8009fc2:	3b15      	subs	r3, #21
 8009fc4:	f023 0303 	bic.w	r3, r3, #3
 8009fc8:	3304      	adds	r3, #4
 8009fca:	f104 0015 	add.w	r0, r4, #21
 8009fce:	4560      	cmp	r0, ip
 8009fd0:	bf88      	it	hi
 8009fd2:	2304      	movhi	r3, #4
 8009fd4:	50ca      	str	r2, [r1, r3]
 8009fd6:	b10a      	cbz	r2, 8009fdc <__lshift+0xa4>
 8009fd8:	f108 0602 	add.w	r6, r8, #2
 8009fdc:	3e01      	subs	r6, #1
 8009fde:	4638      	mov	r0, r7
 8009fe0:	612e      	str	r6, [r5, #16]
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	f7ff fd98 	bl	8009b18 <_Bfree>
 8009fe8:	4628      	mov	r0, r5
 8009fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fee:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	e7c5      	b.n	8009f82 <__lshift+0x4a>
 8009ff6:	3904      	subs	r1, #4
 8009ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ffc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a000:	459c      	cmp	ip, r3
 800a002:	d8f9      	bhi.n	8009ff8 <__lshift+0xc0>
 800a004:	e7ea      	b.n	8009fdc <__lshift+0xa4>
 800a006:	bf00      	nop
 800a008:	0800c8ad 	.word	0x0800c8ad
 800a00c:	0800c8be 	.word	0x0800c8be

0800a010 <__mcmp>:
 800a010:	690a      	ldr	r2, [r1, #16]
 800a012:	4603      	mov	r3, r0
 800a014:	6900      	ldr	r0, [r0, #16]
 800a016:	1a80      	subs	r0, r0, r2
 800a018:	b530      	push	{r4, r5, lr}
 800a01a:	d10e      	bne.n	800a03a <__mcmp+0x2a>
 800a01c:	3314      	adds	r3, #20
 800a01e:	3114      	adds	r1, #20
 800a020:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a024:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a028:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a02c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a030:	4295      	cmp	r5, r2
 800a032:	d003      	beq.n	800a03c <__mcmp+0x2c>
 800a034:	d205      	bcs.n	800a042 <__mcmp+0x32>
 800a036:	f04f 30ff 	mov.w	r0, #4294967295
 800a03a:	bd30      	pop	{r4, r5, pc}
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	d3f3      	bcc.n	800a028 <__mcmp+0x18>
 800a040:	e7fb      	b.n	800a03a <__mcmp+0x2a>
 800a042:	2001      	movs	r0, #1
 800a044:	e7f9      	b.n	800a03a <__mcmp+0x2a>
	...

0800a048 <__mdiff>:
 800a048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	4689      	mov	r9, r1
 800a04e:	4606      	mov	r6, r0
 800a050:	4611      	mov	r1, r2
 800a052:	4648      	mov	r0, r9
 800a054:	4614      	mov	r4, r2
 800a056:	f7ff ffdb 	bl	800a010 <__mcmp>
 800a05a:	1e05      	subs	r5, r0, #0
 800a05c:	d112      	bne.n	800a084 <__mdiff+0x3c>
 800a05e:	4629      	mov	r1, r5
 800a060:	4630      	mov	r0, r6
 800a062:	f7ff fd19 	bl	8009a98 <_Balloc>
 800a066:	4602      	mov	r2, r0
 800a068:	b928      	cbnz	r0, 800a076 <__mdiff+0x2e>
 800a06a:	4b3f      	ldr	r3, [pc, #252]	@ (800a168 <__mdiff+0x120>)
 800a06c:	f240 2137 	movw	r1, #567	@ 0x237
 800a070:	483e      	ldr	r0, [pc, #248]	@ (800a16c <__mdiff+0x124>)
 800a072:	f001 fc5d 	bl	800b930 <__assert_func>
 800a076:	2301      	movs	r3, #1
 800a078:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a07c:	4610      	mov	r0, r2
 800a07e:	b003      	add	sp, #12
 800a080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a084:	bfbc      	itt	lt
 800a086:	464b      	movlt	r3, r9
 800a088:	46a1      	movlt	r9, r4
 800a08a:	4630      	mov	r0, r6
 800a08c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a090:	bfba      	itte	lt
 800a092:	461c      	movlt	r4, r3
 800a094:	2501      	movlt	r5, #1
 800a096:	2500      	movge	r5, #0
 800a098:	f7ff fcfe 	bl	8009a98 <_Balloc>
 800a09c:	4602      	mov	r2, r0
 800a09e:	b918      	cbnz	r0, 800a0a8 <__mdiff+0x60>
 800a0a0:	4b31      	ldr	r3, [pc, #196]	@ (800a168 <__mdiff+0x120>)
 800a0a2:	f240 2145 	movw	r1, #581	@ 0x245
 800a0a6:	e7e3      	b.n	800a070 <__mdiff+0x28>
 800a0a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a0ac:	6926      	ldr	r6, [r4, #16]
 800a0ae:	60c5      	str	r5, [r0, #12]
 800a0b0:	f109 0310 	add.w	r3, r9, #16
 800a0b4:	f109 0514 	add.w	r5, r9, #20
 800a0b8:	f104 0e14 	add.w	lr, r4, #20
 800a0bc:	f100 0b14 	add.w	fp, r0, #20
 800a0c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a0c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a0c8:	9301      	str	r3, [sp, #4]
 800a0ca:	46d9      	mov	r9, fp
 800a0cc:	f04f 0c00 	mov.w	ip, #0
 800a0d0:	9b01      	ldr	r3, [sp, #4]
 800a0d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a0d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a0da:	9301      	str	r3, [sp, #4]
 800a0dc:	fa1f f38a 	uxth.w	r3, sl
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	b283      	uxth	r3, r0
 800a0e4:	1acb      	subs	r3, r1, r3
 800a0e6:	0c00      	lsrs	r0, r0, #16
 800a0e8:	4463      	add	r3, ip
 800a0ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a0ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a0f8:	4576      	cmp	r6, lr
 800a0fa:	f849 3b04 	str.w	r3, [r9], #4
 800a0fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a102:	d8e5      	bhi.n	800a0d0 <__mdiff+0x88>
 800a104:	1b33      	subs	r3, r6, r4
 800a106:	3b15      	subs	r3, #21
 800a108:	f023 0303 	bic.w	r3, r3, #3
 800a10c:	3415      	adds	r4, #21
 800a10e:	3304      	adds	r3, #4
 800a110:	42a6      	cmp	r6, r4
 800a112:	bf38      	it	cc
 800a114:	2304      	movcc	r3, #4
 800a116:	441d      	add	r5, r3
 800a118:	445b      	add	r3, fp
 800a11a:	461e      	mov	r6, r3
 800a11c:	462c      	mov	r4, r5
 800a11e:	4544      	cmp	r4, r8
 800a120:	d30e      	bcc.n	800a140 <__mdiff+0xf8>
 800a122:	f108 0103 	add.w	r1, r8, #3
 800a126:	1b49      	subs	r1, r1, r5
 800a128:	f021 0103 	bic.w	r1, r1, #3
 800a12c:	3d03      	subs	r5, #3
 800a12e:	45a8      	cmp	r8, r5
 800a130:	bf38      	it	cc
 800a132:	2100      	movcc	r1, #0
 800a134:	440b      	add	r3, r1
 800a136:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a13a:	b191      	cbz	r1, 800a162 <__mdiff+0x11a>
 800a13c:	6117      	str	r7, [r2, #16]
 800a13e:	e79d      	b.n	800a07c <__mdiff+0x34>
 800a140:	f854 1b04 	ldr.w	r1, [r4], #4
 800a144:	46e6      	mov	lr, ip
 800a146:	0c08      	lsrs	r0, r1, #16
 800a148:	fa1c fc81 	uxtah	ip, ip, r1
 800a14c:	4471      	add	r1, lr
 800a14e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a152:	b289      	uxth	r1, r1
 800a154:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a158:	f846 1b04 	str.w	r1, [r6], #4
 800a15c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a160:	e7dd      	b.n	800a11e <__mdiff+0xd6>
 800a162:	3f01      	subs	r7, #1
 800a164:	e7e7      	b.n	800a136 <__mdiff+0xee>
 800a166:	bf00      	nop
 800a168:	0800c8ad 	.word	0x0800c8ad
 800a16c:	0800c8be 	.word	0x0800c8be

0800a170 <__ulp>:
 800a170:	b082      	sub	sp, #8
 800a172:	ed8d 0b00 	vstr	d0, [sp]
 800a176:	9a01      	ldr	r2, [sp, #4]
 800a178:	4b0f      	ldr	r3, [pc, #60]	@ (800a1b8 <__ulp+0x48>)
 800a17a:	4013      	ands	r3, r2
 800a17c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a180:	2b00      	cmp	r3, #0
 800a182:	dc08      	bgt.n	800a196 <__ulp+0x26>
 800a184:	425b      	negs	r3, r3
 800a186:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a18a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a18e:	da04      	bge.n	800a19a <__ulp+0x2a>
 800a190:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a194:	4113      	asrs	r3, r2
 800a196:	2200      	movs	r2, #0
 800a198:	e008      	b.n	800a1ac <__ulp+0x3c>
 800a19a:	f1a2 0314 	sub.w	r3, r2, #20
 800a19e:	2b1e      	cmp	r3, #30
 800a1a0:	bfda      	itte	le
 800a1a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a1a6:	40da      	lsrle	r2, r3
 800a1a8:	2201      	movgt	r2, #1
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	ec41 0b10 	vmov	d0, r0, r1
 800a1b4:	b002      	add	sp, #8
 800a1b6:	4770      	bx	lr
 800a1b8:	7ff00000 	.word	0x7ff00000

0800a1bc <__b2d>:
 800a1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c0:	6906      	ldr	r6, [r0, #16]
 800a1c2:	f100 0814 	add.w	r8, r0, #20
 800a1c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a1ca:	1f37      	subs	r7, r6, #4
 800a1cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	f7ff fd53 	bl	8009c7c <__hi0bits>
 800a1d6:	f1c0 0320 	rsb	r3, r0, #32
 800a1da:	280a      	cmp	r0, #10
 800a1dc:	600b      	str	r3, [r1, #0]
 800a1de:	491b      	ldr	r1, [pc, #108]	@ (800a24c <__b2d+0x90>)
 800a1e0:	dc15      	bgt.n	800a20e <__b2d+0x52>
 800a1e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a1e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a1ea:	45b8      	cmp	r8, r7
 800a1ec:	ea43 0501 	orr.w	r5, r3, r1
 800a1f0:	bf34      	ite	cc
 800a1f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1f6:	2300      	movcs	r3, #0
 800a1f8:	3015      	adds	r0, #21
 800a1fa:	fa02 f000 	lsl.w	r0, r2, r0
 800a1fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800a202:	4303      	orrs	r3, r0
 800a204:	461c      	mov	r4, r3
 800a206:	ec45 4b10 	vmov	d0, r4, r5
 800a20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a20e:	45b8      	cmp	r8, r7
 800a210:	bf3a      	itte	cc
 800a212:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a216:	f1a6 0708 	subcc.w	r7, r6, #8
 800a21a:	2300      	movcs	r3, #0
 800a21c:	380b      	subs	r0, #11
 800a21e:	d012      	beq.n	800a246 <__b2d+0x8a>
 800a220:	f1c0 0120 	rsb	r1, r0, #32
 800a224:	fa23 f401 	lsr.w	r4, r3, r1
 800a228:	4082      	lsls	r2, r0
 800a22a:	4322      	orrs	r2, r4
 800a22c:	4547      	cmp	r7, r8
 800a22e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a232:	bf8c      	ite	hi
 800a234:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a238:	2200      	movls	r2, #0
 800a23a:	4083      	lsls	r3, r0
 800a23c:	40ca      	lsrs	r2, r1
 800a23e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a242:	4313      	orrs	r3, r2
 800a244:	e7de      	b.n	800a204 <__b2d+0x48>
 800a246:	ea42 0501 	orr.w	r5, r2, r1
 800a24a:	e7db      	b.n	800a204 <__b2d+0x48>
 800a24c:	3ff00000 	.word	0x3ff00000

0800a250 <__d2b>:
 800a250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a254:	460f      	mov	r7, r1
 800a256:	2101      	movs	r1, #1
 800a258:	ec59 8b10 	vmov	r8, r9, d0
 800a25c:	4616      	mov	r6, r2
 800a25e:	f7ff fc1b 	bl	8009a98 <_Balloc>
 800a262:	4604      	mov	r4, r0
 800a264:	b930      	cbnz	r0, 800a274 <__d2b+0x24>
 800a266:	4602      	mov	r2, r0
 800a268:	4b23      	ldr	r3, [pc, #140]	@ (800a2f8 <__d2b+0xa8>)
 800a26a:	4824      	ldr	r0, [pc, #144]	@ (800a2fc <__d2b+0xac>)
 800a26c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a270:	f001 fb5e 	bl	800b930 <__assert_func>
 800a274:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a27c:	b10d      	cbz	r5, 800a282 <__d2b+0x32>
 800a27e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a282:	9301      	str	r3, [sp, #4]
 800a284:	f1b8 0300 	subs.w	r3, r8, #0
 800a288:	d023      	beq.n	800a2d2 <__d2b+0x82>
 800a28a:	4668      	mov	r0, sp
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	f7ff fd14 	bl	8009cba <__lo0bits>
 800a292:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a296:	b1d0      	cbz	r0, 800a2ce <__d2b+0x7e>
 800a298:	f1c0 0320 	rsb	r3, r0, #32
 800a29c:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a0:	430b      	orrs	r3, r1
 800a2a2:	40c2      	lsrs	r2, r0
 800a2a4:	6163      	str	r3, [r4, #20]
 800a2a6:	9201      	str	r2, [sp, #4]
 800a2a8:	9b01      	ldr	r3, [sp, #4]
 800a2aa:	61a3      	str	r3, [r4, #24]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	bf0c      	ite	eq
 800a2b0:	2201      	moveq	r2, #1
 800a2b2:	2202      	movne	r2, #2
 800a2b4:	6122      	str	r2, [r4, #16]
 800a2b6:	b1a5      	cbz	r5, 800a2e2 <__d2b+0x92>
 800a2b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a2bc:	4405      	add	r5, r0
 800a2be:	603d      	str	r5, [r7, #0]
 800a2c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a2c4:	6030      	str	r0, [r6, #0]
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	b003      	add	sp, #12
 800a2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2ce:	6161      	str	r1, [r4, #20]
 800a2d0:	e7ea      	b.n	800a2a8 <__d2b+0x58>
 800a2d2:	a801      	add	r0, sp, #4
 800a2d4:	f7ff fcf1 	bl	8009cba <__lo0bits>
 800a2d8:	9b01      	ldr	r3, [sp, #4]
 800a2da:	6163      	str	r3, [r4, #20]
 800a2dc:	3020      	adds	r0, #32
 800a2de:	2201      	movs	r2, #1
 800a2e0:	e7e8      	b.n	800a2b4 <__d2b+0x64>
 800a2e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a2ea:	6038      	str	r0, [r7, #0]
 800a2ec:	6918      	ldr	r0, [r3, #16]
 800a2ee:	f7ff fcc5 	bl	8009c7c <__hi0bits>
 800a2f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2f6:	e7e5      	b.n	800a2c4 <__d2b+0x74>
 800a2f8:	0800c8ad 	.word	0x0800c8ad
 800a2fc:	0800c8be 	.word	0x0800c8be

0800a300 <__ratio>:
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	b085      	sub	sp, #20
 800a306:	e9cd 1000 	strd	r1, r0, [sp]
 800a30a:	a902      	add	r1, sp, #8
 800a30c:	f7ff ff56 	bl	800a1bc <__b2d>
 800a310:	9800      	ldr	r0, [sp, #0]
 800a312:	a903      	add	r1, sp, #12
 800a314:	ec55 4b10 	vmov	r4, r5, d0
 800a318:	f7ff ff50 	bl	800a1bc <__b2d>
 800a31c:	9b01      	ldr	r3, [sp, #4]
 800a31e:	6919      	ldr	r1, [r3, #16]
 800a320:	9b00      	ldr	r3, [sp, #0]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	1ac9      	subs	r1, r1, r3
 800a326:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a32a:	1a9b      	subs	r3, r3, r2
 800a32c:	ec5b ab10 	vmov	sl, fp, d0
 800a330:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a334:	2b00      	cmp	r3, #0
 800a336:	bfce      	itee	gt
 800a338:	462a      	movgt	r2, r5
 800a33a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a33e:	465a      	movle	r2, fp
 800a340:	462f      	mov	r7, r5
 800a342:	46d9      	mov	r9, fp
 800a344:	bfcc      	ite	gt
 800a346:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a34a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a34e:	464b      	mov	r3, r9
 800a350:	4652      	mov	r2, sl
 800a352:	4620      	mov	r0, r4
 800a354:	4639      	mov	r1, r7
 800a356:	f7f6 fa91 	bl	800087c <__aeabi_ddiv>
 800a35a:	ec41 0b10 	vmov	d0, r0, r1
 800a35e:	b005      	add	sp, #20
 800a360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a364 <__copybits>:
 800a364:	3901      	subs	r1, #1
 800a366:	b570      	push	{r4, r5, r6, lr}
 800a368:	1149      	asrs	r1, r1, #5
 800a36a:	6914      	ldr	r4, [r2, #16]
 800a36c:	3101      	adds	r1, #1
 800a36e:	f102 0314 	add.w	r3, r2, #20
 800a372:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a376:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a37a:	1f05      	subs	r5, r0, #4
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	d30c      	bcc.n	800a39a <__copybits+0x36>
 800a380:	1aa3      	subs	r3, r4, r2
 800a382:	3b11      	subs	r3, #17
 800a384:	f023 0303 	bic.w	r3, r3, #3
 800a388:	3211      	adds	r2, #17
 800a38a:	42a2      	cmp	r2, r4
 800a38c:	bf88      	it	hi
 800a38e:	2300      	movhi	r3, #0
 800a390:	4418      	add	r0, r3
 800a392:	2300      	movs	r3, #0
 800a394:	4288      	cmp	r0, r1
 800a396:	d305      	bcc.n	800a3a4 <__copybits+0x40>
 800a398:	bd70      	pop	{r4, r5, r6, pc}
 800a39a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a39e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3a2:	e7eb      	b.n	800a37c <__copybits+0x18>
 800a3a4:	f840 3b04 	str.w	r3, [r0], #4
 800a3a8:	e7f4      	b.n	800a394 <__copybits+0x30>

0800a3aa <__any_on>:
 800a3aa:	f100 0214 	add.w	r2, r0, #20
 800a3ae:	6900      	ldr	r0, [r0, #16]
 800a3b0:	114b      	asrs	r3, r1, #5
 800a3b2:	4298      	cmp	r0, r3
 800a3b4:	b510      	push	{r4, lr}
 800a3b6:	db11      	blt.n	800a3dc <__any_on+0x32>
 800a3b8:	dd0a      	ble.n	800a3d0 <__any_on+0x26>
 800a3ba:	f011 011f 	ands.w	r1, r1, #31
 800a3be:	d007      	beq.n	800a3d0 <__any_on+0x26>
 800a3c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a3c4:	fa24 f001 	lsr.w	r0, r4, r1
 800a3c8:	fa00 f101 	lsl.w	r1, r0, r1
 800a3cc:	428c      	cmp	r4, r1
 800a3ce:	d10b      	bne.n	800a3e8 <__any_on+0x3e>
 800a3d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d803      	bhi.n	800a3e0 <__any_on+0x36>
 800a3d8:	2000      	movs	r0, #0
 800a3da:	bd10      	pop	{r4, pc}
 800a3dc:	4603      	mov	r3, r0
 800a3de:	e7f7      	b.n	800a3d0 <__any_on+0x26>
 800a3e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	d0f5      	beq.n	800a3d4 <__any_on+0x2a>
 800a3e8:	2001      	movs	r0, #1
 800a3ea:	e7f6      	b.n	800a3da <__any_on+0x30>

0800a3ec <sulp>:
 800a3ec:	b570      	push	{r4, r5, r6, lr}
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	460d      	mov	r5, r1
 800a3f2:	ec45 4b10 	vmov	d0, r4, r5
 800a3f6:	4616      	mov	r6, r2
 800a3f8:	f7ff feba 	bl	800a170 <__ulp>
 800a3fc:	ec51 0b10 	vmov	r0, r1, d0
 800a400:	b17e      	cbz	r6, 800a422 <sulp+0x36>
 800a402:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a406:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	dd09      	ble.n	800a422 <sulp+0x36>
 800a40e:	051b      	lsls	r3, r3, #20
 800a410:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a414:	2400      	movs	r4, #0
 800a416:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a41a:	4622      	mov	r2, r4
 800a41c:	462b      	mov	r3, r5
 800a41e:	f7f6 f903 	bl	8000628 <__aeabi_dmul>
 800a422:	ec41 0b10 	vmov	d0, r0, r1
 800a426:	bd70      	pop	{r4, r5, r6, pc}

0800a428 <_strtod_l>:
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	b09f      	sub	sp, #124	@ 0x7c
 800a42e:	460c      	mov	r4, r1
 800a430:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a432:	2200      	movs	r2, #0
 800a434:	921a      	str	r2, [sp, #104]	@ 0x68
 800a436:	9005      	str	r0, [sp, #20]
 800a438:	f04f 0a00 	mov.w	sl, #0
 800a43c:	f04f 0b00 	mov.w	fp, #0
 800a440:	460a      	mov	r2, r1
 800a442:	9219      	str	r2, [sp, #100]	@ 0x64
 800a444:	7811      	ldrb	r1, [r2, #0]
 800a446:	292b      	cmp	r1, #43	@ 0x2b
 800a448:	d04a      	beq.n	800a4e0 <_strtod_l+0xb8>
 800a44a:	d838      	bhi.n	800a4be <_strtod_l+0x96>
 800a44c:	290d      	cmp	r1, #13
 800a44e:	d832      	bhi.n	800a4b6 <_strtod_l+0x8e>
 800a450:	2908      	cmp	r1, #8
 800a452:	d832      	bhi.n	800a4ba <_strtod_l+0x92>
 800a454:	2900      	cmp	r1, #0
 800a456:	d03b      	beq.n	800a4d0 <_strtod_l+0xa8>
 800a458:	2200      	movs	r2, #0
 800a45a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a45c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a45e:	782a      	ldrb	r2, [r5, #0]
 800a460:	2a30      	cmp	r2, #48	@ 0x30
 800a462:	f040 80b2 	bne.w	800a5ca <_strtod_l+0x1a2>
 800a466:	786a      	ldrb	r2, [r5, #1]
 800a468:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a46c:	2a58      	cmp	r2, #88	@ 0x58
 800a46e:	d16e      	bne.n	800a54e <_strtod_l+0x126>
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	ab1a      	add	r3, sp, #104	@ 0x68
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	4a8f      	ldr	r2, [pc, #572]	@ (800a6b8 <_strtod_l+0x290>)
 800a47c:	9805      	ldr	r0, [sp, #20]
 800a47e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a480:	a919      	add	r1, sp, #100	@ 0x64
 800a482:	f001 faef 	bl	800ba64 <__gethex>
 800a486:	f010 060f 	ands.w	r6, r0, #15
 800a48a:	4604      	mov	r4, r0
 800a48c:	d005      	beq.n	800a49a <_strtod_l+0x72>
 800a48e:	2e06      	cmp	r6, #6
 800a490:	d128      	bne.n	800a4e4 <_strtod_l+0xbc>
 800a492:	3501      	adds	r5, #1
 800a494:	2300      	movs	r3, #0
 800a496:	9519      	str	r5, [sp, #100]	@ 0x64
 800a498:	930e      	str	r3, [sp, #56]	@ 0x38
 800a49a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f040 858e 	bne.w	800afbe <_strtod_l+0xb96>
 800a4a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4a4:	b1cb      	cbz	r3, 800a4da <_strtod_l+0xb2>
 800a4a6:	4652      	mov	r2, sl
 800a4a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a4ac:	ec43 2b10 	vmov	d0, r2, r3
 800a4b0:	b01f      	add	sp, #124	@ 0x7c
 800a4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b6:	2920      	cmp	r1, #32
 800a4b8:	d1ce      	bne.n	800a458 <_strtod_l+0x30>
 800a4ba:	3201      	adds	r2, #1
 800a4bc:	e7c1      	b.n	800a442 <_strtod_l+0x1a>
 800a4be:	292d      	cmp	r1, #45	@ 0x2d
 800a4c0:	d1ca      	bne.n	800a458 <_strtod_l+0x30>
 800a4c2:	2101      	movs	r1, #1
 800a4c4:	910e      	str	r1, [sp, #56]	@ 0x38
 800a4c6:	1c51      	adds	r1, r2, #1
 800a4c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a4ca:	7852      	ldrb	r2, [r2, #1]
 800a4cc:	2a00      	cmp	r2, #0
 800a4ce:	d1c5      	bne.n	800a45c <_strtod_l+0x34>
 800a4d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a4d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f040 8570 	bne.w	800afba <_strtod_l+0xb92>
 800a4da:	4652      	mov	r2, sl
 800a4dc:	465b      	mov	r3, fp
 800a4de:	e7e5      	b.n	800a4ac <_strtod_l+0x84>
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	e7ef      	b.n	800a4c4 <_strtod_l+0x9c>
 800a4e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a4e6:	b13a      	cbz	r2, 800a4f8 <_strtod_l+0xd0>
 800a4e8:	2135      	movs	r1, #53	@ 0x35
 800a4ea:	a81c      	add	r0, sp, #112	@ 0x70
 800a4ec:	f7ff ff3a 	bl	800a364 <__copybits>
 800a4f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4f2:	9805      	ldr	r0, [sp, #20]
 800a4f4:	f7ff fb10 	bl	8009b18 <_Bfree>
 800a4f8:	3e01      	subs	r6, #1
 800a4fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a4fc:	2e04      	cmp	r6, #4
 800a4fe:	d806      	bhi.n	800a50e <_strtod_l+0xe6>
 800a500:	e8df f006 	tbb	[pc, r6]
 800a504:	201d0314 	.word	0x201d0314
 800a508:	14          	.byte	0x14
 800a509:	00          	.byte	0x00
 800a50a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a50e:	05e1      	lsls	r1, r4, #23
 800a510:	bf48      	it	mi
 800a512:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a516:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a51a:	0d1b      	lsrs	r3, r3, #20
 800a51c:	051b      	lsls	r3, r3, #20
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1bb      	bne.n	800a49a <_strtod_l+0x72>
 800a522:	f7fe fb1f 	bl	8008b64 <__errno>
 800a526:	2322      	movs	r3, #34	@ 0x22
 800a528:	6003      	str	r3, [r0, #0]
 800a52a:	e7b6      	b.n	800a49a <_strtod_l+0x72>
 800a52c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a530:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a534:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a538:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a53c:	e7e7      	b.n	800a50e <_strtod_l+0xe6>
 800a53e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a6c0 <_strtod_l+0x298>
 800a542:	e7e4      	b.n	800a50e <_strtod_l+0xe6>
 800a544:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a548:	f04f 3aff 	mov.w	sl, #4294967295
 800a54c:	e7df      	b.n	800a50e <_strtod_l+0xe6>
 800a54e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	9219      	str	r2, [sp, #100]	@ 0x64
 800a554:	785b      	ldrb	r3, [r3, #1]
 800a556:	2b30      	cmp	r3, #48	@ 0x30
 800a558:	d0f9      	beq.n	800a54e <_strtod_l+0x126>
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d09d      	beq.n	800a49a <_strtod_l+0x72>
 800a55e:	2301      	movs	r3, #1
 800a560:	2700      	movs	r7, #0
 800a562:	9308      	str	r3, [sp, #32]
 800a564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a566:	930c      	str	r3, [sp, #48]	@ 0x30
 800a568:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a56a:	46b9      	mov	r9, r7
 800a56c:	220a      	movs	r2, #10
 800a56e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a570:	7805      	ldrb	r5, [r0, #0]
 800a572:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a576:	b2d9      	uxtb	r1, r3
 800a578:	2909      	cmp	r1, #9
 800a57a:	d928      	bls.n	800a5ce <_strtod_l+0x1a6>
 800a57c:	494f      	ldr	r1, [pc, #316]	@ (800a6bc <_strtod_l+0x294>)
 800a57e:	2201      	movs	r2, #1
 800a580:	f001 f9ac 	bl	800b8dc <strncmp>
 800a584:	2800      	cmp	r0, #0
 800a586:	d032      	beq.n	800a5ee <_strtod_l+0x1c6>
 800a588:	2000      	movs	r0, #0
 800a58a:	462a      	mov	r2, r5
 800a58c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a58e:	464d      	mov	r5, r9
 800a590:	4603      	mov	r3, r0
 800a592:	2a65      	cmp	r2, #101	@ 0x65
 800a594:	d001      	beq.n	800a59a <_strtod_l+0x172>
 800a596:	2a45      	cmp	r2, #69	@ 0x45
 800a598:	d114      	bne.n	800a5c4 <_strtod_l+0x19c>
 800a59a:	b91d      	cbnz	r5, 800a5a4 <_strtod_l+0x17c>
 800a59c:	9a08      	ldr	r2, [sp, #32]
 800a59e:	4302      	orrs	r2, r0
 800a5a0:	d096      	beq.n	800a4d0 <_strtod_l+0xa8>
 800a5a2:	2500      	movs	r5, #0
 800a5a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a5a6:	1c62      	adds	r2, r4, #1
 800a5a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5aa:	7862      	ldrb	r2, [r4, #1]
 800a5ac:	2a2b      	cmp	r2, #43	@ 0x2b
 800a5ae:	d07a      	beq.n	800a6a6 <_strtod_l+0x27e>
 800a5b0:	2a2d      	cmp	r2, #45	@ 0x2d
 800a5b2:	d07e      	beq.n	800a6b2 <_strtod_l+0x28a>
 800a5b4:	f04f 0c00 	mov.w	ip, #0
 800a5b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a5bc:	2909      	cmp	r1, #9
 800a5be:	f240 8085 	bls.w	800a6cc <_strtod_l+0x2a4>
 800a5c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a5c4:	f04f 0800 	mov.w	r8, #0
 800a5c8:	e0a5      	b.n	800a716 <_strtod_l+0x2ee>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e7c8      	b.n	800a560 <_strtod_l+0x138>
 800a5ce:	f1b9 0f08 	cmp.w	r9, #8
 800a5d2:	bfd8      	it	le
 800a5d4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a5d6:	f100 0001 	add.w	r0, r0, #1
 800a5da:	bfda      	itte	le
 800a5dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a5e2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a5e6:	f109 0901 	add.w	r9, r9, #1
 800a5ea:	9019      	str	r0, [sp, #100]	@ 0x64
 800a5ec:	e7bf      	b.n	800a56e <_strtod_l+0x146>
 800a5ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5f4:	785a      	ldrb	r2, [r3, #1]
 800a5f6:	f1b9 0f00 	cmp.w	r9, #0
 800a5fa:	d03b      	beq.n	800a674 <_strtod_l+0x24c>
 800a5fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a5fe:	464d      	mov	r5, r9
 800a600:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a604:	2b09      	cmp	r3, #9
 800a606:	d912      	bls.n	800a62e <_strtod_l+0x206>
 800a608:	2301      	movs	r3, #1
 800a60a:	e7c2      	b.n	800a592 <_strtod_l+0x16a>
 800a60c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	9219      	str	r2, [sp, #100]	@ 0x64
 800a612:	785a      	ldrb	r2, [r3, #1]
 800a614:	3001      	adds	r0, #1
 800a616:	2a30      	cmp	r2, #48	@ 0x30
 800a618:	d0f8      	beq.n	800a60c <_strtod_l+0x1e4>
 800a61a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a61e:	2b08      	cmp	r3, #8
 800a620:	f200 84d2 	bhi.w	800afc8 <_strtod_l+0xba0>
 800a624:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a626:	900a      	str	r0, [sp, #40]	@ 0x28
 800a628:	2000      	movs	r0, #0
 800a62a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a62c:	4605      	mov	r5, r0
 800a62e:	3a30      	subs	r2, #48	@ 0x30
 800a630:	f100 0301 	add.w	r3, r0, #1
 800a634:	d018      	beq.n	800a668 <_strtod_l+0x240>
 800a636:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a638:	4419      	add	r1, r3
 800a63a:	910a      	str	r1, [sp, #40]	@ 0x28
 800a63c:	462e      	mov	r6, r5
 800a63e:	f04f 0e0a 	mov.w	lr, #10
 800a642:	1c71      	adds	r1, r6, #1
 800a644:	eba1 0c05 	sub.w	ip, r1, r5
 800a648:	4563      	cmp	r3, ip
 800a64a:	dc15      	bgt.n	800a678 <_strtod_l+0x250>
 800a64c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a650:	182b      	adds	r3, r5, r0
 800a652:	2b08      	cmp	r3, #8
 800a654:	f105 0501 	add.w	r5, r5, #1
 800a658:	4405      	add	r5, r0
 800a65a:	dc1a      	bgt.n	800a692 <_strtod_l+0x26a>
 800a65c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a65e:	230a      	movs	r3, #10
 800a660:	fb03 2301 	mla	r3, r3, r1, r2
 800a664:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a666:	2300      	movs	r3, #0
 800a668:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a66a:	1c51      	adds	r1, r2, #1
 800a66c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a66e:	7852      	ldrb	r2, [r2, #1]
 800a670:	4618      	mov	r0, r3
 800a672:	e7c5      	b.n	800a600 <_strtod_l+0x1d8>
 800a674:	4648      	mov	r0, r9
 800a676:	e7ce      	b.n	800a616 <_strtod_l+0x1ee>
 800a678:	2e08      	cmp	r6, #8
 800a67a:	dc05      	bgt.n	800a688 <_strtod_l+0x260>
 800a67c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a67e:	fb0e f606 	mul.w	r6, lr, r6
 800a682:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a684:	460e      	mov	r6, r1
 800a686:	e7dc      	b.n	800a642 <_strtod_l+0x21a>
 800a688:	2910      	cmp	r1, #16
 800a68a:	bfd8      	it	le
 800a68c:	fb0e f707 	mulle.w	r7, lr, r7
 800a690:	e7f8      	b.n	800a684 <_strtod_l+0x25c>
 800a692:	2b0f      	cmp	r3, #15
 800a694:	bfdc      	itt	le
 800a696:	230a      	movle	r3, #10
 800a698:	fb03 2707 	mlale	r7, r3, r7, r2
 800a69c:	e7e3      	b.n	800a666 <_strtod_l+0x23e>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e77a      	b.n	800a59c <_strtod_l+0x174>
 800a6a6:	f04f 0c00 	mov.w	ip, #0
 800a6aa:	1ca2      	adds	r2, r4, #2
 800a6ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800a6ae:	78a2      	ldrb	r2, [r4, #2]
 800a6b0:	e782      	b.n	800a5b8 <_strtod_l+0x190>
 800a6b2:	f04f 0c01 	mov.w	ip, #1
 800a6b6:	e7f8      	b.n	800a6aa <_strtod_l+0x282>
 800a6b8:	0800cae4 	.word	0x0800cae4
 800a6bc:	0800c917 	.word	0x0800c917
 800a6c0:	7ff00000 	.word	0x7ff00000
 800a6c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6c6:	1c51      	adds	r1, r2, #1
 800a6c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a6ca:	7852      	ldrb	r2, [r2, #1]
 800a6cc:	2a30      	cmp	r2, #48	@ 0x30
 800a6ce:	d0f9      	beq.n	800a6c4 <_strtod_l+0x29c>
 800a6d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a6d4:	2908      	cmp	r1, #8
 800a6d6:	f63f af75 	bhi.w	800a5c4 <_strtod_l+0x19c>
 800a6da:	3a30      	subs	r2, #48	@ 0x30
 800a6dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a6e2:	f04f 080a 	mov.w	r8, #10
 800a6e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6e8:	1c56      	adds	r6, r2, #1
 800a6ea:	9619      	str	r6, [sp, #100]	@ 0x64
 800a6ec:	7852      	ldrb	r2, [r2, #1]
 800a6ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a6f2:	f1be 0f09 	cmp.w	lr, #9
 800a6f6:	d939      	bls.n	800a76c <_strtod_l+0x344>
 800a6f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a6fa:	1a76      	subs	r6, r6, r1
 800a6fc:	2e08      	cmp	r6, #8
 800a6fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a702:	dc03      	bgt.n	800a70c <_strtod_l+0x2e4>
 800a704:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a706:	4588      	cmp	r8, r1
 800a708:	bfa8      	it	ge
 800a70a:	4688      	movge	r8, r1
 800a70c:	f1bc 0f00 	cmp.w	ip, #0
 800a710:	d001      	beq.n	800a716 <_strtod_l+0x2ee>
 800a712:	f1c8 0800 	rsb	r8, r8, #0
 800a716:	2d00      	cmp	r5, #0
 800a718:	d14e      	bne.n	800a7b8 <_strtod_l+0x390>
 800a71a:	9908      	ldr	r1, [sp, #32]
 800a71c:	4308      	orrs	r0, r1
 800a71e:	f47f aebc 	bne.w	800a49a <_strtod_l+0x72>
 800a722:	2b00      	cmp	r3, #0
 800a724:	f47f aed4 	bne.w	800a4d0 <_strtod_l+0xa8>
 800a728:	2a69      	cmp	r2, #105	@ 0x69
 800a72a:	d028      	beq.n	800a77e <_strtod_l+0x356>
 800a72c:	dc25      	bgt.n	800a77a <_strtod_l+0x352>
 800a72e:	2a49      	cmp	r2, #73	@ 0x49
 800a730:	d025      	beq.n	800a77e <_strtod_l+0x356>
 800a732:	2a4e      	cmp	r2, #78	@ 0x4e
 800a734:	f47f aecc 	bne.w	800a4d0 <_strtod_l+0xa8>
 800a738:	499a      	ldr	r1, [pc, #616]	@ (800a9a4 <_strtod_l+0x57c>)
 800a73a:	a819      	add	r0, sp, #100	@ 0x64
 800a73c:	f001 fbb4 	bl	800bea8 <__match>
 800a740:	2800      	cmp	r0, #0
 800a742:	f43f aec5 	beq.w	800a4d0 <_strtod_l+0xa8>
 800a746:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2b28      	cmp	r3, #40	@ 0x28
 800a74c:	d12e      	bne.n	800a7ac <_strtod_l+0x384>
 800a74e:	4996      	ldr	r1, [pc, #600]	@ (800a9a8 <_strtod_l+0x580>)
 800a750:	aa1c      	add	r2, sp, #112	@ 0x70
 800a752:	a819      	add	r0, sp, #100	@ 0x64
 800a754:	f001 fbbc 	bl	800bed0 <__hexnan>
 800a758:	2805      	cmp	r0, #5
 800a75a:	d127      	bne.n	800a7ac <_strtod_l+0x384>
 800a75c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a75e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a762:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a766:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a76a:	e696      	b.n	800a49a <_strtod_l+0x72>
 800a76c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a76e:	fb08 2101 	mla	r1, r8, r1, r2
 800a772:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a776:	9209      	str	r2, [sp, #36]	@ 0x24
 800a778:	e7b5      	b.n	800a6e6 <_strtod_l+0x2be>
 800a77a:	2a6e      	cmp	r2, #110	@ 0x6e
 800a77c:	e7da      	b.n	800a734 <_strtod_l+0x30c>
 800a77e:	498b      	ldr	r1, [pc, #556]	@ (800a9ac <_strtod_l+0x584>)
 800a780:	a819      	add	r0, sp, #100	@ 0x64
 800a782:	f001 fb91 	bl	800bea8 <__match>
 800a786:	2800      	cmp	r0, #0
 800a788:	f43f aea2 	beq.w	800a4d0 <_strtod_l+0xa8>
 800a78c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a78e:	4988      	ldr	r1, [pc, #544]	@ (800a9b0 <_strtod_l+0x588>)
 800a790:	3b01      	subs	r3, #1
 800a792:	a819      	add	r0, sp, #100	@ 0x64
 800a794:	9319      	str	r3, [sp, #100]	@ 0x64
 800a796:	f001 fb87 	bl	800bea8 <__match>
 800a79a:	b910      	cbnz	r0, 800a7a2 <_strtod_l+0x37a>
 800a79c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a79e:	3301      	adds	r3, #1
 800a7a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a7a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a9c0 <_strtod_l+0x598>
 800a7a6:	f04f 0a00 	mov.w	sl, #0
 800a7aa:	e676      	b.n	800a49a <_strtod_l+0x72>
 800a7ac:	4881      	ldr	r0, [pc, #516]	@ (800a9b4 <_strtod_l+0x58c>)
 800a7ae:	f001 f8b7 	bl	800b920 <nan>
 800a7b2:	ec5b ab10 	vmov	sl, fp, d0
 800a7b6:	e670      	b.n	800a49a <_strtod_l+0x72>
 800a7b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a7bc:	eba8 0303 	sub.w	r3, r8, r3
 800a7c0:	f1b9 0f00 	cmp.w	r9, #0
 800a7c4:	bf08      	it	eq
 800a7c6:	46a9      	moveq	r9, r5
 800a7c8:	2d10      	cmp	r5, #16
 800a7ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7cc:	462c      	mov	r4, r5
 800a7ce:	bfa8      	it	ge
 800a7d0:	2410      	movge	r4, #16
 800a7d2:	f7f5 feaf 	bl	8000534 <__aeabi_ui2d>
 800a7d6:	2d09      	cmp	r5, #9
 800a7d8:	4682      	mov	sl, r0
 800a7da:	468b      	mov	fp, r1
 800a7dc:	dc13      	bgt.n	800a806 <_strtod_l+0x3de>
 800a7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f43f ae5a 	beq.w	800a49a <_strtod_l+0x72>
 800a7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7e8:	dd78      	ble.n	800a8dc <_strtod_l+0x4b4>
 800a7ea:	2b16      	cmp	r3, #22
 800a7ec:	dc5f      	bgt.n	800a8ae <_strtod_l+0x486>
 800a7ee:	4972      	ldr	r1, [pc, #456]	@ (800a9b8 <_strtod_l+0x590>)
 800a7f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a7f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7f8:	4652      	mov	r2, sl
 800a7fa:	465b      	mov	r3, fp
 800a7fc:	f7f5 ff14 	bl	8000628 <__aeabi_dmul>
 800a800:	4682      	mov	sl, r0
 800a802:	468b      	mov	fp, r1
 800a804:	e649      	b.n	800a49a <_strtod_l+0x72>
 800a806:	4b6c      	ldr	r3, [pc, #432]	@ (800a9b8 <_strtod_l+0x590>)
 800a808:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a80c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a810:	f7f5 ff0a 	bl	8000628 <__aeabi_dmul>
 800a814:	4682      	mov	sl, r0
 800a816:	4638      	mov	r0, r7
 800a818:	468b      	mov	fp, r1
 800a81a:	f7f5 fe8b 	bl	8000534 <__aeabi_ui2d>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	4650      	mov	r0, sl
 800a824:	4659      	mov	r1, fp
 800a826:	f7f5 fd49 	bl	80002bc <__adddf3>
 800a82a:	2d0f      	cmp	r5, #15
 800a82c:	4682      	mov	sl, r0
 800a82e:	468b      	mov	fp, r1
 800a830:	ddd5      	ble.n	800a7de <_strtod_l+0x3b6>
 800a832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a834:	1b2c      	subs	r4, r5, r4
 800a836:	441c      	add	r4, r3
 800a838:	2c00      	cmp	r4, #0
 800a83a:	f340 8093 	ble.w	800a964 <_strtod_l+0x53c>
 800a83e:	f014 030f 	ands.w	r3, r4, #15
 800a842:	d00a      	beq.n	800a85a <_strtod_l+0x432>
 800a844:	495c      	ldr	r1, [pc, #368]	@ (800a9b8 <_strtod_l+0x590>)
 800a846:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a84a:	4652      	mov	r2, sl
 800a84c:	465b      	mov	r3, fp
 800a84e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a852:	f7f5 fee9 	bl	8000628 <__aeabi_dmul>
 800a856:	4682      	mov	sl, r0
 800a858:	468b      	mov	fp, r1
 800a85a:	f034 040f 	bics.w	r4, r4, #15
 800a85e:	d073      	beq.n	800a948 <_strtod_l+0x520>
 800a860:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a864:	dd49      	ble.n	800a8fa <_strtod_l+0x4d2>
 800a866:	2400      	movs	r4, #0
 800a868:	46a0      	mov	r8, r4
 800a86a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a86c:	46a1      	mov	r9, r4
 800a86e:	9a05      	ldr	r2, [sp, #20]
 800a870:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a9c0 <_strtod_l+0x598>
 800a874:	2322      	movs	r3, #34	@ 0x22
 800a876:	6013      	str	r3, [r2, #0]
 800a878:	f04f 0a00 	mov.w	sl, #0
 800a87c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f43f ae0b 	beq.w	800a49a <_strtod_l+0x72>
 800a884:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a886:	9805      	ldr	r0, [sp, #20]
 800a888:	f7ff f946 	bl	8009b18 <_Bfree>
 800a88c:	9805      	ldr	r0, [sp, #20]
 800a88e:	4649      	mov	r1, r9
 800a890:	f7ff f942 	bl	8009b18 <_Bfree>
 800a894:	9805      	ldr	r0, [sp, #20]
 800a896:	4641      	mov	r1, r8
 800a898:	f7ff f93e 	bl	8009b18 <_Bfree>
 800a89c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a89e:	9805      	ldr	r0, [sp, #20]
 800a8a0:	f7ff f93a 	bl	8009b18 <_Bfree>
 800a8a4:	9805      	ldr	r0, [sp, #20]
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	f7ff f936 	bl	8009b18 <_Bfree>
 800a8ac:	e5f5      	b.n	800a49a <_strtod_l+0x72>
 800a8ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	dbbc      	blt.n	800a832 <_strtod_l+0x40a>
 800a8b8:	4c3f      	ldr	r4, [pc, #252]	@ (800a9b8 <_strtod_l+0x590>)
 800a8ba:	f1c5 050f 	rsb	r5, r5, #15
 800a8be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a8c2:	4652      	mov	r2, sl
 800a8c4:	465b      	mov	r3, fp
 800a8c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8ca:	f7f5 fead 	bl	8000628 <__aeabi_dmul>
 800a8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d0:	1b5d      	subs	r5, r3, r5
 800a8d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a8d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a8da:	e78f      	b.n	800a7fc <_strtod_l+0x3d4>
 800a8dc:	3316      	adds	r3, #22
 800a8de:	dba8      	blt.n	800a832 <_strtod_l+0x40a>
 800a8e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8e2:	eba3 0808 	sub.w	r8, r3, r8
 800a8e6:	4b34      	ldr	r3, [pc, #208]	@ (800a9b8 <_strtod_l+0x590>)
 800a8e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a8ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a8f0:	4650      	mov	r0, sl
 800a8f2:	4659      	mov	r1, fp
 800a8f4:	f7f5 ffc2 	bl	800087c <__aeabi_ddiv>
 800a8f8:	e782      	b.n	800a800 <_strtod_l+0x3d8>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	4f2f      	ldr	r7, [pc, #188]	@ (800a9bc <_strtod_l+0x594>)
 800a8fe:	1124      	asrs	r4, r4, #4
 800a900:	4650      	mov	r0, sl
 800a902:	4659      	mov	r1, fp
 800a904:	461e      	mov	r6, r3
 800a906:	2c01      	cmp	r4, #1
 800a908:	dc21      	bgt.n	800a94e <_strtod_l+0x526>
 800a90a:	b10b      	cbz	r3, 800a910 <_strtod_l+0x4e8>
 800a90c:	4682      	mov	sl, r0
 800a90e:	468b      	mov	fp, r1
 800a910:	492a      	ldr	r1, [pc, #168]	@ (800a9bc <_strtod_l+0x594>)
 800a912:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a916:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a91a:	4652      	mov	r2, sl
 800a91c:	465b      	mov	r3, fp
 800a91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a922:	f7f5 fe81 	bl	8000628 <__aeabi_dmul>
 800a926:	4b26      	ldr	r3, [pc, #152]	@ (800a9c0 <_strtod_l+0x598>)
 800a928:	460a      	mov	r2, r1
 800a92a:	400b      	ands	r3, r1
 800a92c:	4925      	ldr	r1, [pc, #148]	@ (800a9c4 <_strtod_l+0x59c>)
 800a92e:	428b      	cmp	r3, r1
 800a930:	4682      	mov	sl, r0
 800a932:	d898      	bhi.n	800a866 <_strtod_l+0x43e>
 800a934:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a938:	428b      	cmp	r3, r1
 800a93a:	bf86      	itte	hi
 800a93c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a9c8 <_strtod_l+0x5a0>
 800a940:	f04f 3aff 	movhi.w	sl, #4294967295
 800a944:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a948:	2300      	movs	r3, #0
 800a94a:	9308      	str	r3, [sp, #32]
 800a94c:	e076      	b.n	800aa3c <_strtod_l+0x614>
 800a94e:	07e2      	lsls	r2, r4, #31
 800a950:	d504      	bpl.n	800a95c <_strtod_l+0x534>
 800a952:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a956:	f7f5 fe67 	bl	8000628 <__aeabi_dmul>
 800a95a:	2301      	movs	r3, #1
 800a95c:	3601      	adds	r6, #1
 800a95e:	1064      	asrs	r4, r4, #1
 800a960:	3708      	adds	r7, #8
 800a962:	e7d0      	b.n	800a906 <_strtod_l+0x4de>
 800a964:	d0f0      	beq.n	800a948 <_strtod_l+0x520>
 800a966:	4264      	negs	r4, r4
 800a968:	f014 020f 	ands.w	r2, r4, #15
 800a96c:	d00a      	beq.n	800a984 <_strtod_l+0x55c>
 800a96e:	4b12      	ldr	r3, [pc, #72]	@ (800a9b8 <_strtod_l+0x590>)
 800a970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a974:	4650      	mov	r0, sl
 800a976:	4659      	mov	r1, fp
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	f7f5 ff7e 	bl	800087c <__aeabi_ddiv>
 800a980:	4682      	mov	sl, r0
 800a982:	468b      	mov	fp, r1
 800a984:	1124      	asrs	r4, r4, #4
 800a986:	d0df      	beq.n	800a948 <_strtod_l+0x520>
 800a988:	2c1f      	cmp	r4, #31
 800a98a:	dd1f      	ble.n	800a9cc <_strtod_l+0x5a4>
 800a98c:	2400      	movs	r4, #0
 800a98e:	46a0      	mov	r8, r4
 800a990:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a992:	46a1      	mov	r9, r4
 800a994:	9a05      	ldr	r2, [sp, #20]
 800a996:	2322      	movs	r3, #34	@ 0x22
 800a998:	f04f 0a00 	mov.w	sl, #0
 800a99c:	f04f 0b00 	mov.w	fp, #0
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	e76b      	b.n	800a87c <_strtod_l+0x454>
 800a9a4:	0800c805 	.word	0x0800c805
 800a9a8:	0800cad0 	.word	0x0800cad0
 800a9ac:	0800c7fd 	.word	0x0800c7fd
 800a9b0:	0800c834 	.word	0x0800c834
 800a9b4:	0800c96d 	.word	0x0800c96d
 800a9b8:	0800ca08 	.word	0x0800ca08
 800a9bc:	0800c9e0 	.word	0x0800c9e0
 800a9c0:	7ff00000 	.word	0x7ff00000
 800a9c4:	7ca00000 	.word	0x7ca00000
 800a9c8:	7fefffff 	.word	0x7fefffff
 800a9cc:	f014 0310 	ands.w	r3, r4, #16
 800a9d0:	bf18      	it	ne
 800a9d2:	236a      	movne	r3, #106	@ 0x6a
 800a9d4:	4ea9      	ldr	r6, [pc, #676]	@ (800ac7c <_strtod_l+0x854>)
 800a9d6:	9308      	str	r3, [sp, #32]
 800a9d8:	4650      	mov	r0, sl
 800a9da:	4659      	mov	r1, fp
 800a9dc:	2300      	movs	r3, #0
 800a9de:	07e7      	lsls	r7, r4, #31
 800a9e0:	d504      	bpl.n	800a9ec <_strtod_l+0x5c4>
 800a9e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9e6:	f7f5 fe1f 	bl	8000628 <__aeabi_dmul>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	1064      	asrs	r4, r4, #1
 800a9ee:	f106 0608 	add.w	r6, r6, #8
 800a9f2:	d1f4      	bne.n	800a9de <_strtod_l+0x5b6>
 800a9f4:	b10b      	cbz	r3, 800a9fa <_strtod_l+0x5d2>
 800a9f6:	4682      	mov	sl, r0
 800a9f8:	468b      	mov	fp, r1
 800a9fa:	9b08      	ldr	r3, [sp, #32]
 800a9fc:	b1b3      	cbz	r3, 800aa2c <_strtod_l+0x604>
 800a9fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aa02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	4659      	mov	r1, fp
 800aa0a:	dd0f      	ble.n	800aa2c <_strtod_l+0x604>
 800aa0c:	2b1f      	cmp	r3, #31
 800aa0e:	dd56      	ble.n	800aabe <_strtod_l+0x696>
 800aa10:	2b34      	cmp	r3, #52	@ 0x34
 800aa12:	bfde      	ittt	le
 800aa14:	f04f 33ff 	movle.w	r3, #4294967295
 800aa18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800aa1c:	4093      	lslle	r3, r2
 800aa1e:	f04f 0a00 	mov.w	sl, #0
 800aa22:	bfcc      	ite	gt
 800aa24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aa28:	ea03 0b01 	andle.w	fp, r3, r1
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2300      	movs	r3, #0
 800aa30:	4650      	mov	r0, sl
 800aa32:	4659      	mov	r1, fp
 800aa34:	f7f6 f860 	bl	8000af8 <__aeabi_dcmpeq>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d1a7      	bne.n	800a98c <_strtod_l+0x564>
 800aa3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aa42:	9805      	ldr	r0, [sp, #20]
 800aa44:	462b      	mov	r3, r5
 800aa46:	464a      	mov	r2, r9
 800aa48:	f7ff f8ce 	bl	8009be8 <__s2b>
 800aa4c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	f43f af09 	beq.w	800a866 <_strtod_l+0x43e>
 800aa54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa58:	2a00      	cmp	r2, #0
 800aa5a:	eba3 0308 	sub.w	r3, r3, r8
 800aa5e:	bfa8      	it	ge
 800aa60:	2300      	movge	r3, #0
 800aa62:	9312      	str	r3, [sp, #72]	@ 0x48
 800aa64:	2400      	movs	r4, #0
 800aa66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aa6a:	9316      	str	r3, [sp, #88]	@ 0x58
 800aa6c:	46a0      	mov	r8, r4
 800aa6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa70:	9805      	ldr	r0, [sp, #20]
 800aa72:	6859      	ldr	r1, [r3, #4]
 800aa74:	f7ff f810 	bl	8009a98 <_Balloc>
 800aa78:	4681      	mov	r9, r0
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	f43f aef7 	beq.w	800a86e <_strtod_l+0x446>
 800aa80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa82:	691a      	ldr	r2, [r3, #16]
 800aa84:	3202      	adds	r2, #2
 800aa86:	f103 010c 	add.w	r1, r3, #12
 800aa8a:	0092      	lsls	r2, r2, #2
 800aa8c:	300c      	adds	r0, #12
 800aa8e:	f7fe f896 	bl	8008bbe <memcpy>
 800aa92:	ec4b ab10 	vmov	d0, sl, fp
 800aa96:	9805      	ldr	r0, [sp, #20]
 800aa98:	aa1c      	add	r2, sp, #112	@ 0x70
 800aa9a:	a91b      	add	r1, sp, #108	@ 0x6c
 800aa9c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aaa0:	f7ff fbd6 	bl	800a250 <__d2b>
 800aaa4:	901a      	str	r0, [sp, #104]	@ 0x68
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	f43f aee1 	beq.w	800a86e <_strtod_l+0x446>
 800aaac:	9805      	ldr	r0, [sp, #20]
 800aaae:	2101      	movs	r1, #1
 800aab0:	f7ff f930 	bl	8009d14 <__i2b>
 800aab4:	4680      	mov	r8, r0
 800aab6:	b948      	cbnz	r0, 800aacc <_strtod_l+0x6a4>
 800aab8:	f04f 0800 	mov.w	r8, #0
 800aabc:	e6d7      	b.n	800a86e <_strtod_l+0x446>
 800aabe:	f04f 32ff 	mov.w	r2, #4294967295
 800aac2:	fa02 f303 	lsl.w	r3, r2, r3
 800aac6:	ea03 0a0a 	and.w	sl, r3, sl
 800aaca:	e7af      	b.n	800aa2c <_strtod_l+0x604>
 800aacc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800aace:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800aad0:	2d00      	cmp	r5, #0
 800aad2:	bfab      	itete	ge
 800aad4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800aad6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aad8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aada:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aadc:	bfac      	ite	ge
 800aade:	18ef      	addge	r7, r5, r3
 800aae0:	1b5e      	sublt	r6, r3, r5
 800aae2:	9b08      	ldr	r3, [sp, #32]
 800aae4:	1aed      	subs	r5, r5, r3
 800aae6:	4415      	add	r5, r2
 800aae8:	4b65      	ldr	r3, [pc, #404]	@ (800ac80 <_strtod_l+0x858>)
 800aaea:	3d01      	subs	r5, #1
 800aaec:	429d      	cmp	r5, r3
 800aaee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aaf2:	da50      	bge.n	800ab96 <_strtod_l+0x76e>
 800aaf4:	1b5b      	subs	r3, r3, r5
 800aaf6:	2b1f      	cmp	r3, #31
 800aaf8:	eba2 0203 	sub.w	r2, r2, r3
 800aafc:	f04f 0101 	mov.w	r1, #1
 800ab00:	dc3d      	bgt.n	800ab7e <_strtod_l+0x756>
 800ab02:	fa01 f303 	lsl.w	r3, r1, r3
 800ab06:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab08:	2300      	movs	r3, #0
 800ab0a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab0c:	18bd      	adds	r5, r7, r2
 800ab0e:	9b08      	ldr	r3, [sp, #32]
 800ab10:	42af      	cmp	r7, r5
 800ab12:	4416      	add	r6, r2
 800ab14:	441e      	add	r6, r3
 800ab16:	463b      	mov	r3, r7
 800ab18:	bfa8      	it	ge
 800ab1a:	462b      	movge	r3, r5
 800ab1c:	42b3      	cmp	r3, r6
 800ab1e:	bfa8      	it	ge
 800ab20:	4633      	movge	r3, r6
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	bfc2      	ittt	gt
 800ab26:	1aed      	subgt	r5, r5, r3
 800ab28:	1af6      	subgt	r6, r6, r3
 800ab2a:	1aff      	subgt	r7, r7, r3
 800ab2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	dd16      	ble.n	800ab60 <_strtod_l+0x738>
 800ab32:	4641      	mov	r1, r8
 800ab34:	9805      	ldr	r0, [sp, #20]
 800ab36:	461a      	mov	r2, r3
 800ab38:	f7ff f9a4 	bl	8009e84 <__pow5mult>
 800ab3c:	4680      	mov	r8, r0
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d0ba      	beq.n	800aab8 <_strtod_l+0x690>
 800ab42:	4601      	mov	r1, r0
 800ab44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab46:	9805      	ldr	r0, [sp, #20]
 800ab48:	f7ff f8fa 	bl	8009d40 <__multiply>
 800ab4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	f43f ae8d 	beq.w	800a86e <_strtod_l+0x446>
 800ab54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab56:	9805      	ldr	r0, [sp, #20]
 800ab58:	f7fe ffde 	bl	8009b18 <_Bfree>
 800ab5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab60:	2d00      	cmp	r5, #0
 800ab62:	dc1d      	bgt.n	800aba0 <_strtod_l+0x778>
 800ab64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	dd23      	ble.n	800abb2 <_strtod_l+0x78a>
 800ab6a:	4649      	mov	r1, r9
 800ab6c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ab6e:	9805      	ldr	r0, [sp, #20]
 800ab70:	f7ff f988 	bl	8009e84 <__pow5mult>
 800ab74:	4681      	mov	r9, r0
 800ab76:	b9e0      	cbnz	r0, 800abb2 <_strtod_l+0x78a>
 800ab78:	f04f 0900 	mov.w	r9, #0
 800ab7c:	e677      	b.n	800a86e <_strtod_l+0x446>
 800ab7e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ab82:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ab86:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ab8a:	35e2      	adds	r5, #226	@ 0xe2
 800ab8c:	fa01 f305 	lsl.w	r3, r1, r5
 800ab90:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab92:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ab94:	e7ba      	b.n	800ab0c <_strtod_l+0x6e4>
 800ab96:	2300      	movs	r3, #0
 800ab98:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab9e:	e7b5      	b.n	800ab0c <_strtod_l+0x6e4>
 800aba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aba2:	9805      	ldr	r0, [sp, #20]
 800aba4:	462a      	mov	r2, r5
 800aba6:	f7ff f9c7 	bl	8009f38 <__lshift>
 800abaa:	901a      	str	r0, [sp, #104]	@ 0x68
 800abac:	2800      	cmp	r0, #0
 800abae:	d1d9      	bne.n	800ab64 <_strtod_l+0x73c>
 800abb0:	e65d      	b.n	800a86e <_strtod_l+0x446>
 800abb2:	2e00      	cmp	r6, #0
 800abb4:	dd07      	ble.n	800abc6 <_strtod_l+0x79e>
 800abb6:	4649      	mov	r1, r9
 800abb8:	9805      	ldr	r0, [sp, #20]
 800abba:	4632      	mov	r2, r6
 800abbc:	f7ff f9bc 	bl	8009f38 <__lshift>
 800abc0:	4681      	mov	r9, r0
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d0d8      	beq.n	800ab78 <_strtod_l+0x750>
 800abc6:	2f00      	cmp	r7, #0
 800abc8:	dd08      	ble.n	800abdc <_strtod_l+0x7b4>
 800abca:	4641      	mov	r1, r8
 800abcc:	9805      	ldr	r0, [sp, #20]
 800abce:	463a      	mov	r2, r7
 800abd0:	f7ff f9b2 	bl	8009f38 <__lshift>
 800abd4:	4680      	mov	r8, r0
 800abd6:	2800      	cmp	r0, #0
 800abd8:	f43f ae49 	beq.w	800a86e <_strtod_l+0x446>
 800abdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abde:	9805      	ldr	r0, [sp, #20]
 800abe0:	464a      	mov	r2, r9
 800abe2:	f7ff fa31 	bl	800a048 <__mdiff>
 800abe6:	4604      	mov	r4, r0
 800abe8:	2800      	cmp	r0, #0
 800abea:	f43f ae40 	beq.w	800a86e <_strtod_l+0x446>
 800abee:	68c3      	ldr	r3, [r0, #12]
 800abf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abf2:	2300      	movs	r3, #0
 800abf4:	60c3      	str	r3, [r0, #12]
 800abf6:	4641      	mov	r1, r8
 800abf8:	f7ff fa0a 	bl	800a010 <__mcmp>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	da45      	bge.n	800ac8c <_strtod_l+0x864>
 800ac00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac02:	ea53 030a 	orrs.w	r3, r3, sl
 800ac06:	d16b      	bne.n	800ace0 <_strtod_l+0x8b8>
 800ac08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d167      	bne.n	800ace0 <_strtod_l+0x8b8>
 800ac10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac14:	0d1b      	lsrs	r3, r3, #20
 800ac16:	051b      	lsls	r3, r3, #20
 800ac18:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac1c:	d960      	bls.n	800ace0 <_strtod_l+0x8b8>
 800ac1e:	6963      	ldr	r3, [r4, #20]
 800ac20:	b913      	cbnz	r3, 800ac28 <_strtod_l+0x800>
 800ac22:	6923      	ldr	r3, [r4, #16]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	dd5b      	ble.n	800ace0 <_strtod_l+0x8b8>
 800ac28:	4621      	mov	r1, r4
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	9805      	ldr	r0, [sp, #20]
 800ac2e:	f7ff f983 	bl	8009f38 <__lshift>
 800ac32:	4641      	mov	r1, r8
 800ac34:	4604      	mov	r4, r0
 800ac36:	f7ff f9eb 	bl	800a010 <__mcmp>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	dd50      	ble.n	800ace0 <_strtod_l+0x8b8>
 800ac3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac42:	9a08      	ldr	r2, [sp, #32]
 800ac44:	0d1b      	lsrs	r3, r3, #20
 800ac46:	051b      	lsls	r3, r3, #20
 800ac48:	2a00      	cmp	r2, #0
 800ac4a:	d06a      	beq.n	800ad22 <_strtod_l+0x8fa>
 800ac4c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac50:	d867      	bhi.n	800ad22 <_strtod_l+0x8fa>
 800ac52:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ac56:	f67f ae9d 	bls.w	800a994 <_strtod_l+0x56c>
 800ac5a:	4b0a      	ldr	r3, [pc, #40]	@ (800ac84 <_strtod_l+0x85c>)
 800ac5c:	4650      	mov	r0, sl
 800ac5e:	4659      	mov	r1, fp
 800ac60:	2200      	movs	r2, #0
 800ac62:	f7f5 fce1 	bl	8000628 <__aeabi_dmul>
 800ac66:	4b08      	ldr	r3, [pc, #32]	@ (800ac88 <_strtod_l+0x860>)
 800ac68:	400b      	ands	r3, r1
 800ac6a:	4682      	mov	sl, r0
 800ac6c:	468b      	mov	fp, r1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f47f ae08 	bne.w	800a884 <_strtod_l+0x45c>
 800ac74:	9a05      	ldr	r2, [sp, #20]
 800ac76:	2322      	movs	r3, #34	@ 0x22
 800ac78:	6013      	str	r3, [r2, #0]
 800ac7a:	e603      	b.n	800a884 <_strtod_l+0x45c>
 800ac7c:	0800caf8 	.word	0x0800caf8
 800ac80:	fffffc02 	.word	0xfffffc02
 800ac84:	39500000 	.word	0x39500000
 800ac88:	7ff00000 	.word	0x7ff00000
 800ac8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ac90:	d165      	bne.n	800ad5e <_strtod_l+0x936>
 800ac92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ac94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac98:	b35a      	cbz	r2, 800acf2 <_strtod_l+0x8ca>
 800ac9a:	4a9f      	ldr	r2, [pc, #636]	@ (800af18 <_strtod_l+0xaf0>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d12b      	bne.n	800acf8 <_strtod_l+0x8d0>
 800aca0:	9b08      	ldr	r3, [sp, #32]
 800aca2:	4651      	mov	r1, sl
 800aca4:	b303      	cbz	r3, 800ace8 <_strtod_l+0x8c0>
 800aca6:	4b9d      	ldr	r3, [pc, #628]	@ (800af1c <_strtod_l+0xaf4>)
 800aca8:	465a      	mov	r2, fp
 800acaa:	4013      	ands	r3, r2
 800acac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800acb0:	f04f 32ff 	mov.w	r2, #4294967295
 800acb4:	d81b      	bhi.n	800acee <_strtod_l+0x8c6>
 800acb6:	0d1b      	lsrs	r3, r3, #20
 800acb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800acbc:	fa02 f303 	lsl.w	r3, r2, r3
 800acc0:	4299      	cmp	r1, r3
 800acc2:	d119      	bne.n	800acf8 <_strtod_l+0x8d0>
 800acc4:	4b96      	ldr	r3, [pc, #600]	@ (800af20 <_strtod_l+0xaf8>)
 800acc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800acc8:	429a      	cmp	r2, r3
 800acca:	d102      	bne.n	800acd2 <_strtod_l+0x8aa>
 800accc:	3101      	adds	r1, #1
 800acce:	f43f adce 	beq.w	800a86e <_strtod_l+0x446>
 800acd2:	4b92      	ldr	r3, [pc, #584]	@ (800af1c <_strtod_l+0xaf4>)
 800acd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800acd6:	401a      	ands	r2, r3
 800acd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800acdc:	f04f 0a00 	mov.w	sl, #0
 800ace0:	9b08      	ldr	r3, [sp, #32]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1b9      	bne.n	800ac5a <_strtod_l+0x832>
 800ace6:	e5cd      	b.n	800a884 <_strtod_l+0x45c>
 800ace8:	f04f 33ff 	mov.w	r3, #4294967295
 800acec:	e7e8      	b.n	800acc0 <_strtod_l+0x898>
 800acee:	4613      	mov	r3, r2
 800acf0:	e7e6      	b.n	800acc0 <_strtod_l+0x898>
 800acf2:	ea53 030a 	orrs.w	r3, r3, sl
 800acf6:	d0a2      	beq.n	800ac3e <_strtod_l+0x816>
 800acf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800acfa:	b1db      	cbz	r3, 800ad34 <_strtod_l+0x90c>
 800acfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800acfe:	4213      	tst	r3, r2
 800ad00:	d0ee      	beq.n	800ace0 <_strtod_l+0x8b8>
 800ad02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad04:	9a08      	ldr	r2, [sp, #32]
 800ad06:	4650      	mov	r0, sl
 800ad08:	4659      	mov	r1, fp
 800ad0a:	b1bb      	cbz	r3, 800ad3c <_strtod_l+0x914>
 800ad0c:	f7ff fb6e 	bl	800a3ec <sulp>
 800ad10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad14:	ec53 2b10 	vmov	r2, r3, d0
 800ad18:	f7f5 fad0 	bl	80002bc <__adddf3>
 800ad1c:	4682      	mov	sl, r0
 800ad1e:	468b      	mov	fp, r1
 800ad20:	e7de      	b.n	800ace0 <_strtod_l+0x8b8>
 800ad22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ad26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad2e:	f04f 3aff 	mov.w	sl, #4294967295
 800ad32:	e7d5      	b.n	800ace0 <_strtod_l+0x8b8>
 800ad34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad36:	ea13 0f0a 	tst.w	r3, sl
 800ad3a:	e7e1      	b.n	800ad00 <_strtod_l+0x8d8>
 800ad3c:	f7ff fb56 	bl	800a3ec <sulp>
 800ad40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad44:	ec53 2b10 	vmov	r2, r3, d0
 800ad48:	f7f5 fab6 	bl	80002b8 <__aeabi_dsub>
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	2300      	movs	r3, #0
 800ad50:	4682      	mov	sl, r0
 800ad52:	468b      	mov	fp, r1
 800ad54:	f7f5 fed0 	bl	8000af8 <__aeabi_dcmpeq>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d0c1      	beq.n	800ace0 <_strtod_l+0x8b8>
 800ad5c:	e61a      	b.n	800a994 <_strtod_l+0x56c>
 800ad5e:	4641      	mov	r1, r8
 800ad60:	4620      	mov	r0, r4
 800ad62:	f7ff facd 	bl	800a300 <__ratio>
 800ad66:	ec57 6b10 	vmov	r6, r7, d0
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ad70:	4630      	mov	r0, r6
 800ad72:	4639      	mov	r1, r7
 800ad74:	f7f5 fed4 	bl	8000b20 <__aeabi_dcmple>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d06f      	beq.n	800ae5c <_strtod_l+0xa34>
 800ad7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d17a      	bne.n	800ae78 <_strtod_l+0xa50>
 800ad82:	f1ba 0f00 	cmp.w	sl, #0
 800ad86:	d158      	bne.n	800ae3a <_strtod_l+0xa12>
 800ad88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d15a      	bne.n	800ae48 <_strtod_l+0xa20>
 800ad92:	4b64      	ldr	r3, [pc, #400]	@ (800af24 <_strtod_l+0xafc>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	4630      	mov	r0, r6
 800ad98:	4639      	mov	r1, r7
 800ad9a:	f7f5 feb7 	bl	8000b0c <__aeabi_dcmplt>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d159      	bne.n	800ae56 <_strtod_l+0xa2e>
 800ada2:	4630      	mov	r0, r6
 800ada4:	4639      	mov	r1, r7
 800ada6:	4b60      	ldr	r3, [pc, #384]	@ (800af28 <_strtod_l+0xb00>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	f7f5 fc3d 	bl	8000628 <__aeabi_dmul>
 800adae:	4606      	mov	r6, r0
 800adb0:	460f      	mov	r7, r1
 800adb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800adb6:	9606      	str	r6, [sp, #24]
 800adb8:	9307      	str	r3, [sp, #28]
 800adba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adbe:	4d57      	ldr	r5, [pc, #348]	@ (800af1c <_strtod_l+0xaf4>)
 800adc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800adc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adc6:	401d      	ands	r5, r3
 800adc8:	4b58      	ldr	r3, [pc, #352]	@ (800af2c <_strtod_l+0xb04>)
 800adca:	429d      	cmp	r5, r3
 800adcc:	f040 80b2 	bne.w	800af34 <_strtod_l+0xb0c>
 800add0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800add2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800add6:	ec4b ab10 	vmov	d0, sl, fp
 800adda:	f7ff f9c9 	bl	800a170 <__ulp>
 800adde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ade2:	ec51 0b10 	vmov	r0, r1, d0
 800ade6:	f7f5 fc1f 	bl	8000628 <__aeabi_dmul>
 800adea:	4652      	mov	r2, sl
 800adec:	465b      	mov	r3, fp
 800adee:	f7f5 fa65 	bl	80002bc <__adddf3>
 800adf2:	460b      	mov	r3, r1
 800adf4:	4949      	ldr	r1, [pc, #292]	@ (800af1c <_strtod_l+0xaf4>)
 800adf6:	4a4e      	ldr	r2, [pc, #312]	@ (800af30 <_strtod_l+0xb08>)
 800adf8:	4019      	ands	r1, r3
 800adfa:	4291      	cmp	r1, r2
 800adfc:	4682      	mov	sl, r0
 800adfe:	d942      	bls.n	800ae86 <_strtod_l+0xa5e>
 800ae00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae02:	4b47      	ldr	r3, [pc, #284]	@ (800af20 <_strtod_l+0xaf8>)
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d103      	bne.n	800ae10 <_strtod_l+0x9e8>
 800ae08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	f43f ad2f 	beq.w	800a86e <_strtod_l+0x446>
 800ae10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800af20 <_strtod_l+0xaf8>
 800ae14:	f04f 3aff 	mov.w	sl, #4294967295
 800ae18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae1a:	9805      	ldr	r0, [sp, #20]
 800ae1c:	f7fe fe7c 	bl	8009b18 <_Bfree>
 800ae20:	9805      	ldr	r0, [sp, #20]
 800ae22:	4649      	mov	r1, r9
 800ae24:	f7fe fe78 	bl	8009b18 <_Bfree>
 800ae28:	9805      	ldr	r0, [sp, #20]
 800ae2a:	4641      	mov	r1, r8
 800ae2c:	f7fe fe74 	bl	8009b18 <_Bfree>
 800ae30:	9805      	ldr	r0, [sp, #20]
 800ae32:	4621      	mov	r1, r4
 800ae34:	f7fe fe70 	bl	8009b18 <_Bfree>
 800ae38:	e619      	b.n	800aa6e <_strtod_l+0x646>
 800ae3a:	f1ba 0f01 	cmp.w	sl, #1
 800ae3e:	d103      	bne.n	800ae48 <_strtod_l+0xa20>
 800ae40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f43f ada6 	beq.w	800a994 <_strtod_l+0x56c>
 800ae48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aef8 <_strtod_l+0xad0>
 800ae4c:	4f35      	ldr	r7, [pc, #212]	@ (800af24 <_strtod_l+0xafc>)
 800ae4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae52:	2600      	movs	r6, #0
 800ae54:	e7b1      	b.n	800adba <_strtod_l+0x992>
 800ae56:	4f34      	ldr	r7, [pc, #208]	@ (800af28 <_strtod_l+0xb00>)
 800ae58:	2600      	movs	r6, #0
 800ae5a:	e7aa      	b.n	800adb2 <_strtod_l+0x98a>
 800ae5c:	4b32      	ldr	r3, [pc, #200]	@ (800af28 <_strtod_l+0xb00>)
 800ae5e:	4630      	mov	r0, r6
 800ae60:	4639      	mov	r1, r7
 800ae62:	2200      	movs	r2, #0
 800ae64:	f7f5 fbe0 	bl	8000628 <__aeabi_dmul>
 800ae68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d09f      	beq.n	800adb2 <_strtod_l+0x98a>
 800ae72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ae76:	e7a0      	b.n	800adba <_strtod_l+0x992>
 800ae78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800af00 <_strtod_l+0xad8>
 800ae7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae80:	ec57 6b17 	vmov	r6, r7, d7
 800ae84:	e799      	b.n	800adba <_strtod_l+0x992>
 800ae86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ae8a:	9b08      	ldr	r3, [sp, #32]
 800ae8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1c1      	bne.n	800ae18 <_strtod_l+0x9f0>
 800ae94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae98:	0d1b      	lsrs	r3, r3, #20
 800ae9a:	051b      	lsls	r3, r3, #20
 800ae9c:	429d      	cmp	r5, r3
 800ae9e:	d1bb      	bne.n	800ae18 <_strtod_l+0x9f0>
 800aea0:	4630      	mov	r0, r6
 800aea2:	4639      	mov	r1, r7
 800aea4:	f7f5 ff20 	bl	8000ce8 <__aeabi_d2lz>
 800aea8:	f7f5 fb90 	bl	80005cc <__aeabi_l2d>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	f7f5 fa00 	bl	80002b8 <__aeabi_dsub>
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4602      	mov	r2, r0
 800aebc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aec0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800aec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aec6:	ea46 060a 	orr.w	r6, r6, sl
 800aeca:	431e      	orrs	r6, r3
 800aecc:	d06f      	beq.n	800afae <_strtod_l+0xb86>
 800aece:	a30e      	add	r3, pc, #56	@ (adr r3, 800af08 <_strtod_l+0xae0>)
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	f7f5 fe1a 	bl	8000b0c <__aeabi_dcmplt>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	f47f acd3 	bne.w	800a884 <_strtod_l+0x45c>
 800aede:	a30c      	add	r3, pc, #48	@ (adr r3, 800af10 <_strtod_l+0xae8>)
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aee8:	f7f5 fe2e 	bl	8000b48 <__aeabi_dcmpgt>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d093      	beq.n	800ae18 <_strtod_l+0x9f0>
 800aef0:	e4c8      	b.n	800a884 <_strtod_l+0x45c>
 800aef2:	bf00      	nop
 800aef4:	f3af 8000 	nop.w
 800aef8:	00000000 	.word	0x00000000
 800aefc:	bff00000 	.word	0xbff00000
 800af00:	00000000 	.word	0x00000000
 800af04:	3ff00000 	.word	0x3ff00000
 800af08:	94a03595 	.word	0x94a03595
 800af0c:	3fdfffff 	.word	0x3fdfffff
 800af10:	35afe535 	.word	0x35afe535
 800af14:	3fe00000 	.word	0x3fe00000
 800af18:	000fffff 	.word	0x000fffff
 800af1c:	7ff00000 	.word	0x7ff00000
 800af20:	7fefffff 	.word	0x7fefffff
 800af24:	3ff00000 	.word	0x3ff00000
 800af28:	3fe00000 	.word	0x3fe00000
 800af2c:	7fe00000 	.word	0x7fe00000
 800af30:	7c9fffff 	.word	0x7c9fffff
 800af34:	9b08      	ldr	r3, [sp, #32]
 800af36:	b323      	cbz	r3, 800af82 <_strtod_l+0xb5a>
 800af38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800af3c:	d821      	bhi.n	800af82 <_strtod_l+0xb5a>
 800af3e:	a328      	add	r3, pc, #160	@ (adr r3, 800afe0 <_strtod_l+0xbb8>)
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	4630      	mov	r0, r6
 800af46:	4639      	mov	r1, r7
 800af48:	f7f5 fdea 	bl	8000b20 <__aeabi_dcmple>
 800af4c:	b1a0      	cbz	r0, 800af78 <_strtod_l+0xb50>
 800af4e:	4639      	mov	r1, r7
 800af50:	4630      	mov	r0, r6
 800af52:	f7f5 fe41 	bl	8000bd8 <__aeabi_d2uiz>
 800af56:	2801      	cmp	r0, #1
 800af58:	bf38      	it	cc
 800af5a:	2001      	movcc	r0, #1
 800af5c:	f7f5 faea 	bl	8000534 <__aeabi_ui2d>
 800af60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af62:	4606      	mov	r6, r0
 800af64:	460f      	mov	r7, r1
 800af66:	b9fb      	cbnz	r3, 800afa8 <_strtod_l+0xb80>
 800af68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af6c:	9014      	str	r0, [sp, #80]	@ 0x50
 800af6e:	9315      	str	r3, [sp, #84]	@ 0x54
 800af70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800af74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800af78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800af7e:	1b5b      	subs	r3, r3, r5
 800af80:	9311      	str	r3, [sp, #68]	@ 0x44
 800af82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800af86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800af8a:	f7ff f8f1 	bl	800a170 <__ulp>
 800af8e:	4650      	mov	r0, sl
 800af90:	ec53 2b10 	vmov	r2, r3, d0
 800af94:	4659      	mov	r1, fp
 800af96:	f7f5 fb47 	bl	8000628 <__aeabi_dmul>
 800af9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800af9e:	f7f5 f98d 	bl	80002bc <__adddf3>
 800afa2:	4682      	mov	sl, r0
 800afa4:	468b      	mov	fp, r1
 800afa6:	e770      	b.n	800ae8a <_strtod_l+0xa62>
 800afa8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800afac:	e7e0      	b.n	800af70 <_strtod_l+0xb48>
 800afae:	a30e      	add	r3, pc, #56	@ (adr r3, 800afe8 <_strtod_l+0xbc0>)
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f7f5 fdaa 	bl	8000b0c <__aeabi_dcmplt>
 800afb8:	e798      	b.n	800aeec <_strtod_l+0xac4>
 800afba:	2300      	movs	r3, #0
 800afbc:	930e      	str	r3, [sp, #56]	@ 0x38
 800afbe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800afc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	f7ff ba6d 	b.w	800a4a2 <_strtod_l+0x7a>
 800afc8:	2a65      	cmp	r2, #101	@ 0x65
 800afca:	f43f ab68 	beq.w	800a69e <_strtod_l+0x276>
 800afce:	2a45      	cmp	r2, #69	@ 0x45
 800afd0:	f43f ab65 	beq.w	800a69e <_strtod_l+0x276>
 800afd4:	2301      	movs	r3, #1
 800afd6:	f7ff bba0 	b.w	800a71a <_strtod_l+0x2f2>
 800afda:	bf00      	nop
 800afdc:	f3af 8000 	nop.w
 800afe0:	ffc00000 	.word	0xffc00000
 800afe4:	41dfffff 	.word	0x41dfffff
 800afe8:	94a03595 	.word	0x94a03595
 800afec:	3fcfffff 	.word	0x3fcfffff

0800aff0 <_strtod_r>:
 800aff0:	4b01      	ldr	r3, [pc, #4]	@ (800aff8 <_strtod_r+0x8>)
 800aff2:	f7ff ba19 	b.w	800a428 <_strtod_l>
 800aff6:	bf00      	nop
 800aff8:	2000006c 	.word	0x2000006c

0800affc <_strtol_l.isra.0>:
 800affc:	2b24      	cmp	r3, #36	@ 0x24
 800affe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b002:	4686      	mov	lr, r0
 800b004:	4690      	mov	r8, r2
 800b006:	d801      	bhi.n	800b00c <_strtol_l.isra.0+0x10>
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d106      	bne.n	800b01a <_strtol_l.isra.0+0x1e>
 800b00c:	f7fd fdaa 	bl	8008b64 <__errno>
 800b010:	2316      	movs	r3, #22
 800b012:	6003      	str	r3, [r0, #0]
 800b014:	2000      	movs	r0, #0
 800b016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b01a:	4834      	ldr	r0, [pc, #208]	@ (800b0ec <_strtol_l.isra.0+0xf0>)
 800b01c:	460d      	mov	r5, r1
 800b01e:	462a      	mov	r2, r5
 800b020:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b024:	5d06      	ldrb	r6, [r0, r4]
 800b026:	f016 0608 	ands.w	r6, r6, #8
 800b02a:	d1f8      	bne.n	800b01e <_strtol_l.isra.0+0x22>
 800b02c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b02e:	d110      	bne.n	800b052 <_strtol_l.isra.0+0x56>
 800b030:	782c      	ldrb	r4, [r5, #0]
 800b032:	2601      	movs	r6, #1
 800b034:	1c95      	adds	r5, r2, #2
 800b036:	f033 0210 	bics.w	r2, r3, #16
 800b03a:	d115      	bne.n	800b068 <_strtol_l.isra.0+0x6c>
 800b03c:	2c30      	cmp	r4, #48	@ 0x30
 800b03e:	d10d      	bne.n	800b05c <_strtol_l.isra.0+0x60>
 800b040:	782a      	ldrb	r2, [r5, #0]
 800b042:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b046:	2a58      	cmp	r2, #88	@ 0x58
 800b048:	d108      	bne.n	800b05c <_strtol_l.isra.0+0x60>
 800b04a:	786c      	ldrb	r4, [r5, #1]
 800b04c:	3502      	adds	r5, #2
 800b04e:	2310      	movs	r3, #16
 800b050:	e00a      	b.n	800b068 <_strtol_l.isra.0+0x6c>
 800b052:	2c2b      	cmp	r4, #43	@ 0x2b
 800b054:	bf04      	itt	eq
 800b056:	782c      	ldrbeq	r4, [r5, #0]
 800b058:	1c95      	addeq	r5, r2, #2
 800b05a:	e7ec      	b.n	800b036 <_strtol_l.isra.0+0x3a>
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d1f6      	bne.n	800b04e <_strtol_l.isra.0+0x52>
 800b060:	2c30      	cmp	r4, #48	@ 0x30
 800b062:	bf14      	ite	ne
 800b064:	230a      	movne	r3, #10
 800b066:	2308      	moveq	r3, #8
 800b068:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b06c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b070:	2200      	movs	r2, #0
 800b072:	fbbc f9f3 	udiv	r9, ip, r3
 800b076:	4610      	mov	r0, r2
 800b078:	fb03 ca19 	mls	sl, r3, r9, ip
 800b07c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b080:	2f09      	cmp	r7, #9
 800b082:	d80f      	bhi.n	800b0a4 <_strtol_l.isra.0+0xa8>
 800b084:	463c      	mov	r4, r7
 800b086:	42a3      	cmp	r3, r4
 800b088:	dd1b      	ble.n	800b0c2 <_strtol_l.isra.0+0xc6>
 800b08a:	1c57      	adds	r7, r2, #1
 800b08c:	d007      	beq.n	800b09e <_strtol_l.isra.0+0xa2>
 800b08e:	4581      	cmp	r9, r0
 800b090:	d314      	bcc.n	800b0bc <_strtol_l.isra.0+0xc0>
 800b092:	d101      	bne.n	800b098 <_strtol_l.isra.0+0x9c>
 800b094:	45a2      	cmp	sl, r4
 800b096:	db11      	blt.n	800b0bc <_strtol_l.isra.0+0xc0>
 800b098:	fb00 4003 	mla	r0, r0, r3, r4
 800b09c:	2201      	movs	r2, #1
 800b09e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0a2:	e7eb      	b.n	800b07c <_strtol_l.isra.0+0x80>
 800b0a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b0a8:	2f19      	cmp	r7, #25
 800b0aa:	d801      	bhi.n	800b0b0 <_strtol_l.isra.0+0xb4>
 800b0ac:	3c37      	subs	r4, #55	@ 0x37
 800b0ae:	e7ea      	b.n	800b086 <_strtol_l.isra.0+0x8a>
 800b0b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b0b4:	2f19      	cmp	r7, #25
 800b0b6:	d804      	bhi.n	800b0c2 <_strtol_l.isra.0+0xc6>
 800b0b8:	3c57      	subs	r4, #87	@ 0x57
 800b0ba:	e7e4      	b.n	800b086 <_strtol_l.isra.0+0x8a>
 800b0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c0:	e7ed      	b.n	800b09e <_strtol_l.isra.0+0xa2>
 800b0c2:	1c53      	adds	r3, r2, #1
 800b0c4:	d108      	bne.n	800b0d8 <_strtol_l.isra.0+0xdc>
 800b0c6:	2322      	movs	r3, #34	@ 0x22
 800b0c8:	f8ce 3000 	str.w	r3, [lr]
 800b0cc:	4660      	mov	r0, ip
 800b0ce:	f1b8 0f00 	cmp.w	r8, #0
 800b0d2:	d0a0      	beq.n	800b016 <_strtol_l.isra.0+0x1a>
 800b0d4:	1e69      	subs	r1, r5, #1
 800b0d6:	e006      	b.n	800b0e6 <_strtol_l.isra.0+0xea>
 800b0d8:	b106      	cbz	r6, 800b0dc <_strtol_l.isra.0+0xe0>
 800b0da:	4240      	negs	r0, r0
 800b0dc:	f1b8 0f00 	cmp.w	r8, #0
 800b0e0:	d099      	beq.n	800b016 <_strtol_l.isra.0+0x1a>
 800b0e2:	2a00      	cmp	r2, #0
 800b0e4:	d1f6      	bne.n	800b0d4 <_strtol_l.isra.0+0xd8>
 800b0e6:	f8c8 1000 	str.w	r1, [r8]
 800b0ea:	e794      	b.n	800b016 <_strtol_l.isra.0+0x1a>
 800b0ec:	0800cb21 	.word	0x0800cb21

0800b0f0 <_strtol_r>:
 800b0f0:	f7ff bf84 	b.w	800affc <_strtol_l.isra.0>

0800b0f4 <__ssputs_r>:
 800b0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f8:	688e      	ldr	r6, [r1, #8]
 800b0fa:	461f      	mov	r7, r3
 800b0fc:	42be      	cmp	r6, r7
 800b0fe:	680b      	ldr	r3, [r1, #0]
 800b100:	4682      	mov	sl, r0
 800b102:	460c      	mov	r4, r1
 800b104:	4690      	mov	r8, r2
 800b106:	d82d      	bhi.n	800b164 <__ssputs_r+0x70>
 800b108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b10c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b110:	d026      	beq.n	800b160 <__ssputs_r+0x6c>
 800b112:	6965      	ldr	r5, [r4, #20]
 800b114:	6909      	ldr	r1, [r1, #16]
 800b116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b11a:	eba3 0901 	sub.w	r9, r3, r1
 800b11e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b122:	1c7b      	adds	r3, r7, #1
 800b124:	444b      	add	r3, r9
 800b126:	106d      	asrs	r5, r5, #1
 800b128:	429d      	cmp	r5, r3
 800b12a:	bf38      	it	cc
 800b12c:	461d      	movcc	r5, r3
 800b12e:	0553      	lsls	r3, r2, #21
 800b130:	d527      	bpl.n	800b182 <__ssputs_r+0x8e>
 800b132:	4629      	mov	r1, r5
 800b134:	f7fe fc24 	bl	8009980 <_malloc_r>
 800b138:	4606      	mov	r6, r0
 800b13a:	b360      	cbz	r0, 800b196 <__ssputs_r+0xa2>
 800b13c:	6921      	ldr	r1, [r4, #16]
 800b13e:	464a      	mov	r2, r9
 800b140:	f7fd fd3d 	bl	8008bbe <memcpy>
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b14a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b14e:	81a3      	strh	r3, [r4, #12]
 800b150:	6126      	str	r6, [r4, #16]
 800b152:	6165      	str	r5, [r4, #20]
 800b154:	444e      	add	r6, r9
 800b156:	eba5 0509 	sub.w	r5, r5, r9
 800b15a:	6026      	str	r6, [r4, #0]
 800b15c:	60a5      	str	r5, [r4, #8]
 800b15e:	463e      	mov	r6, r7
 800b160:	42be      	cmp	r6, r7
 800b162:	d900      	bls.n	800b166 <__ssputs_r+0x72>
 800b164:	463e      	mov	r6, r7
 800b166:	6820      	ldr	r0, [r4, #0]
 800b168:	4632      	mov	r2, r6
 800b16a:	4641      	mov	r1, r8
 800b16c:	f000 fb9c 	bl	800b8a8 <memmove>
 800b170:	68a3      	ldr	r3, [r4, #8]
 800b172:	1b9b      	subs	r3, r3, r6
 800b174:	60a3      	str	r3, [r4, #8]
 800b176:	6823      	ldr	r3, [r4, #0]
 800b178:	4433      	add	r3, r6
 800b17a:	6023      	str	r3, [r4, #0]
 800b17c:	2000      	movs	r0, #0
 800b17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b182:	462a      	mov	r2, r5
 800b184:	f000 ff51 	bl	800c02a <_realloc_r>
 800b188:	4606      	mov	r6, r0
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d1e0      	bne.n	800b150 <__ssputs_r+0x5c>
 800b18e:	6921      	ldr	r1, [r4, #16]
 800b190:	4650      	mov	r0, sl
 800b192:	f7fe fb81 	bl	8009898 <_free_r>
 800b196:	230c      	movs	r3, #12
 800b198:	f8ca 3000 	str.w	r3, [sl]
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1a2:	81a3      	strh	r3, [r4, #12]
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a8:	e7e9      	b.n	800b17e <__ssputs_r+0x8a>
	...

0800b1ac <_svfiprintf_r>:
 800b1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b0:	4698      	mov	r8, r3
 800b1b2:	898b      	ldrh	r3, [r1, #12]
 800b1b4:	061b      	lsls	r3, r3, #24
 800b1b6:	b09d      	sub	sp, #116	@ 0x74
 800b1b8:	4607      	mov	r7, r0
 800b1ba:	460d      	mov	r5, r1
 800b1bc:	4614      	mov	r4, r2
 800b1be:	d510      	bpl.n	800b1e2 <_svfiprintf_r+0x36>
 800b1c0:	690b      	ldr	r3, [r1, #16]
 800b1c2:	b973      	cbnz	r3, 800b1e2 <_svfiprintf_r+0x36>
 800b1c4:	2140      	movs	r1, #64	@ 0x40
 800b1c6:	f7fe fbdb 	bl	8009980 <_malloc_r>
 800b1ca:	6028      	str	r0, [r5, #0]
 800b1cc:	6128      	str	r0, [r5, #16]
 800b1ce:	b930      	cbnz	r0, 800b1de <_svfiprintf_r+0x32>
 800b1d0:	230c      	movs	r3, #12
 800b1d2:	603b      	str	r3, [r7, #0]
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	b01d      	add	sp, #116	@ 0x74
 800b1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1de:	2340      	movs	r3, #64	@ 0x40
 800b1e0:	616b      	str	r3, [r5, #20]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1e6:	2320      	movs	r3, #32
 800b1e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1f0:	2330      	movs	r3, #48	@ 0x30
 800b1f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b390 <_svfiprintf_r+0x1e4>
 800b1f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1fa:	f04f 0901 	mov.w	r9, #1
 800b1fe:	4623      	mov	r3, r4
 800b200:	469a      	mov	sl, r3
 800b202:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b206:	b10a      	cbz	r2, 800b20c <_svfiprintf_r+0x60>
 800b208:	2a25      	cmp	r2, #37	@ 0x25
 800b20a:	d1f9      	bne.n	800b200 <_svfiprintf_r+0x54>
 800b20c:	ebba 0b04 	subs.w	fp, sl, r4
 800b210:	d00b      	beq.n	800b22a <_svfiprintf_r+0x7e>
 800b212:	465b      	mov	r3, fp
 800b214:	4622      	mov	r2, r4
 800b216:	4629      	mov	r1, r5
 800b218:	4638      	mov	r0, r7
 800b21a:	f7ff ff6b 	bl	800b0f4 <__ssputs_r>
 800b21e:	3001      	adds	r0, #1
 800b220:	f000 80a7 	beq.w	800b372 <_svfiprintf_r+0x1c6>
 800b224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b226:	445a      	add	r2, fp
 800b228:	9209      	str	r2, [sp, #36]	@ 0x24
 800b22a:	f89a 3000 	ldrb.w	r3, [sl]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f000 809f 	beq.w	800b372 <_svfiprintf_r+0x1c6>
 800b234:	2300      	movs	r3, #0
 800b236:	f04f 32ff 	mov.w	r2, #4294967295
 800b23a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b23e:	f10a 0a01 	add.w	sl, sl, #1
 800b242:	9304      	str	r3, [sp, #16]
 800b244:	9307      	str	r3, [sp, #28]
 800b246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b24a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b24c:	4654      	mov	r4, sl
 800b24e:	2205      	movs	r2, #5
 800b250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b254:	484e      	ldr	r0, [pc, #312]	@ (800b390 <_svfiprintf_r+0x1e4>)
 800b256:	f7f4 ffd3 	bl	8000200 <memchr>
 800b25a:	9a04      	ldr	r2, [sp, #16]
 800b25c:	b9d8      	cbnz	r0, 800b296 <_svfiprintf_r+0xea>
 800b25e:	06d0      	lsls	r0, r2, #27
 800b260:	bf44      	itt	mi
 800b262:	2320      	movmi	r3, #32
 800b264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b268:	0711      	lsls	r1, r2, #28
 800b26a:	bf44      	itt	mi
 800b26c:	232b      	movmi	r3, #43	@ 0x2b
 800b26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b272:	f89a 3000 	ldrb.w	r3, [sl]
 800b276:	2b2a      	cmp	r3, #42	@ 0x2a
 800b278:	d015      	beq.n	800b2a6 <_svfiprintf_r+0xfa>
 800b27a:	9a07      	ldr	r2, [sp, #28]
 800b27c:	4654      	mov	r4, sl
 800b27e:	2000      	movs	r0, #0
 800b280:	f04f 0c0a 	mov.w	ip, #10
 800b284:	4621      	mov	r1, r4
 800b286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b28a:	3b30      	subs	r3, #48	@ 0x30
 800b28c:	2b09      	cmp	r3, #9
 800b28e:	d94b      	bls.n	800b328 <_svfiprintf_r+0x17c>
 800b290:	b1b0      	cbz	r0, 800b2c0 <_svfiprintf_r+0x114>
 800b292:	9207      	str	r2, [sp, #28]
 800b294:	e014      	b.n	800b2c0 <_svfiprintf_r+0x114>
 800b296:	eba0 0308 	sub.w	r3, r0, r8
 800b29a:	fa09 f303 	lsl.w	r3, r9, r3
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	9304      	str	r3, [sp, #16]
 800b2a2:	46a2      	mov	sl, r4
 800b2a4:	e7d2      	b.n	800b24c <_svfiprintf_r+0xa0>
 800b2a6:	9b03      	ldr	r3, [sp, #12]
 800b2a8:	1d19      	adds	r1, r3, #4
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	9103      	str	r1, [sp, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	bfbb      	ittet	lt
 800b2b2:	425b      	neglt	r3, r3
 800b2b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b2b8:	9307      	strge	r3, [sp, #28]
 800b2ba:	9307      	strlt	r3, [sp, #28]
 800b2bc:	bfb8      	it	lt
 800b2be:	9204      	strlt	r2, [sp, #16]
 800b2c0:	7823      	ldrb	r3, [r4, #0]
 800b2c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2c4:	d10a      	bne.n	800b2dc <_svfiprintf_r+0x130>
 800b2c6:	7863      	ldrb	r3, [r4, #1]
 800b2c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2ca:	d132      	bne.n	800b332 <_svfiprintf_r+0x186>
 800b2cc:	9b03      	ldr	r3, [sp, #12]
 800b2ce:	1d1a      	adds	r2, r3, #4
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	9203      	str	r2, [sp, #12]
 800b2d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2d8:	3402      	adds	r4, #2
 800b2da:	9305      	str	r3, [sp, #20]
 800b2dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b3a0 <_svfiprintf_r+0x1f4>
 800b2e0:	7821      	ldrb	r1, [r4, #0]
 800b2e2:	2203      	movs	r2, #3
 800b2e4:	4650      	mov	r0, sl
 800b2e6:	f7f4 ff8b 	bl	8000200 <memchr>
 800b2ea:	b138      	cbz	r0, 800b2fc <_svfiprintf_r+0x150>
 800b2ec:	9b04      	ldr	r3, [sp, #16]
 800b2ee:	eba0 000a 	sub.w	r0, r0, sl
 800b2f2:	2240      	movs	r2, #64	@ 0x40
 800b2f4:	4082      	lsls	r2, r0
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	3401      	adds	r4, #1
 800b2fa:	9304      	str	r3, [sp, #16]
 800b2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b300:	4824      	ldr	r0, [pc, #144]	@ (800b394 <_svfiprintf_r+0x1e8>)
 800b302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b306:	2206      	movs	r2, #6
 800b308:	f7f4 ff7a 	bl	8000200 <memchr>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d036      	beq.n	800b37e <_svfiprintf_r+0x1d2>
 800b310:	4b21      	ldr	r3, [pc, #132]	@ (800b398 <_svfiprintf_r+0x1ec>)
 800b312:	bb1b      	cbnz	r3, 800b35c <_svfiprintf_r+0x1b0>
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	3307      	adds	r3, #7
 800b318:	f023 0307 	bic.w	r3, r3, #7
 800b31c:	3308      	adds	r3, #8
 800b31e:	9303      	str	r3, [sp, #12]
 800b320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b322:	4433      	add	r3, r6
 800b324:	9309      	str	r3, [sp, #36]	@ 0x24
 800b326:	e76a      	b.n	800b1fe <_svfiprintf_r+0x52>
 800b328:	fb0c 3202 	mla	r2, ip, r2, r3
 800b32c:	460c      	mov	r4, r1
 800b32e:	2001      	movs	r0, #1
 800b330:	e7a8      	b.n	800b284 <_svfiprintf_r+0xd8>
 800b332:	2300      	movs	r3, #0
 800b334:	3401      	adds	r4, #1
 800b336:	9305      	str	r3, [sp, #20]
 800b338:	4619      	mov	r1, r3
 800b33a:	f04f 0c0a 	mov.w	ip, #10
 800b33e:	4620      	mov	r0, r4
 800b340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b344:	3a30      	subs	r2, #48	@ 0x30
 800b346:	2a09      	cmp	r2, #9
 800b348:	d903      	bls.n	800b352 <_svfiprintf_r+0x1a6>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d0c6      	beq.n	800b2dc <_svfiprintf_r+0x130>
 800b34e:	9105      	str	r1, [sp, #20]
 800b350:	e7c4      	b.n	800b2dc <_svfiprintf_r+0x130>
 800b352:	fb0c 2101 	mla	r1, ip, r1, r2
 800b356:	4604      	mov	r4, r0
 800b358:	2301      	movs	r3, #1
 800b35a:	e7f0      	b.n	800b33e <_svfiprintf_r+0x192>
 800b35c:	ab03      	add	r3, sp, #12
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	462a      	mov	r2, r5
 800b362:	4b0e      	ldr	r3, [pc, #56]	@ (800b39c <_svfiprintf_r+0x1f0>)
 800b364:	a904      	add	r1, sp, #16
 800b366:	4638      	mov	r0, r7
 800b368:	f7fc fc56 	bl	8007c18 <_printf_float>
 800b36c:	1c42      	adds	r2, r0, #1
 800b36e:	4606      	mov	r6, r0
 800b370:	d1d6      	bne.n	800b320 <_svfiprintf_r+0x174>
 800b372:	89ab      	ldrh	r3, [r5, #12]
 800b374:	065b      	lsls	r3, r3, #25
 800b376:	f53f af2d 	bmi.w	800b1d4 <_svfiprintf_r+0x28>
 800b37a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b37c:	e72c      	b.n	800b1d8 <_svfiprintf_r+0x2c>
 800b37e:	ab03      	add	r3, sp, #12
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	462a      	mov	r2, r5
 800b384:	4b05      	ldr	r3, [pc, #20]	@ (800b39c <_svfiprintf_r+0x1f0>)
 800b386:	a904      	add	r1, sp, #16
 800b388:	4638      	mov	r0, r7
 800b38a:	f7fc fedd 	bl	8008148 <_printf_i>
 800b38e:	e7ed      	b.n	800b36c <_svfiprintf_r+0x1c0>
 800b390:	0800c919 	.word	0x0800c919
 800b394:	0800c923 	.word	0x0800c923
 800b398:	08007c19 	.word	0x08007c19
 800b39c:	0800b0f5 	.word	0x0800b0f5
 800b3a0:	0800c91f 	.word	0x0800c91f

0800b3a4 <__sfputc_r>:
 800b3a4:	6893      	ldr	r3, [r2, #8]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	b410      	push	{r4}
 800b3ac:	6093      	str	r3, [r2, #8]
 800b3ae:	da08      	bge.n	800b3c2 <__sfputc_r+0x1e>
 800b3b0:	6994      	ldr	r4, [r2, #24]
 800b3b2:	42a3      	cmp	r3, r4
 800b3b4:	db01      	blt.n	800b3ba <__sfputc_r+0x16>
 800b3b6:	290a      	cmp	r1, #10
 800b3b8:	d103      	bne.n	800b3c2 <__sfputc_r+0x1e>
 800b3ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3be:	f000 b9df 	b.w	800b780 <__swbuf_r>
 800b3c2:	6813      	ldr	r3, [r2, #0]
 800b3c4:	1c58      	adds	r0, r3, #1
 800b3c6:	6010      	str	r0, [r2, #0]
 800b3c8:	7019      	strb	r1, [r3, #0]
 800b3ca:	4608      	mov	r0, r1
 800b3cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <__sfputs_r>:
 800b3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	460f      	mov	r7, r1
 800b3d8:	4614      	mov	r4, r2
 800b3da:	18d5      	adds	r5, r2, r3
 800b3dc:	42ac      	cmp	r4, r5
 800b3de:	d101      	bne.n	800b3e4 <__sfputs_r+0x12>
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	e007      	b.n	800b3f4 <__sfputs_r+0x22>
 800b3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e8:	463a      	mov	r2, r7
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7ff ffda 	bl	800b3a4 <__sfputc_r>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d1f3      	bne.n	800b3dc <__sfputs_r+0xa>
 800b3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3f8 <_vfiprintf_r>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	460d      	mov	r5, r1
 800b3fe:	b09d      	sub	sp, #116	@ 0x74
 800b400:	4614      	mov	r4, r2
 800b402:	4698      	mov	r8, r3
 800b404:	4606      	mov	r6, r0
 800b406:	b118      	cbz	r0, 800b410 <_vfiprintf_r+0x18>
 800b408:	6a03      	ldr	r3, [r0, #32]
 800b40a:	b90b      	cbnz	r3, 800b410 <_vfiprintf_r+0x18>
 800b40c:	f7fd fa54 	bl	80088b8 <__sinit>
 800b410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b412:	07d9      	lsls	r1, r3, #31
 800b414:	d405      	bmi.n	800b422 <_vfiprintf_r+0x2a>
 800b416:	89ab      	ldrh	r3, [r5, #12]
 800b418:	059a      	lsls	r2, r3, #22
 800b41a:	d402      	bmi.n	800b422 <_vfiprintf_r+0x2a>
 800b41c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b41e:	f7fd fbcc 	bl	8008bba <__retarget_lock_acquire_recursive>
 800b422:	89ab      	ldrh	r3, [r5, #12]
 800b424:	071b      	lsls	r3, r3, #28
 800b426:	d501      	bpl.n	800b42c <_vfiprintf_r+0x34>
 800b428:	692b      	ldr	r3, [r5, #16]
 800b42a:	b99b      	cbnz	r3, 800b454 <_vfiprintf_r+0x5c>
 800b42c:	4629      	mov	r1, r5
 800b42e:	4630      	mov	r0, r6
 800b430:	f000 f9e4 	bl	800b7fc <__swsetup_r>
 800b434:	b170      	cbz	r0, 800b454 <_vfiprintf_r+0x5c>
 800b436:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b438:	07dc      	lsls	r4, r3, #31
 800b43a:	d504      	bpl.n	800b446 <_vfiprintf_r+0x4e>
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	b01d      	add	sp, #116	@ 0x74
 800b442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b446:	89ab      	ldrh	r3, [r5, #12]
 800b448:	0598      	lsls	r0, r3, #22
 800b44a:	d4f7      	bmi.n	800b43c <_vfiprintf_r+0x44>
 800b44c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b44e:	f7fd fbb5 	bl	8008bbc <__retarget_lock_release_recursive>
 800b452:	e7f3      	b.n	800b43c <_vfiprintf_r+0x44>
 800b454:	2300      	movs	r3, #0
 800b456:	9309      	str	r3, [sp, #36]	@ 0x24
 800b458:	2320      	movs	r3, #32
 800b45a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b45e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b462:	2330      	movs	r3, #48	@ 0x30
 800b464:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b614 <_vfiprintf_r+0x21c>
 800b468:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b46c:	f04f 0901 	mov.w	r9, #1
 800b470:	4623      	mov	r3, r4
 800b472:	469a      	mov	sl, r3
 800b474:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b478:	b10a      	cbz	r2, 800b47e <_vfiprintf_r+0x86>
 800b47a:	2a25      	cmp	r2, #37	@ 0x25
 800b47c:	d1f9      	bne.n	800b472 <_vfiprintf_r+0x7a>
 800b47e:	ebba 0b04 	subs.w	fp, sl, r4
 800b482:	d00b      	beq.n	800b49c <_vfiprintf_r+0xa4>
 800b484:	465b      	mov	r3, fp
 800b486:	4622      	mov	r2, r4
 800b488:	4629      	mov	r1, r5
 800b48a:	4630      	mov	r0, r6
 800b48c:	f7ff ffa1 	bl	800b3d2 <__sfputs_r>
 800b490:	3001      	adds	r0, #1
 800b492:	f000 80a7 	beq.w	800b5e4 <_vfiprintf_r+0x1ec>
 800b496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b498:	445a      	add	r2, fp
 800b49a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b49c:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 809f 	beq.w	800b5e4 <_vfiprintf_r+0x1ec>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b0:	f10a 0a01 	add.w	sl, sl, #1
 800b4b4:	9304      	str	r3, [sp, #16]
 800b4b6:	9307      	str	r3, [sp, #28]
 800b4b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4be:	4654      	mov	r4, sl
 800b4c0:	2205      	movs	r2, #5
 800b4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c6:	4853      	ldr	r0, [pc, #332]	@ (800b614 <_vfiprintf_r+0x21c>)
 800b4c8:	f7f4 fe9a 	bl	8000200 <memchr>
 800b4cc:	9a04      	ldr	r2, [sp, #16]
 800b4ce:	b9d8      	cbnz	r0, 800b508 <_vfiprintf_r+0x110>
 800b4d0:	06d1      	lsls	r1, r2, #27
 800b4d2:	bf44      	itt	mi
 800b4d4:	2320      	movmi	r3, #32
 800b4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4da:	0713      	lsls	r3, r2, #28
 800b4dc:	bf44      	itt	mi
 800b4de:	232b      	movmi	r3, #43	@ 0x2b
 800b4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4ea:	d015      	beq.n	800b518 <_vfiprintf_r+0x120>
 800b4ec:	9a07      	ldr	r2, [sp, #28]
 800b4ee:	4654      	mov	r4, sl
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	f04f 0c0a 	mov.w	ip, #10
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4fc:	3b30      	subs	r3, #48	@ 0x30
 800b4fe:	2b09      	cmp	r3, #9
 800b500:	d94b      	bls.n	800b59a <_vfiprintf_r+0x1a2>
 800b502:	b1b0      	cbz	r0, 800b532 <_vfiprintf_r+0x13a>
 800b504:	9207      	str	r2, [sp, #28]
 800b506:	e014      	b.n	800b532 <_vfiprintf_r+0x13a>
 800b508:	eba0 0308 	sub.w	r3, r0, r8
 800b50c:	fa09 f303 	lsl.w	r3, r9, r3
 800b510:	4313      	orrs	r3, r2
 800b512:	9304      	str	r3, [sp, #16]
 800b514:	46a2      	mov	sl, r4
 800b516:	e7d2      	b.n	800b4be <_vfiprintf_r+0xc6>
 800b518:	9b03      	ldr	r3, [sp, #12]
 800b51a:	1d19      	adds	r1, r3, #4
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	9103      	str	r1, [sp, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	bfbb      	ittet	lt
 800b524:	425b      	neglt	r3, r3
 800b526:	f042 0202 	orrlt.w	r2, r2, #2
 800b52a:	9307      	strge	r3, [sp, #28]
 800b52c:	9307      	strlt	r3, [sp, #28]
 800b52e:	bfb8      	it	lt
 800b530:	9204      	strlt	r2, [sp, #16]
 800b532:	7823      	ldrb	r3, [r4, #0]
 800b534:	2b2e      	cmp	r3, #46	@ 0x2e
 800b536:	d10a      	bne.n	800b54e <_vfiprintf_r+0x156>
 800b538:	7863      	ldrb	r3, [r4, #1]
 800b53a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b53c:	d132      	bne.n	800b5a4 <_vfiprintf_r+0x1ac>
 800b53e:	9b03      	ldr	r3, [sp, #12]
 800b540:	1d1a      	adds	r2, r3, #4
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	9203      	str	r2, [sp, #12]
 800b546:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b54a:	3402      	adds	r4, #2
 800b54c:	9305      	str	r3, [sp, #20]
 800b54e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b624 <_vfiprintf_r+0x22c>
 800b552:	7821      	ldrb	r1, [r4, #0]
 800b554:	2203      	movs	r2, #3
 800b556:	4650      	mov	r0, sl
 800b558:	f7f4 fe52 	bl	8000200 <memchr>
 800b55c:	b138      	cbz	r0, 800b56e <_vfiprintf_r+0x176>
 800b55e:	9b04      	ldr	r3, [sp, #16]
 800b560:	eba0 000a 	sub.w	r0, r0, sl
 800b564:	2240      	movs	r2, #64	@ 0x40
 800b566:	4082      	lsls	r2, r0
 800b568:	4313      	orrs	r3, r2
 800b56a:	3401      	adds	r4, #1
 800b56c:	9304      	str	r3, [sp, #16]
 800b56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b572:	4829      	ldr	r0, [pc, #164]	@ (800b618 <_vfiprintf_r+0x220>)
 800b574:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b578:	2206      	movs	r2, #6
 800b57a:	f7f4 fe41 	bl	8000200 <memchr>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d03f      	beq.n	800b602 <_vfiprintf_r+0x20a>
 800b582:	4b26      	ldr	r3, [pc, #152]	@ (800b61c <_vfiprintf_r+0x224>)
 800b584:	bb1b      	cbnz	r3, 800b5ce <_vfiprintf_r+0x1d6>
 800b586:	9b03      	ldr	r3, [sp, #12]
 800b588:	3307      	adds	r3, #7
 800b58a:	f023 0307 	bic.w	r3, r3, #7
 800b58e:	3308      	adds	r3, #8
 800b590:	9303      	str	r3, [sp, #12]
 800b592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b594:	443b      	add	r3, r7
 800b596:	9309      	str	r3, [sp, #36]	@ 0x24
 800b598:	e76a      	b.n	800b470 <_vfiprintf_r+0x78>
 800b59a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b59e:	460c      	mov	r4, r1
 800b5a0:	2001      	movs	r0, #1
 800b5a2:	e7a8      	b.n	800b4f6 <_vfiprintf_r+0xfe>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	3401      	adds	r4, #1
 800b5a8:	9305      	str	r3, [sp, #20]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	f04f 0c0a 	mov.w	ip, #10
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b6:	3a30      	subs	r2, #48	@ 0x30
 800b5b8:	2a09      	cmp	r2, #9
 800b5ba:	d903      	bls.n	800b5c4 <_vfiprintf_r+0x1cc>
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d0c6      	beq.n	800b54e <_vfiprintf_r+0x156>
 800b5c0:	9105      	str	r1, [sp, #20]
 800b5c2:	e7c4      	b.n	800b54e <_vfiprintf_r+0x156>
 800b5c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e7f0      	b.n	800b5b0 <_vfiprintf_r+0x1b8>
 800b5ce:	ab03      	add	r3, sp, #12
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	462a      	mov	r2, r5
 800b5d4:	4b12      	ldr	r3, [pc, #72]	@ (800b620 <_vfiprintf_r+0x228>)
 800b5d6:	a904      	add	r1, sp, #16
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f7fc fb1d 	bl	8007c18 <_printf_float>
 800b5de:	4607      	mov	r7, r0
 800b5e0:	1c78      	adds	r0, r7, #1
 800b5e2:	d1d6      	bne.n	800b592 <_vfiprintf_r+0x19a>
 800b5e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5e6:	07d9      	lsls	r1, r3, #31
 800b5e8:	d405      	bmi.n	800b5f6 <_vfiprintf_r+0x1fe>
 800b5ea:	89ab      	ldrh	r3, [r5, #12]
 800b5ec:	059a      	lsls	r2, r3, #22
 800b5ee:	d402      	bmi.n	800b5f6 <_vfiprintf_r+0x1fe>
 800b5f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5f2:	f7fd fae3 	bl	8008bbc <__retarget_lock_release_recursive>
 800b5f6:	89ab      	ldrh	r3, [r5, #12]
 800b5f8:	065b      	lsls	r3, r3, #25
 800b5fa:	f53f af1f 	bmi.w	800b43c <_vfiprintf_r+0x44>
 800b5fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b600:	e71e      	b.n	800b440 <_vfiprintf_r+0x48>
 800b602:	ab03      	add	r3, sp, #12
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	462a      	mov	r2, r5
 800b608:	4b05      	ldr	r3, [pc, #20]	@ (800b620 <_vfiprintf_r+0x228>)
 800b60a:	a904      	add	r1, sp, #16
 800b60c:	4630      	mov	r0, r6
 800b60e:	f7fc fd9b 	bl	8008148 <_printf_i>
 800b612:	e7e4      	b.n	800b5de <_vfiprintf_r+0x1e6>
 800b614:	0800c919 	.word	0x0800c919
 800b618:	0800c923 	.word	0x0800c923
 800b61c:	08007c19 	.word	0x08007c19
 800b620:	0800b3d3 	.word	0x0800b3d3
 800b624:	0800c91f 	.word	0x0800c91f

0800b628 <__sflush_r>:
 800b628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b630:	0716      	lsls	r6, r2, #28
 800b632:	4605      	mov	r5, r0
 800b634:	460c      	mov	r4, r1
 800b636:	d454      	bmi.n	800b6e2 <__sflush_r+0xba>
 800b638:	684b      	ldr	r3, [r1, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	dc02      	bgt.n	800b644 <__sflush_r+0x1c>
 800b63e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b640:	2b00      	cmp	r3, #0
 800b642:	dd48      	ble.n	800b6d6 <__sflush_r+0xae>
 800b644:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b646:	2e00      	cmp	r6, #0
 800b648:	d045      	beq.n	800b6d6 <__sflush_r+0xae>
 800b64a:	2300      	movs	r3, #0
 800b64c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b650:	682f      	ldr	r7, [r5, #0]
 800b652:	6a21      	ldr	r1, [r4, #32]
 800b654:	602b      	str	r3, [r5, #0]
 800b656:	d030      	beq.n	800b6ba <__sflush_r+0x92>
 800b658:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	0759      	lsls	r1, r3, #29
 800b65e:	d505      	bpl.n	800b66c <__sflush_r+0x44>
 800b660:	6863      	ldr	r3, [r4, #4]
 800b662:	1ad2      	subs	r2, r2, r3
 800b664:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b666:	b10b      	cbz	r3, 800b66c <__sflush_r+0x44>
 800b668:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b66a:	1ad2      	subs	r2, r2, r3
 800b66c:	2300      	movs	r3, #0
 800b66e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b670:	6a21      	ldr	r1, [r4, #32]
 800b672:	4628      	mov	r0, r5
 800b674:	47b0      	blx	r6
 800b676:	1c43      	adds	r3, r0, #1
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	d106      	bne.n	800b68a <__sflush_r+0x62>
 800b67c:	6829      	ldr	r1, [r5, #0]
 800b67e:	291d      	cmp	r1, #29
 800b680:	d82b      	bhi.n	800b6da <__sflush_r+0xb2>
 800b682:	4a2a      	ldr	r2, [pc, #168]	@ (800b72c <__sflush_r+0x104>)
 800b684:	40ca      	lsrs	r2, r1
 800b686:	07d6      	lsls	r6, r2, #31
 800b688:	d527      	bpl.n	800b6da <__sflush_r+0xb2>
 800b68a:	2200      	movs	r2, #0
 800b68c:	6062      	str	r2, [r4, #4]
 800b68e:	04d9      	lsls	r1, r3, #19
 800b690:	6922      	ldr	r2, [r4, #16]
 800b692:	6022      	str	r2, [r4, #0]
 800b694:	d504      	bpl.n	800b6a0 <__sflush_r+0x78>
 800b696:	1c42      	adds	r2, r0, #1
 800b698:	d101      	bne.n	800b69e <__sflush_r+0x76>
 800b69a:	682b      	ldr	r3, [r5, #0]
 800b69c:	b903      	cbnz	r3, 800b6a0 <__sflush_r+0x78>
 800b69e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6a2:	602f      	str	r7, [r5, #0]
 800b6a4:	b1b9      	cbz	r1, 800b6d6 <__sflush_r+0xae>
 800b6a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6aa:	4299      	cmp	r1, r3
 800b6ac:	d002      	beq.n	800b6b4 <__sflush_r+0x8c>
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f7fe f8f2 	bl	8009898 <_free_r>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6b8:	e00d      	b.n	800b6d6 <__sflush_r+0xae>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	4628      	mov	r0, r5
 800b6be:	47b0      	blx	r6
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	1c50      	adds	r0, r2, #1
 800b6c4:	d1c9      	bne.n	800b65a <__sflush_r+0x32>
 800b6c6:	682b      	ldr	r3, [r5, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d0c6      	beq.n	800b65a <__sflush_r+0x32>
 800b6cc:	2b1d      	cmp	r3, #29
 800b6ce:	d001      	beq.n	800b6d4 <__sflush_r+0xac>
 800b6d0:	2b16      	cmp	r3, #22
 800b6d2:	d11e      	bne.n	800b712 <__sflush_r+0xea>
 800b6d4:	602f      	str	r7, [r5, #0]
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	e022      	b.n	800b720 <__sflush_r+0xf8>
 800b6da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6de:	b21b      	sxth	r3, r3
 800b6e0:	e01b      	b.n	800b71a <__sflush_r+0xf2>
 800b6e2:	690f      	ldr	r7, [r1, #16]
 800b6e4:	2f00      	cmp	r7, #0
 800b6e6:	d0f6      	beq.n	800b6d6 <__sflush_r+0xae>
 800b6e8:	0793      	lsls	r3, r2, #30
 800b6ea:	680e      	ldr	r6, [r1, #0]
 800b6ec:	bf08      	it	eq
 800b6ee:	694b      	ldreq	r3, [r1, #20]
 800b6f0:	600f      	str	r7, [r1, #0]
 800b6f2:	bf18      	it	ne
 800b6f4:	2300      	movne	r3, #0
 800b6f6:	eba6 0807 	sub.w	r8, r6, r7
 800b6fa:	608b      	str	r3, [r1, #8]
 800b6fc:	f1b8 0f00 	cmp.w	r8, #0
 800b700:	dde9      	ble.n	800b6d6 <__sflush_r+0xae>
 800b702:	6a21      	ldr	r1, [r4, #32]
 800b704:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b706:	4643      	mov	r3, r8
 800b708:	463a      	mov	r2, r7
 800b70a:	4628      	mov	r0, r5
 800b70c:	47b0      	blx	r6
 800b70e:	2800      	cmp	r0, #0
 800b710:	dc08      	bgt.n	800b724 <__sflush_r+0xfc>
 800b712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b71a:	81a3      	strh	r3, [r4, #12]
 800b71c:	f04f 30ff 	mov.w	r0, #4294967295
 800b720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b724:	4407      	add	r7, r0
 800b726:	eba8 0800 	sub.w	r8, r8, r0
 800b72a:	e7e7      	b.n	800b6fc <__sflush_r+0xd4>
 800b72c:	20400001 	.word	0x20400001

0800b730 <_fflush_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	690b      	ldr	r3, [r1, #16]
 800b734:	4605      	mov	r5, r0
 800b736:	460c      	mov	r4, r1
 800b738:	b913      	cbnz	r3, 800b740 <_fflush_r+0x10>
 800b73a:	2500      	movs	r5, #0
 800b73c:	4628      	mov	r0, r5
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	b118      	cbz	r0, 800b74a <_fflush_r+0x1a>
 800b742:	6a03      	ldr	r3, [r0, #32]
 800b744:	b90b      	cbnz	r3, 800b74a <_fflush_r+0x1a>
 800b746:	f7fd f8b7 	bl	80088b8 <__sinit>
 800b74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0f3      	beq.n	800b73a <_fflush_r+0xa>
 800b752:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b754:	07d0      	lsls	r0, r2, #31
 800b756:	d404      	bmi.n	800b762 <_fflush_r+0x32>
 800b758:	0599      	lsls	r1, r3, #22
 800b75a:	d402      	bmi.n	800b762 <_fflush_r+0x32>
 800b75c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b75e:	f7fd fa2c 	bl	8008bba <__retarget_lock_acquire_recursive>
 800b762:	4628      	mov	r0, r5
 800b764:	4621      	mov	r1, r4
 800b766:	f7ff ff5f 	bl	800b628 <__sflush_r>
 800b76a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b76c:	07da      	lsls	r2, r3, #31
 800b76e:	4605      	mov	r5, r0
 800b770:	d4e4      	bmi.n	800b73c <_fflush_r+0xc>
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	059b      	lsls	r3, r3, #22
 800b776:	d4e1      	bmi.n	800b73c <_fflush_r+0xc>
 800b778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b77a:	f7fd fa1f 	bl	8008bbc <__retarget_lock_release_recursive>
 800b77e:	e7dd      	b.n	800b73c <_fflush_r+0xc>

0800b780 <__swbuf_r>:
 800b780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b782:	460e      	mov	r6, r1
 800b784:	4614      	mov	r4, r2
 800b786:	4605      	mov	r5, r0
 800b788:	b118      	cbz	r0, 800b792 <__swbuf_r+0x12>
 800b78a:	6a03      	ldr	r3, [r0, #32]
 800b78c:	b90b      	cbnz	r3, 800b792 <__swbuf_r+0x12>
 800b78e:	f7fd f893 	bl	80088b8 <__sinit>
 800b792:	69a3      	ldr	r3, [r4, #24]
 800b794:	60a3      	str	r3, [r4, #8]
 800b796:	89a3      	ldrh	r3, [r4, #12]
 800b798:	071a      	lsls	r2, r3, #28
 800b79a:	d501      	bpl.n	800b7a0 <__swbuf_r+0x20>
 800b79c:	6923      	ldr	r3, [r4, #16]
 800b79e:	b943      	cbnz	r3, 800b7b2 <__swbuf_r+0x32>
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f000 f82a 	bl	800b7fc <__swsetup_r>
 800b7a8:	b118      	cbz	r0, 800b7b2 <__swbuf_r+0x32>
 800b7aa:	f04f 37ff 	mov.w	r7, #4294967295
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	6922      	ldr	r2, [r4, #16]
 800b7b6:	1a98      	subs	r0, r3, r2
 800b7b8:	6963      	ldr	r3, [r4, #20]
 800b7ba:	b2f6      	uxtb	r6, r6
 800b7bc:	4283      	cmp	r3, r0
 800b7be:	4637      	mov	r7, r6
 800b7c0:	dc05      	bgt.n	800b7ce <__swbuf_r+0x4e>
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	f7ff ffb3 	bl	800b730 <_fflush_r>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d1ed      	bne.n	800b7aa <__swbuf_r+0x2a>
 800b7ce:	68a3      	ldr	r3, [r4, #8]
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	60a3      	str	r3, [r4, #8]
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	1c5a      	adds	r2, r3, #1
 800b7d8:	6022      	str	r2, [r4, #0]
 800b7da:	701e      	strb	r6, [r3, #0]
 800b7dc:	6962      	ldr	r2, [r4, #20]
 800b7de:	1c43      	adds	r3, r0, #1
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d004      	beq.n	800b7ee <__swbuf_r+0x6e>
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	07db      	lsls	r3, r3, #31
 800b7e8:	d5e1      	bpl.n	800b7ae <__swbuf_r+0x2e>
 800b7ea:	2e0a      	cmp	r6, #10
 800b7ec:	d1df      	bne.n	800b7ae <__swbuf_r+0x2e>
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	f7ff ff9d 	bl	800b730 <_fflush_r>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d0d9      	beq.n	800b7ae <__swbuf_r+0x2e>
 800b7fa:	e7d6      	b.n	800b7aa <__swbuf_r+0x2a>

0800b7fc <__swsetup_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	4b29      	ldr	r3, [pc, #164]	@ (800b8a4 <__swsetup_r+0xa8>)
 800b800:	4605      	mov	r5, r0
 800b802:	6818      	ldr	r0, [r3, #0]
 800b804:	460c      	mov	r4, r1
 800b806:	b118      	cbz	r0, 800b810 <__swsetup_r+0x14>
 800b808:	6a03      	ldr	r3, [r0, #32]
 800b80a:	b90b      	cbnz	r3, 800b810 <__swsetup_r+0x14>
 800b80c:	f7fd f854 	bl	80088b8 <__sinit>
 800b810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b814:	0719      	lsls	r1, r3, #28
 800b816:	d422      	bmi.n	800b85e <__swsetup_r+0x62>
 800b818:	06da      	lsls	r2, r3, #27
 800b81a:	d407      	bmi.n	800b82c <__swsetup_r+0x30>
 800b81c:	2209      	movs	r2, #9
 800b81e:	602a      	str	r2, [r5, #0]
 800b820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b824:	81a3      	strh	r3, [r4, #12]
 800b826:	f04f 30ff 	mov.w	r0, #4294967295
 800b82a:	e033      	b.n	800b894 <__swsetup_r+0x98>
 800b82c:	0758      	lsls	r0, r3, #29
 800b82e:	d512      	bpl.n	800b856 <__swsetup_r+0x5a>
 800b830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b832:	b141      	cbz	r1, 800b846 <__swsetup_r+0x4a>
 800b834:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b838:	4299      	cmp	r1, r3
 800b83a:	d002      	beq.n	800b842 <__swsetup_r+0x46>
 800b83c:	4628      	mov	r0, r5
 800b83e:	f7fe f82b 	bl	8009898 <_free_r>
 800b842:	2300      	movs	r3, #0
 800b844:	6363      	str	r3, [r4, #52]	@ 0x34
 800b846:	89a3      	ldrh	r3, [r4, #12]
 800b848:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b84c:	81a3      	strh	r3, [r4, #12]
 800b84e:	2300      	movs	r3, #0
 800b850:	6063      	str	r3, [r4, #4]
 800b852:	6923      	ldr	r3, [r4, #16]
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	89a3      	ldrh	r3, [r4, #12]
 800b858:	f043 0308 	orr.w	r3, r3, #8
 800b85c:	81a3      	strh	r3, [r4, #12]
 800b85e:	6923      	ldr	r3, [r4, #16]
 800b860:	b94b      	cbnz	r3, 800b876 <__swsetup_r+0x7a>
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b86c:	d003      	beq.n	800b876 <__swsetup_r+0x7a>
 800b86e:	4621      	mov	r1, r4
 800b870:	4628      	mov	r0, r5
 800b872:	f000 fc4d 	bl	800c110 <__smakebuf_r>
 800b876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b87a:	f013 0201 	ands.w	r2, r3, #1
 800b87e:	d00a      	beq.n	800b896 <__swsetup_r+0x9a>
 800b880:	2200      	movs	r2, #0
 800b882:	60a2      	str	r2, [r4, #8]
 800b884:	6962      	ldr	r2, [r4, #20]
 800b886:	4252      	negs	r2, r2
 800b888:	61a2      	str	r2, [r4, #24]
 800b88a:	6922      	ldr	r2, [r4, #16]
 800b88c:	b942      	cbnz	r2, 800b8a0 <__swsetup_r+0xa4>
 800b88e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b892:	d1c5      	bne.n	800b820 <__swsetup_r+0x24>
 800b894:	bd38      	pop	{r3, r4, r5, pc}
 800b896:	0799      	lsls	r1, r3, #30
 800b898:	bf58      	it	pl
 800b89a:	6962      	ldrpl	r2, [r4, #20]
 800b89c:	60a2      	str	r2, [r4, #8]
 800b89e:	e7f4      	b.n	800b88a <__swsetup_r+0x8e>
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	e7f7      	b.n	800b894 <__swsetup_r+0x98>
 800b8a4:	2000001c 	.word	0x2000001c

0800b8a8 <memmove>:
 800b8a8:	4288      	cmp	r0, r1
 800b8aa:	b510      	push	{r4, lr}
 800b8ac:	eb01 0402 	add.w	r4, r1, r2
 800b8b0:	d902      	bls.n	800b8b8 <memmove+0x10>
 800b8b2:	4284      	cmp	r4, r0
 800b8b4:	4623      	mov	r3, r4
 800b8b6:	d807      	bhi.n	800b8c8 <memmove+0x20>
 800b8b8:	1e43      	subs	r3, r0, #1
 800b8ba:	42a1      	cmp	r1, r4
 800b8bc:	d008      	beq.n	800b8d0 <memmove+0x28>
 800b8be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8c6:	e7f8      	b.n	800b8ba <memmove+0x12>
 800b8c8:	4402      	add	r2, r0
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	428a      	cmp	r2, r1
 800b8ce:	d100      	bne.n	800b8d2 <memmove+0x2a>
 800b8d0:	bd10      	pop	{r4, pc}
 800b8d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8da:	e7f7      	b.n	800b8cc <memmove+0x24>

0800b8dc <strncmp>:
 800b8dc:	b510      	push	{r4, lr}
 800b8de:	b16a      	cbz	r2, 800b8fc <strncmp+0x20>
 800b8e0:	3901      	subs	r1, #1
 800b8e2:	1884      	adds	r4, r0, r2
 800b8e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d103      	bne.n	800b8f8 <strncmp+0x1c>
 800b8f0:	42a0      	cmp	r0, r4
 800b8f2:	d001      	beq.n	800b8f8 <strncmp+0x1c>
 800b8f4:	2a00      	cmp	r2, #0
 800b8f6:	d1f5      	bne.n	800b8e4 <strncmp+0x8>
 800b8f8:	1ad0      	subs	r0, r2, r3
 800b8fa:	bd10      	pop	{r4, pc}
 800b8fc:	4610      	mov	r0, r2
 800b8fe:	e7fc      	b.n	800b8fa <strncmp+0x1e>

0800b900 <_sbrk_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4d06      	ldr	r5, [pc, #24]	@ (800b91c <_sbrk_r+0x1c>)
 800b904:	2300      	movs	r3, #0
 800b906:	4604      	mov	r4, r0
 800b908:	4608      	mov	r0, r1
 800b90a:	602b      	str	r3, [r5, #0]
 800b90c:	f7f6 fba0 	bl	8002050 <_sbrk>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d102      	bne.n	800b91a <_sbrk_r+0x1a>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	b103      	cbz	r3, 800b91a <_sbrk_r+0x1a>
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	bd38      	pop	{r3, r4, r5, pc}
 800b91c:	20006248 	.word	0x20006248

0800b920 <nan>:
 800b920:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b928 <nan+0x8>
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	00000000 	.word	0x00000000
 800b92c:	7ff80000 	.word	0x7ff80000

0800b930 <__assert_func>:
 800b930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b932:	4614      	mov	r4, r2
 800b934:	461a      	mov	r2, r3
 800b936:	4b09      	ldr	r3, [pc, #36]	@ (800b95c <__assert_func+0x2c>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4605      	mov	r5, r0
 800b93c:	68d8      	ldr	r0, [r3, #12]
 800b93e:	b14c      	cbz	r4, 800b954 <__assert_func+0x24>
 800b940:	4b07      	ldr	r3, [pc, #28]	@ (800b960 <__assert_func+0x30>)
 800b942:	9100      	str	r1, [sp, #0]
 800b944:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b948:	4906      	ldr	r1, [pc, #24]	@ (800b964 <__assert_func+0x34>)
 800b94a:	462b      	mov	r3, r5
 800b94c:	f000 fba8 	bl	800c0a0 <fiprintf>
 800b950:	f000 fc3c 	bl	800c1cc <abort>
 800b954:	4b04      	ldr	r3, [pc, #16]	@ (800b968 <__assert_func+0x38>)
 800b956:	461c      	mov	r4, r3
 800b958:	e7f3      	b.n	800b942 <__assert_func+0x12>
 800b95a:	bf00      	nop
 800b95c:	2000001c 	.word	0x2000001c
 800b960:	0800c932 	.word	0x0800c932
 800b964:	0800c93f 	.word	0x0800c93f
 800b968:	0800c96d 	.word	0x0800c96d

0800b96c <_calloc_r>:
 800b96c:	b570      	push	{r4, r5, r6, lr}
 800b96e:	fba1 5402 	umull	r5, r4, r1, r2
 800b972:	b934      	cbnz	r4, 800b982 <_calloc_r+0x16>
 800b974:	4629      	mov	r1, r5
 800b976:	f7fe f803 	bl	8009980 <_malloc_r>
 800b97a:	4606      	mov	r6, r0
 800b97c:	b928      	cbnz	r0, 800b98a <_calloc_r+0x1e>
 800b97e:	4630      	mov	r0, r6
 800b980:	bd70      	pop	{r4, r5, r6, pc}
 800b982:	220c      	movs	r2, #12
 800b984:	6002      	str	r2, [r0, #0]
 800b986:	2600      	movs	r6, #0
 800b988:	e7f9      	b.n	800b97e <_calloc_r+0x12>
 800b98a:	462a      	mov	r2, r5
 800b98c:	4621      	mov	r1, r4
 800b98e:	f7fd f839 	bl	8008a04 <memset>
 800b992:	e7f4      	b.n	800b97e <_calloc_r+0x12>

0800b994 <rshift>:
 800b994:	6903      	ldr	r3, [r0, #16]
 800b996:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b99a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b99e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b9a2:	f100 0414 	add.w	r4, r0, #20
 800b9a6:	dd45      	ble.n	800ba34 <rshift+0xa0>
 800b9a8:	f011 011f 	ands.w	r1, r1, #31
 800b9ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b9b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b9b4:	d10c      	bne.n	800b9d0 <rshift+0x3c>
 800b9b6:	f100 0710 	add.w	r7, r0, #16
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	42b1      	cmp	r1, r6
 800b9be:	d334      	bcc.n	800ba2a <rshift+0x96>
 800b9c0:	1a9b      	subs	r3, r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	1eea      	subs	r2, r5, #3
 800b9c6:	4296      	cmp	r6, r2
 800b9c8:	bf38      	it	cc
 800b9ca:	2300      	movcc	r3, #0
 800b9cc:	4423      	add	r3, r4
 800b9ce:	e015      	b.n	800b9fc <rshift+0x68>
 800b9d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b9d4:	f1c1 0820 	rsb	r8, r1, #32
 800b9d8:	40cf      	lsrs	r7, r1
 800b9da:	f105 0e04 	add.w	lr, r5, #4
 800b9de:	46a1      	mov	r9, r4
 800b9e0:	4576      	cmp	r6, lr
 800b9e2:	46f4      	mov	ip, lr
 800b9e4:	d815      	bhi.n	800ba12 <rshift+0x7e>
 800b9e6:	1a9a      	subs	r2, r3, r2
 800b9e8:	0092      	lsls	r2, r2, #2
 800b9ea:	3a04      	subs	r2, #4
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	42ae      	cmp	r6, r5
 800b9f0:	bf38      	it	cc
 800b9f2:	2200      	movcc	r2, #0
 800b9f4:	18a3      	adds	r3, r4, r2
 800b9f6:	50a7      	str	r7, [r4, r2]
 800b9f8:	b107      	cbz	r7, 800b9fc <rshift+0x68>
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	1b1a      	subs	r2, r3, r4
 800b9fe:	42a3      	cmp	r3, r4
 800ba00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba04:	bf08      	it	eq
 800ba06:	2300      	moveq	r3, #0
 800ba08:	6102      	str	r2, [r0, #16]
 800ba0a:	bf08      	it	eq
 800ba0c:	6143      	streq	r3, [r0, #20]
 800ba0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba12:	f8dc c000 	ldr.w	ip, [ip]
 800ba16:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba1a:	ea4c 0707 	orr.w	r7, ip, r7
 800ba1e:	f849 7b04 	str.w	r7, [r9], #4
 800ba22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba26:	40cf      	lsrs	r7, r1
 800ba28:	e7da      	b.n	800b9e0 <rshift+0x4c>
 800ba2a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba2e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba32:	e7c3      	b.n	800b9bc <rshift+0x28>
 800ba34:	4623      	mov	r3, r4
 800ba36:	e7e1      	b.n	800b9fc <rshift+0x68>

0800ba38 <__hexdig_fun>:
 800ba38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ba3c:	2b09      	cmp	r3, #9
 800ba3e:	d802      	bhi.n	800ba46 <__hexdig_fun+0xe>
 800ba40:	3820      	subs	r0, #32
 800ba42:	b2c0      	uxtb	r0, r0
 800ba44:	4770      	bx	lr
 800ba46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ba4a:	2b05      	cmp	r3, #5
 800ba4c:	d801      	bhi.n	800ba52 <__hexdig_fun+0x1a>
 800ba4e:	3847      	subs	r0, #71	@ 0x47
 800ba50:	e7f7      	b.n	800ba42 <__hexdig_fun+0xa>
 800ba52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ba56:	2b05      	cmp	r3, #5
 800ba58:	d801      	bhi.n	800ba5e <__hexdig_fun+0x26>
 800ba5a:	3827      	subs	r0, #39	@ 0x27
 800ba5c:	e7f1      	b.n	800ba42 <__hexdig_fun+0xa>
 800ba5e:	2000      	movs	r0, #0
 800ba60:	4770      	bx	lr
	...

0800ba64 <__gethex>:
 800ba64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba68:	b085      	sub	sp, #20
 800ba6a:	468a      	mov	sl, r1
 800ba6c:	9302      	str	r3, [sp, #8]
 800ba6e:	680b      	ldr	r3, [r1, #0]
 800ba70:	9001      	str	r0, [sp, #4]
 800ba72:	4690      	mov	r8, r2
 800ba74:	1c9c      	adds	r4, r3, #2
 800ba76:	46a1      	mov	r9, r4
 800ba78:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ba7c:	2830      	cmp	r0, #48	@ 0x30
 800ba7e:	d0fa      	beq.n	800ba76 <__gethex+0x12>
 800ba80:	eba9 0303 	sub.w	r3, r9, r3
 800ba84:	f1a3 0b02 	sub.w	fp, r3, #2
 800ba88:	f7ff ffd6 	bl	800ba38 <__hexdig_fun>
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d168      	bne.n	800bb64 <__gethex+0x100>
 800ba92:	49a0      	ldr	r1, [pc, #640]	@ (800bd14 <__gethex+0x2b0>)
 800ba94:	2201      	movs	r2, #1
 800ba96:	4648      	mov	r0, r9
 800ba98:	f7ff ff20 	bl	800b8dc <strncmp>
 800ba9c:	4607      	mov	r7, r0
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d167      	bne.n	800bb72 <__gethex+0x10e>
 800baa2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800baa6:	4626      	mov	r6, r4
 800baa8:	f7ff ffc6 	bl	800ba38 <__hexdig_fun>
 800baac:	2800      	cmp	r0, #0
 800baae:	d062      	beq.n	800bb76 <__gethex+0x112>
 800bab0:	4623      	mov	r3, r4
 800bab2:	7818      	ldrb	r0, [r3, #0]
 800bab4:	2830      	cmp	r0, #48	@ 0x30
 800bab6:	4699      	mov	r9, r3
 800bab8:	f103 0301 	add.w	r3, r3, #1
 800babc:	d0f9      	beq.n	800bab2 <__gethex+0x4e>
 800babe:	f7ff ffbb 	bl	800ba38 <__hexdig_fun>
 800bac2:	fab0 f580 	clz	r5, r0
 800bac6:	096d      	lsrs	r5, r5, #5
 800bac8:	f04f 0b01 	mov.w	fp, #1
 800bacc:	464a      	mov	r2, r9
 800bace:	4616      	mov	r6, r2
 800bad0:	3201      	adds	r2, #1
 800bad2:	7830      	ldrb	r0, [r6, #0]
 800bad4:	f7ff ffb0 	bl	800ba38 <__hexdig_fun>
 800bad8:	2800      	cmp	r0, #0
 800bada:	d1f8      	bne.n	800bace <__gethex+0x6a>
 800badc:	498d      	ldr	r1, [pc, #564]	@ (800bd14 <__gethex+0x2b0>)
 800bade:	2201      	movs	r2, #1
 800bae0:	4630      	mov	r0, r6
 800bae2:	f7ff fefb 	bl	800b8dc <strncmp>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d13f      	bne.n	800bb6a <__gethex+0x106>
 800baea:	b944      	cbnz	r4, 800bafe <__gethex+0x9a>
 800baec:	1c74      	adds	r4, r6, #1
 800baee:	4622      	mov	r2, r4
 800baf0:	4616      	mov	r6, r2
 800baf2:	3201      	adds	r2, #1
 800baf4:	7830      	ldrb	r0, [r6, #0]
 800baf6:	f7ff ff9f 	bl	800ba38 <__hexdig_fun>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d1f8      	bne.n	800baf0 <__gethex+0x8c>
 800bafe:	1ba4      	subs	r4, r4, r6
 800bb00:	00a7      	lsls	r7, r4, #2
 800bb02:	7833      	ldrb	r3, [r6, #0]
 800bb04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bb08:	2b50      	cmp	r3, #80	@ 0x50
 800bb0a:	d13e      	bne.n	800bb8a <__gethex+0x126>
 800bb0c:	7873      	ldrb	r3, [r6, #1]
 800bb0e:	2b2b      	cmp	r3, #43	@ 0x2b
 800bb10:	d033      	beq.n	800bb7a <__gethex+0x116>
 800bb12:	2b2d      	cmp	r3, #45	@ 0x2d
 800bb14:	d034      	beq.n	800bb80 <__gethex+0x11c>
 800bb16:	1c71      	adds	r1, r6, #1
 800bb18:	2400      	movs	r4, #0
 800bb1a:	7808      	ldrb	r0, [r1, #0]
 800bb1c:	f7ff ff8c 	bl	800ba38 <__hexdig_fun>
 800bb20:	1e43      	subs	r3, r0, #1
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	2b18      	cmp	r3, #24
 800bb26:	d830      	bhi.n	800bb8a <__gethex+0x126>
 800bb28:	f1a0 0210 	sub.w	r2, r0, #16
 800bb2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb30:	f7ff ff82 	bl	800ba38 <__hexdig_fun>
 800bb34:	f100 3cff 	add.w	ip, r0, #4294967295
 800bb38:	fa5f fc8c 	uxtb.w	ip, ip
 800bb3c:	f1bc 0f18 	cmp.w	ip, #24
 800bb40:	f04f 030a 	mov.w	r3, #10
 800bb44:	d91e      	bls.n	800bb84 <__gethex+0x120>
 800bb46:	b104      	cbz	r4, 800bb4a <__gethex+0xe6>
 800bb48:	4252      	negs	r2, r2
 800bb4a:	4417      	add	r7, r2
 800bb4c:	f8ca 1000 	str.w	r1, [sl]
 800bb50:	b1ed      	cbz	r5, 800bb8e <__gethex+0x12a>
 800bb52:	f1bb 0f00 	cmp.w	fp, #0
 800bb56:	bf0c      	ite	eq
 800bb58:	2506      	moveq	r5, #6
 800bb5a:	2500      	movne	r5, #0
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	b005      	add	sp, #20
 800bb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb64:	2500      	movs	r5, #0
 800bb66:	462c      	mov	r4, r5
 800bb68:	e7b0      	b.n	800bacc <__gethex+0x68>
 800bb6a:	2c00      	cmp	r4, #0
 800bb6c:	d1c7      	bne.n	800bafe <__gethex+0x9a>
 800bb6e:	4627      	mov	r7, r4
 800bb70:	e7c7      	b.n	800bb02 <__gethex+0x9e>
 800bb72:	464e      	mov	r6, r9
 800bb74:	462f      	mov	r7, r5
 800bb76:	2501      	movs	r5, #1
 800bb78:	e7c3      	b.n	800bb02 <__gethex+0x9e>
 800bb7a:	2400      	movs	r4, #0
 800bb7c:	1cb1      	adds	r1, r6, #2
 800bb7e:	e7cc      	b.n	800bb1a <__gethex+0xb6>
 800bb80:	2401      	movs	r4, #1
 800bb82:	e7fb      	b.n	800bb7c <__gethex+0x118>
 800bb84:	fb03 0002 	mla	r0, r3, r2, r0
 800bb88:	e7ce      	b.n	800bb28 <__gethex+0xc4>
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	e7de      	b.n	800bb4c <__gethex+0xe8>
 800bb8e:	eba6 0309 	sub.w	r3, r6, r9
 800bb92:	3b01      	subs	r3, #1
 800bb94:	4629      	mov	r1, r5
 800bb96:	2b07      	cmp	r3, #7
 800bb98:	dc0a      	bgt.n	800bbb0 <__gethex+0x14c>
 800bb9a:	9801      	ldr	r0, [sp, #4]
 800bb9c:	f7fd ff7c 	bl	8009a98 <_Balloc>
 800bba0:	4604      	mov	r4, r0
 800bba2:	b940      	cbnz	r0, 800bbb6 <__gethex+0x152>
 800bba4:	4b5c      	ldr	r3, [pc, #368]	@ (800bd18 <__gethex+0x2b4>)
 800bba6:	4602      	mov	r2, r0
 800bba8:	21e4      	movs	r1, #228	@ 0xe4
 800bbaa:	485c      	ldr	r0, [pc, #368]	@ (800bd1c <__gethex+0x2b8>)
 800bbac:	f7ff fec0 	bl	800b930 <__assert_func>
 800bbb0:	3101      	adds	r1, #1
 800bbb2:	105b      	asrs	r3, r3, #1
 800bbb4:	e7ef      	b.n	800bb96 <__gethex+0x132>
 800bbb6:	f100 0a14 	add.w	sl, r0, #20
 800bbba:	2300      	movs	r3, #0
 800bbbc:	4655      	mov	r5, sl
 800bbbe:	469b      	mov	fp, r3
 800bbc0:	45b1      	cmp	r9, r6
 800bbc2:	d337      	bcc.n	800bc34 <__gethex+0x1d0>
 800bbc4:	f845 bb04 	str.w	fp, [r5], #4
 800bbc8:	eba5 050a 	sub.w	r5, r5, sl
 800bbcc:	10ad      	asrs	r5, r5, #2
 800bbce:	6125      	str	r5, [r4, #16]
 800bbd0:	4658      	mov	r0, fp
 800bbd2:	f7fe f853 	bl	8009c7c <__hi0bits>
 800bbd6:	016d      	lsls	r5, r5, #5
 800bbd8:	f8d8 6000 	ldr.w	r6, [r8]
 800bbdc:	1a2d      	subs	r5, r5, r0
 800bbde:	42b5      	cmp	r5, r6
 800bbe0:	dd54      	ble.n	800bc8c <__gethex+0x228>
 800bbe2:	1bad      	subs	r5, r5, r6
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f7fe fbdf 	bl	800a3aa <__any_on>
 800bbec:	4681      	mov	r9, r0
 800bbee:	b178      	cbz	r0, 800bc10 <__gethex+0x1ac>
 800bbf0:	1e6b      	subs	r3, r5, #1
 800bbf2:	1159      	asrs	r1, r3, #5
 800bbf4:	f003 021f 	and.w	r2, r3, #31
 800bbf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bbfc:	f04f 0901 	mov.w	r9, #1
 800bc00:	fa09 f202 	lsl.w	r2, r9, r2
 800bc04:	420a      	tst	r2, r1
 800bc06:	d003      	beq.n	800bc10 <__gethex+0x1ac>
 800bc08:	454b      	cmp	r3, r9
 800bc0a:	dc36      	bgt.n	800bc7a <__gethex+0x216>
 800bc0c:	f04f 0902 	mov.w	r9, #2
 800bc10:	4629      	mov	r1, r5
 800bc12:	4620      	mov	r0, r4
 800bc14:	f7ff febe 	bl	800b994 <rshift>
 800bc18:	442f      	add	r7, r5
 800bc1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc1e:	42bb      	cmp	r3, r7
 800bc20:	da42      	bge.n	800bca8 <__gethex+0x244>
 800bc22:	9801      	ldr	r0, [sp, #4]
 800bc24:	4621      	mov	r1, r4
 800bc26:	f7fd ff77 	bl	8009b18 <_Bfree>
 800bc2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	6013      	str	r3, [r2, #0]
 800bc30:	25a3      	movs	r5, #163	@ 0xa3
 800bc32:	e793      	b.n	800bb5c <__gethex+0xf8>
 800bc34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bc38:	2a2e      	cmp	r2, #46	@ 0x2e
 800bc3a:	d012      	beq.n	800bc62 <__gethex+0x1fe>
 800bc3c:	2b20      	cmp	r3, #32
 800bc3e:	d104      	bne.n	800bc4a <__gethex+0x1e6>
 800bc40:	f845 bb04 	str.w	fp, [r5], #4
 800bc44:	f04f 0b00 	mov.w	fp, #0
 800bc48:	465b      	mov	r3, fp
 800bc4a:	7830      	ldrb	r0, [r6, #0]
 800bc4c:	9303      	str	r3, [sp, #12]
 800bc4e:	f7ff fef3 	bl	800ba38 <__hexdig_fun>
 800bc52:	9b03      	ldr	r3, [sp, #12]
 800bc54:	f000 000f 	and.w	r0, r0, #15
 800bc58:	4098      	lsls	r0, r3
 800bc5a:	ea4b 0b00 	orr.w	fp, fp, r0
 800bc5e:	3304      	adds	r3, #4
 800bc60:	e7ae      	b.n	800bbc0 <__gethex+0x15c>
 800bc62:	45b1      	cmp	r9, r6
 800bc64:	d8ea      	bhi.n	800bc3c <__gethex+0x1d8>
 800bc66:	492b      	ldr	r1, [pc, #172]	@ (800bd14 <__gethex+0x2b0>)
 800bc68:	9303      	str	r3, [sp, #12]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7ff fe35 	bl	800b8dc <strncmp>
 800bc72:	9b03      	ldr	r3, [sp, #12]
 800bc74:	2800      	cmp	r0, #0
 800bc76:	d1e1      	bne.n	800bc3c <__gethex+0x1d8>
 800bc78:	e7a2      	b.n	800bbc0 <__gethex+0x15c>
 800bc7a:	1ea9      	subs	r1, r5, #2
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f7fe fb94 	bl	800a3aa <__any_on>
 800bc82:	2800      	cmp	r0, #0
 800bc84:	d0c2      	beq.n	800bc0c <__gethex+0x1a8>
 800bc86:	f04f 0903 	mov.w	r9, #3
 800bc8a:	e7c1      	b.n	800bc10 <__gethex+0x1ac>
 800bc8c:	da09      	bge.n	800bca2 <__gethex+0x23e>
 800bc8e:	1b75      	subs	r5, r6, r5
 800bc90:	4621      	mov	r1, r4
 800bc92:	9801      	ldr	r0, [sp, #4]
 800bc94:	462a      	mov	r2, r5
 800bc96:	f7fe f94f 	bl	8009f38 <__lshift>
 800bc9a:	1b7f      	subs	r7, r7, r5
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	f100 0a14 	add.w	sl, r0, #20
 800bca2:	f04f 0900 	mov.w	r9, #0
 800bca6:	e7b8      	b.n	800bc1a <__gethex+0x1b6>
 800bca8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bcac:	42bd      	cmp	r5, r7
 800bcae:	dd6f      	ble.n	800bd90 <__gethex+0x32c>
 800bcb0:	1bed      	subs	r5, r5, r7
 800bcb2:	42ae      	cmp	r6, r5
 800bcb4:	dc34      	bgt.n	800bd20 <__gethex+0x2bc>
 800bcb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d022      	beq.n	800bd04 <__gethex+0x2a0>
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d024      	beq.n	800bd0c <__gethex+0x2a8>
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d115      	bne.n	800bcf2 <__gethex+0x28e>
 800bcc6:	42ae      	cmp	r6, r5
 800bcc8:	d113      	bne.n	800bcf2 <__gethex+0x28e>
 800bcca:	2e01      	cmp	r6, #1
 800bccc:	d10b      	bne.n	800bce6 <__gethex+0x282>
 800bcce:	9a02      	ldr	r2, [sp, #8]
 800bcd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bcd4:	6013      	str	r3, [r2, #0]
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	6123      	str	r3, [r4, #16]
 800bcda:	f8ca 3000 	str.w	r3, [sl]
 800bcde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bce0:	2562      	movs	r5, #98	@ 0x62
 800bce2:	601c      	str	r4, [r3, #0]
 800bce4:	e73a      	b.n	800bb5c <__gethex+0xf8>
 800bce6:	1e71      	subs	r1, r6, #1
 800bce8:	4620      	mov	r0, r4
 800bcea:	f7fe fb5e 	bl	800a3aa <__any_on>
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d1ed      	bne.n	800bcce <__gethex+0x26a>
 800bcf2:	9801      	ldr	r0, [sp, #4]
 800bcf4:	4621      	mov	r1, r4
 800bcf6:	f7fd ff0f 	bl	8009b18 <_Bfree>
 800bcfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	2550      	movs	r5, #80	@ 0x50
 800bd02:	e72b      	b.n	800bb5c <__gethex+0xf8>
 800bd04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1f3      	bne.n	800bcf2 <__gethex+0x28e>
 800bd0a:	e7e0      	b.n	800bcce <__gethex+0x26a>
 800bd0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1dd      	bne.n	800bcce <__gethex+0x26a>
 800bd12:	e7ee      	b.n	800bcf2 <__gethex+0x28e>
 800bd14:	0800c917 	.word	0x0800c917
 800bd18:	0800c8ad 	.word	0x0800c8ad
 800bd1c:	0800c96e 	.word	0x0800c96e
 800bd20:	1e6f      	subs	r7, r5, #1
 800bd22:	f1b9 0f00 	cmp.w	r9, #0
 800bd26:	d130      	bne.n	800bd8a <__gethex+0x326>
 800bd28:	b127      	cbz	r7, 800bd34 <__gethex+0x2d0>
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f7fe fb3c 	bl	800a3aa <__any_on>
 800bd32:	4681      	mov	r9, r0
 800bd34:	117a      	asrs	r2, r7, #5
 800bd36:	2301      	movs	r3, #1
 800bd38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bd3c:	f007 071f 	and.w	r7, r7, #31
 800bd40:	40bb      	lsls	r3, r7
 800bd42:	4213      	tst	r3, r2
 800bd44:	4629      	mov	r1, r5
 800bd46:	4620      	mov	r0, r4
 800bd48:	bf18      	it	ne
 800bd4a:	f049 0902 	orrne.w	r9, r9, #2
 800bd4e:	f7ff fe21 	bl	800b994 <rshift>
 800bd52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bd56:	1b76      	subs	r6, r6, r5
 800bd58:	2502      	movs	r5, #2
 800bd5a:	f1b9 0f00 	cmp.w	r9, #0
 800bd5e:	d047      	beq.n	800bdf0 <__gethex+0x38c>
 800bd60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d015      	beq.n	800bd94 <__gethex+0x330>
 800bd68:	2b03      	cmp	r3, #3
 800bd6a:	d017      	beq.n	800bd9c <__gethex+0x338>
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d109      	bne.n	800bd84 <__gethex+0x320>
 800bd70:	f019 0f02 	tst.w	r9, #2
 800bd74:	d006      	beq.n	800bd84 <__gethex+0x320>
 800bd76:	f8da 3000 	ldr.w	r3, [sl]
 800bd7a:	ea49 0903 	orr.w	r9, r9, r3
 800bd7e:	f019 0f01 	tst.w	r9, #1
 800bd82:	d10e      	bne.n	800bda2 <__gethex+0x33e>
 800bd84:	f045 0510 	orr.w	r5, r5, #16
 800bd88:	e032      	b.n	800bdf0 <__gethex+0x38c>
 800bd8a:	f04f 0901 	mov.w	r9, #1
 800bd8e:	e7d1      	b.n	800bd34 <__gethex+0x2d0>
 800bd90:	2501      	movs	r5, #1
 800bd92:	e7e2      	b.n	800bd5a <__gethex+0x2f6>
 800bd94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd96:	f1c3 0301 	rsb	r3, r3, #1
 800bd9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0f0      	beq.n	800bd84 <__gethex+0x320>
 800bda2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bda6:	f104 0314 	add.w	r3, r4, #20
 800bdaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bdae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bdb2:	f04f 0c00 	mov.w	ip, #0
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bdc0:	d01b      	beq.n	800bdfa <__gethex+0x396>
 800bdc2:	3201      	adds	r2, #1
 800bdc4:	6002      	str	r2, [r0, #0]
 800bdc6:	2d02      	cmp	r5, #2
 800bdc8:	f104 0314 	add.w	r3, r4, #20
 800bdcc:	d13c      	bne.n	800be48 <__gethex+0x3e4>
 800bdce:	f8d8 2000 	ldr.w	r2, [r8]
 800bdd2:	3a01      	subs	r2, #1
 800bdd4:	42b2      	cmp	r2, r6
 800bdd6:	d109      	bne.n	800bdec <__gethex+0x388>
 800bdd8:	1171      	asrs	r1, r6, #5
 800bdda:	2201      	movs	r2, #1
 800bddc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bde0:	f006 061f 	and.w	r6, r6, #31
 800bde4:	fa02 f606 	lsl.w	r6, r2, r6
 800bde8:	421e      	tst	r6, r3
 800bdea:	d13a      	bne.n	800be62 <__gethex+0x3fe>
 800bdec:	f045 0520 	orr.w	r5, r5, #32
 800bdf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdf2:	601c      	str	r4, [r3, #0]
 800bdf4:	9b02      	ldr	r3, [sp, #8]
 800bdf6:	601f      	str	r7, [r3, #0]
 800bdf8:	e6b0      	b.n	800bb5c <__gethex+0xf8>
 800bdfa:	4299      	cmp	r1, r3
 800bdfc:	f843 cc04 	str.w	ip, [r3, #-4]
 800be00:	d8d9      	bhi.n	800bdb6 <__gethex+0x352>
 800be02:	68a3      	ldr	r3, [r4, #8]
 800be04:	459b      	cmp	fp, r3
 800be06:	db17      	blt.n	800be38 <__gethex+0x3d4>
 800be08:	6861      	ldr	r1, [r4, #4]
 800be0a:	9801      	ldr	r0, [sp, #4]
 800be0c:	3101      	adds	r1, #1
 800be0e:	f7fd fe43 	bl	8009a98 <_Balloc>
 800be12:	4681      	mov	r9, r0
 800be14:	b918      	cbnz	r0, 800be1e <__gethex+0x3ba>
 800be16:	4b1a      	ldr	r3, [pc, #104]	@ (800be80 <__gethex+0x41c>)
 800be18:	4602      	mov	r2, r0
 800be1a:	2184      	movs	r1, #132	@ 0x84
 800be1c:	e6c5      	b.n	800bbaa <__gethex+0x146>
 800be1e:	6922      	ldr	r2, [r4, #16]
 800be20:	3202      	adds	r2, #2
 800be22:	f104 010c 	add.w	r1, r4, #12
 800be26:	0092      	lsls	r2, r2, #2
 800be28:	300c      	adds	r0, #12
 800be2a:	f7fc fec8 	bl	8008bbe <memcpy>
 800be2e:	4621      	mov	r1, r4
 800be30:	9801      	ldr	r0, [sp, #4]
 800be32:	f7fd fe71 	bl	8009b18 <_Bfree>
 800be36:	464c      	mov	r4, r9
 800be38:	6923      	ldr	r3, [r4, #16]
 800be3a:	1c5a      	adds	r2, r3, #1
 800be3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be40:	6122      	str	r2, [r4, #16]
 800be42:	2201      	movs	r2, #1
 800be44:	615a      	str	r2, [r3, #20]
 800be46:	e7be      	b.n	800bdc6 <__gethex+0x362>
 800be48:	6922      	ldr	r2, [r4, #16]
 800be4a:	455a      	cmp	r2, fp
 800be4c:	dd0b      	ble.n	800be66 <__gethex+0x402>
 800be4e:	2101      	movs	r1, #1
 800be50:	4620      	mov	r0, r4
 800be52:	f7ff fd9f 	bl	800b994 <rshift>
 800be56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be5a:	3701      	adds	r7, #1
 800be5c:	42bb      	cmp	r3, r7
 800be5e:	f6ff aee0 	blt.w	800bc22 <__gethex+0x1be>
 800be62:	2501      	movs	r5, #1
 800be64:	e7c2      	b.n	800bdec <__gethex+0x388>
 800be66:	f016 061f 	ands.w	r6, r6, #31
 800be6a:	d0fa      	beq.n	800be62 <__gethex+0x3fe>
 800be6c:	4453      	add	r3, sl
 800be6e:	f1c6 0620 	rsb	r6, r6, #32
 800be72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800be76:	f7fd ff01 	bl	8009c7c <__hi0bits>
 800be7a:	42b0      	cmp	r0, r6
 800be7c:	dbe7      	blt.n	800be4e <__gethex+0x3ea>
 800be7e:	e7f0      	b.n	800be62 <__gethex+0x3fe>
 800be80:	0800c8ad 	.word	0x0800c8ad

0800be84 <L_shift>:
 800be84:	f1c2 0208 	rsb	r2, r2, #8
 800be88:	0092      	lsls	r2, r2, #2
 800be8a:	b570      	push	{r4, r5, r6, lr}
 800be8c:	f1c2 0620 	rsb	r6, r2, #32
 800be90:	6843      	ldr	r3, [r0, #4]
 800be92:	6804      	ldr	r4, [r0, #0]
 800be94:	fa03 f506 	lsl.w	r5, r3, r6
 800be98:	432c      	orrs	r4, r5
 800be9a:	40d3      	lsrs	r3, r2
 800be9c:	6004      	str	r4, [r0, #0]
 800be9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800bea2:	4288      	cmp	r0, r1
 800bea4:	d3f4      	bcc.n	800be90 <L_shift+0xc>
 800bea6:	bd70      	pop	{r4, r5, r6, pc}

0800bea8 <__match>:
 800bea8:	b530      	push	{r4, r5, lr}
 800beaa:	6803      	ldr	r3, [r0, #0]
 800beac:	3301      	adds	r3, #1
 800beae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beb2:	b914      	cbnz	r4, 800beba <__match+0x12>
 800beb4:	6003      	str	r3, [r0, #0]
 800beb6:	2001      	movs	r0, #1
 800beb8:	bd30      	pop	{r4, r5, pc}
 800beba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bebe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bec2:	2d19      	cmp	r5, #25
 800bec4:	bf98      	it	ls
 800bec6:	3220      	addls	r2, #32
 800bec8:	42a2      	cmp	r2, r4
 800beca:	d0f0      	beq.n	800beae <__match+0x6>
 800becc:	2000      	movs	r0, #0
 800bece:	e7f3      	b.n	800beb8 <__match+0x10>

0800bed0 <__hexnan>:
 800bed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed4:	680b      	ldr	r3, [r1, #0]
 800bed6:	6801      	ldr	r1, [r0, #0]
 800bed8:	115e      	asrs	r6, r3, #5
 800beda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bede:	f013 031f 	ands.w	r3, r3, #31
 800bee2:	b087      	sub	sp, #28
 800bee4:	bf18      	it	ne
 800bee6:	3604      	addne	r6, #4
 800bee8:	2500      	movs	r5, #0
 800beea:	1f37      	subs	r7, r6, #4
 800beec:	4682      	mov	sl, r0
 800beee:	4690      	mov	r8, r2
 800bef0:	9301      	str	r3, [sp, #4]
 800bef2:	f846 5c04 	str.w	r5, [r6, #-4]
 800bef6:	46b9      	mov	r9, r7
 800bef8:	463c      	mov	r4, r7
 800befa:	9502      	str	r5, [sp, #8]
 800befc:	46ab      	mov	fp, r5
 800befe:	784a      	ldrb	r2, [r1, #1]
 800bf00:	1c4b      	adds	r3, r1, #1
 800bf02:	9303      	str	r3, [sp, #12]
 800bf04:	b342      	cbz	r2, 800bf58 <__hexnan+0x88>
 800bf06:	4610      	mov	r0, r2
 800bf08:	9105      	str	r1, [sp, #20]
 800bf0a:	9204      	str	r2, [sp, #16]
 800bf0c:	f7ff fd94 	bl	800ba38 <__hexdig_fun>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d151      	bne.n	800bfb8 <__hexnan+0xe8>
 800bf14:	9a04      	ldr	r2, [sp, #16]
 800bf16:	9905      	ldr	r1, [sp, #20]
 800bf18:	2a20      	cmp	r2, #32
 800bf1a:	d818      	bhi.n	800bf4e <__hexnan+0x7e>
 800bf1c:	9b02      	ldr	r3, [sp, #8]
 800bf1e:	459b      	cmp	fp, r3
 800bf20:	dd13      	ble.n	800bf4a <__hexnan+0x7a>
 800bf22:	454c      	cmp	r4, r9
 800bf24:	d206      	bcs.n	800bf34 <__hexnan+0x64>
 800bf26:	2d07      	cmp	r5, #7
 800bf28:	dc04      	bgt.n	800bf34 <__hexnan+0x64>
 800bf2a:	462a      	mov	r2, r5
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f7ff ffa8 	bl	800be84 <L_shift>
 800bf34:	4544      	cmp	r4, r8
 800bf36:	d952      	bls.n	800bfde <__hexnan+0x10e>
 800bf38:	2300      	movs	r3, #0
 800bf3a:	f1a4 0904 	sub.w	r9, r4, #4
 800bf3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf42:	f8cd b008 	str.w	fp, [sp, #8]
 800bf46:	464c      	mov	r4, r9
 800bf48:	461d      	mov	r5, r3
 800bf4a:	9903      	ldr	r1, [sp, #12]
 800bf4c:	e7d7      	b.n	800befe <__hexnan+0x2e>
 800bf4e:	2a29      	cmp	r2, #41	@ 0x29
 800bf50:	d157      	bne.n	800c002 <__hexnan+0x132>
 800bf52:	3102      	adds	r1, #2
 800bf54:	f8ca 1000 	str.w	r1, [sl]
 800bf58:	f1bb 0f00 	cmp.w	fp, #0
 800bf5c:	d051      	beq.n	800c002 <__hexnan+0x132>
 800bf5e:	454c      	cmp	r4, r9
 800bf60:	d206      	bcs.n	800bf70 <__hexnan+0xa0>
 800bf62:	2d07      	cmp	r5, #7
 800bf64:	dc04      	bgt.n	800bf70 <__hexnan+0xa0>
 800bf66:	462a      	mov	r2, r5
 800bf68:	4649      	mov	r1, r9
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f7ff ff8a 	bl	800be84 <L_shift>
 800bf70:	4544      	cmp	r4, r8
 800bf72:	d936      	bls.n	800bfe2 <__hexnan+0x112>
 800bf74:	f1a8 0204 	sub.w	r2, r8, #4
 800bf78:	4623      	mov	r3, r4
 800bf7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bf82:	429f      	cmp	r7, r3
 800bf84:	d2f9      	bcs.n	800bf7a <__hexnan+0xaa>
 800bf86:	1b3b      	subs	r3, r7, r4
 800bf88:	f023 0303 	bic.w	r3, r3, #3
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	3401      	adds	r4, #1
 800bf90:	3e03      	subs	r6, #3
 800bf92:	42b4      	cmp	r4, r6
 800bf94:	bf88      	it	hi
 800bf96:	2304      	movhi	r3, #4
 800bf98:	4443      	add	r3, r8
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f843 2b04 	str.w	r2, [r3], #4
 800bfa0:	429f      	cmp	r7, r3
 800bfa2:	d2fb      	bcs.n	800bf9c <__hexnan+0xcc>
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	b91b      	cbnz	r3, 800bfb0 <__hexnan+0xe0>
 800bfa8:	4547      	cmp	r7, r8
 800bfaa:	d128      	bne.n	800bffe <__hexnan+0x12e>
 800bfac:	2301      	movs	r3, #1
 800bfae:	603b      	str	r3, [r7, #0]
 800bfb0:	2005      	movs	r0, #5
 800bfb2:	b007      	add	sp, #28
 800bfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb8:	3501      	adds	r5, #1
 800bfba:	2d08      	cmp	r5, #8
 800bfbc:	f10b 0b01 	add.w	fp, fp, #1
 800bfc0:	dd06      	ble.n	800bfd0 <__hexnan+0x100>
 800bfc2:	4544      	cmp	r4, r8
 800bfc4:	d9c1      	bls.n	800bf4a <__hexnan+0x7a>
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfcc:	2501      	movs	r5, #1
 800bfce:	3c04      	subs	r4, #4
 800bfd0:	6822      	ldr	r2, [r4, #0]
 800bfd2:	f000 000f 	and.w	r0, r0, #15
 800bfd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bfda:	6020      	str	r0, [r4, #0]
 800bfdc:	e7b5      	b.n	800bf4a <__hexnan+0x7a>
 800bfde:	2508      	movs	r5, #8
 800bfe0:	e7b3      	b.n	800bf4a <__hexnan+0x7a>
 800bfe2:	9b01      	ldr	r3, [sp, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0dd      	beq.n	800bfa4 <__hexnan+0xd4>
 800bfe8:	f1c3 0320 	rsb	r3, r3, #32
 800bfec:	f04f 32ff 	mov.w	r2, #4294967295
 800bff0:	40da      	lsrs	r2, r3
 800bff2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bff6:	4013      	ands	r3, r2
 800bff8:	f846 3c04 	str.w	r3, [r6, #-4]
 800bffc:	e7d2      	b.n	800bfa4 <__hexnan+0xd4>
 800bffe:	3f04      	subs	r7, #4
 800c000:	e7d0      	b.n	800bfa4 <__hexnan+0xd4>
 800c002:	2004      	movs	r0, #4
 800c004:	e7d5      	b.n	800bfb2 <__hexnan+0xe2>

0800c006 <__ascii_mbtowc>:
 800c006:	b082      	sub	sp, #8
 800c008:	b901      	cbnz	r1, 800c00c <__ascii_mbtowc+0x6>
 800c00a:	a901      	add	r1, sp, #4
 800c00c:	b142      	cbz	r2, 800c020 <__ascii_mbtowc+0x1a>
 800c00e:	b14b      	cbz	r3, 800c024 <__ascii_mbtowc+0x1e>
 800c010:	7813      	ldrb	r3, [r2, #0]
 800c012:	600b      	str	r3, [r1, #0]
 800c014:	7812      	ldrb	r2, [r2, #0]
 800c016:	1e10      	subs	r0, r2, #0
 800c018:	bf18      	it	ne
 800c01a:	2001      	movne	r0, #1
 800c01c:	b002      	add	sp, #8
 800c01e:	4770      	bx	lr
 800c020:	4610      	mov	r0, r2
 800c022:	e7fb      	b.n	800c01c <__ascii_mbtowc+0x16>
 800c024:	f06f 0001 	mvn.w	r0, #1
 800c028:	e7f8      	b.n	800c01c <__ascii_mbtowc+0x16>

0800c02a <_realloc_r>:
 800c02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c02e:	4607      	mov	r7, r0
 800c030:	4614      	mov	r4, r2
 800c032:	460d      	mov	r5, r1
 800c034:	b921      	cbnz	r1, 800c040 <_realloc_r+0x16>
 800c036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c03a:	4611      	mov	r1, r2
 800c03c:	f7fd bca0 	b.w	8009980 <_malloc_r>
 800c040:	b92a      	cbnz	r2, 800c04e <_realloc_r+0x24>
 800c042:	f7fd fc29 	bl	8009898 <_free_r>
 800c046:	4625      	mov	r5, r4
 800c048:	4628      	mov	r0, r5
 800c04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c04e:	f000 f8c4 	bl	800c1da <_malloc_usable_size_r>
 800c052:	4284      	cmp	r4, r0
 800c054:	4606      	mov	r6, r0
 800c056:	d802      	bhi.n	800c05e <_realloc_r+0x34>
 800c058:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c05c:	d8f4      	bhi.n	800c048 <_realloc_r+0x1e>
 800c05e:	4621      	mov	r1, r4
 800c060:	4638      	mov	r0, r7
 800c062:	f7fd fc8d 	bl	8009980 <_malloc_r>
 800c066:	4680      	mov	r8, r0
 800c068:	b908      	cbnz	r0, 800c06e <_realloc_r+0x44>
 800c06a:	4645      	mov	r5, r8
 800c06c:	e7ec      	b.n	800c048 <_realloc_r+0x1e>
 800c06e:	42b4      	cmp	r4, r6
 800c070:	4622      	mov	r2, r4
 800c072:	4629      	mov	r1, r5
 800c074:	bf28      	it	cs
 800c076:	4632      	movcs	r2, r6
 800c078:	f7fc fda1 	bl	8008bbe <memcpy>
 800c07c:	4629      	mov	r1, r5
 800c07e:	4638      	mov	r0, r7
 800c080:	f7fd fc0a 	bl	8009898 <_free_r>
 800c084:	e7f1      	b.n	800c06a <_realloc_r+0x40>

0800c086 <__ascii_wctomb>:
 800c086:	4603      	mov	r3, r0
 800c088:	4608      	mov	r0, r1
 800c08a:	b141      	cbz	r1, 800c09e <__ascii_wctomb+0x18>
 800c08c:	2aff      	cmp	r2, #255	@ 0xff
 800c08e:	d904      	bls.n	800c09a <__ascii_wctomb+0x14>
 800c090:	228a      	movs	r2, #138	@ 0x8a
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	f04f 30ff 	mov.w	r0, #4294967295
 800c098:	4770      	bx	lr
 800c09a:	700a      	strb	r2, [r1, #0]
 800c09c:	2001      	movs	r0, #1
 800c09e:	4770      	bx	lr

0800c0a0 <fiprintf>:
 800c0a0:	b40e      	push	{r1, r2, r3}
 800c0a2:	b503      	push	{r0, r1, lr}
 800c0a4:	4601      	mov	r1, r0
 800c0a6:	ab03      	add	r3, sp, #12
 800c0a8:	4805      	ldr	r0, [pc, #20]	@ (800c0c0 <fiprintf+0x20>)
 800c0aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ae:	6800      	ldr	r0, [r0, #0]
 800c0b0:	9301      	str	r3, [sp, #4]
 800c0b2:	f7ff f9a1 	bl	800b3f8 <_vfiprintf_r>
 800c0b6:	b002      	add	sp, #8
 800c0b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0bc:	b003      	add	sp, #12
 800c0be:	4770      	bx	lr
 800c0c0:	2000001c 	.word	0x2000001c

0800c0c4 <__swhatbuf_r>:
 800c0c4:	b570      	push	{r4, r5, r6, lr}
 800c0c6:	460c      	mov	r4, r1
 800c0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0cc:	2900      	cmp	r1, #0
 800c0ce:	b096      	sub	sp, #88	@ 0x58
 800c0d0:	4615      	mov	r5, r2
 800c0d2:	461e      	mov	r6, r3
 800c0d4:	da0d      	bge.n	800c0f2 <__swhatbuf_r+0x2e>
 800c0d6:	89a3      	ldrh	r3, [r4, #12]
 800c0d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0dc:	f04f 0100 	mov.w	r1, #0
 800c0e0:	bf14      	ite	ne
 800c0e2:	2340      	movne	r3, #64	@ 0x40
 800c0e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	6031      	str	r1, [r6, #0]
 800c0ec:	602b      	str	r3, [r5, #0]
 800c0ee:	b016      	add	sp, #88	@ 0x58
 800c0f0:	bd70      	pop	{r4, r5, r6, pc}
 800c0f2:	466a      	mov	r2, sp
 800c0f4:	f000 f848 	bl	800c188 <_fstat_r>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	dbec      	blt.n	800c0d6 <__swhatbuf_r+0x12>
 800c0fc:	9901      	ldr	r1, [sp, #4]
 800c0fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c102:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c106:	4259      	negs	r1, r3
 800c108:	4159      	adcs	r1, r3
 800c10a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c10e:	e7eb      	b.n	800c0e8 <__swhatbuf_r+0x24>

0800c110 <__smakebuf_r>:
 800c110:	898b      	ldrh	r3, [r1, #12]
 800c112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c114:	079d      	lsls	r5, r3, #30
 800c116:	4606      	mov	r6, r0
 800c118:	460c      	mov	r4, r1
 800c11a:	d507      	bpl.n	800c12c <__smakebuf_r+0x1c>
 800c11c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	6123      	str	r3, [r4, #16]
 800c124:	2301      	movs	r3, #1
 800c126:	6163      	str	r3, [r4, #20]
 800c128:	b003      	add	sp, #12
 800c12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c12c:	ab01      	add	r3, sp, #4
 800c12e:	466a      	mov	r2, sp
 800c130:	f7ff ffc8 	bl	800c0c4 <__swhatbuf_r>
 800c134:	9f00      	ldr	r7, [sp, #0]
 800c136:	4605      	mov	r5, r0
 800c138:	4639      	mov	r1, r7
 800c13a:	4630      	mov	r0, r6
 800c13c:	f7fd fc20 	bl	8009980 <_malloc_r>
 800c140:	b948      	cbnz	r0, 800c156 <__smakebuf_r+0x46>
 800c142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c146:	059a      	lsls	r2, r3, #22
 800c148:	d4ee      	bmi.n	800c128 <__smakebuf_r+0x18>
 800c14a:	f023 0303 	bic.w	r3, r3, #3
 800c14e:	f043 0302 	orr.w	r3, r3, #2
 800c152:	81a3      	strh	r3, [r4, #12]
 800c154:	e7e2      	b.n	800c11c <__smakebuf_r+0xc>
 800c156:	89a3      	ldrh	r3, [r4, #12]
 800c158:	6020      	str	r0, [r4, #0]
 800c15a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c15e:	81a3      	strh	r3, [r4, #12]
 800c160:	9b01      	ldr	r3, [sp, #4]
 800c162:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c166:	b15b      	cbz	r3, 800c180 <__smakebuf_r+0x70>
 800c168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c16c:	4630      	mov	r0, r6
 800c16e:	f000 f81d 	bl	800c1ac <_isatty_r>
 800c172:	b128      	cbz	r0, 800c180 <__smakebuf_r+0x70>
 800c174:	89a3      	ldrh	r3, [r4, #12]
 800c176:	f023 0303 	bic.w	r3, r3, #3
 800c17a:	f043 0301 	orr.w	r3, r3, #1
 800c17e:	81a3      	strh	r3, [r4, #12]
 800c180:	89a3      	ldrh	r3, [r4, #12]
 800c182:	431d      	orrs	r5, r3
 800c184:	81a5      	strh	r5, [r4, #12]
 800c186:	e7cf      	b.n	800c128 <__smakebuf_r+0x18>

0800c188 <_fstat_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4d07      	ldr	r5, [pc, #28]	@ (800c1a8 <_fstat_r+0x20>)
 800c18c:	2300      	movs	r3, #0
 800c18e:	4604      	mov	r4, r0
 800c190:	4608      	mov	r0, r1
 800c192:	4611      	mov	r1, r2
 800c194:	602b      	str	r3, [r5, #0]
 800c196:	f7f5 ff33 	bl	8002000 <_fstat>
 800c19a:	1c43      	adds	r3, r0, #1
 800c19c:	d102      	bne.n	800c1a4 <_fstat_r+0x1c>
 800c19e:	682b      	ldr	r3, [r5, #0]
 800c1a0:	b103      	cbz	r3, 800c1a4 <_fstat_r+0x1c>
 800c1a2:	6023      	str	r3, [r4, #0]
 800c1a4:	bd38      	pop	{r3, r4, r5, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20006248 	.word	0x20006248

0800c1ac <_isatty_r>:
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	4d06      	ldr	r5, [pc, #24]	@ (800c1c8 <_isatty_r+0x1c>)
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	4608      	mov	r0, r1
 800c1b6:	602b      	str	r3, [r5, #0]
 800c1b8:	f7f5 ff32 	bl	8002020 <_isatty>
 800c1bc:	1c43      	adds	r3, r0, #1
 800c1be:	d102      	bne.n	800c1c6 <_isatty_r+0x1a>
 800c1c0:	682b      	ldr	r3, [r5, #0]
 800c1c2:	b103      	cbz	r3, 800c1c6 <_isatty_r+0x1a>
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	bd38      	pop	{r3, r4, r5, pc}
 800c1c8:	20006248 	.word	0x20006248

0800c1cc <abort>:
 800c1cc:	b508      	push	{r3, lr}
 800c1ce:	2006      	movs	r0, #6
 800c1d0:	f000 f834 	bl	800c23c <raise>
 800c1d4:	2001      	movs	r0, #1
 800c1d6:	f7f5 fec3 	bl	8001f60 <_exit>

0800c1da <_malloc_usable_size_r>:
 800c1da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1de:	1f18      	subs	r0, r3, #4
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	bfbc      	itt	lt
 800c1e4:	580b      	ldrlt	r3, [r1, r0]
 800c1e6:	18c0      	addlt	r0, r0, r3
 800c1e8:	4770      	bx	lr

0800c1ea <_raise_r>:
 800c1ea:	291f      	cmp	r1, #31
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	460c      	mov	r4, r1
 800c1f2:	d904      	bls.n	800c1fe <_raise_r+0x14>
 800c1f4:	2316      	movs	r3, #22
 800c1f6:	6003      	str	r3, [r0, #0]
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fc:	bd38      	pop	{r3, r4, r5, pc}
 800c1fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c200:	b112      	cbz	r2, 800c208 <_raise_r+0x1e>
 800c202:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c206:	b94b      	cbnz	r3, 800c21c <_raise_r+0x32>
 800c208:	4628      	mov	r0, r5
 800c20a:	f000 f831 	bl	800c270 <_getpid_r>
 800c20e:	4622      	mov	r2, r4
 800c210:	4601      	mov	r1, r0
 800c212:	4628      	mov	r0, r5
 800c214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c218:	f000 b818 	b.w	800c24c <_kill_r>
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d00a      	beq.n	800c236 <_raise_r+0x4c>
 800c220:	1c59      	adds	r1, r3, #1
 800c222:	d103      	bne.n	800c22c <_raise_r+0x42>
 800c224:	2316      	movs	r3, #22
 800c226:	6003      	str	r3, [r0, #0]
 800c228:	2001      	movs	r0, #1
 800c22a:	e7e7      	b.n	800c1fc <_raise_r+0x12>
 800c22c:	2100      	movs	r1, #0
 800c22e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c232:	4620      	mov	r0, r4
 800c234:	4798      	blx	r3
 800c236:	2000      	movs	r0, #0
 800c238:	e7e0      	b.n	800c1fc <_raise_r+0x12>
	...

0800c23c <raise>:
 800c23c:	4b02      	ldr	r3, [pc, #8]	@ (800c248 <raise+0xc>)
 800c23e:	4601      	mov	r1, r0
 800c240:	6818      	ldr	r0, [r3, #0]
 800c242:	f7ff bfd2 	b.w	800c1ea <_raise_r>
 800c246:	bf00      	nop
 800c248:	2000001c 	.word	0x2000001c

0800c24c <_kill_r>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	4d07      	ldr	r5, [pc, #28]	@ (800c26c <_kill_r+0x20>)
 800c250:	2300      	movs	r3, #0
 800c252:	4604      	mov	r4, r0
 800c254:	4608      	mov	r0, r1
 800c256:	4611      	mov	r1, r2
 800c258:	602b      	str	r3, [r5, #0]
 800c25a:	f7f5 fe71 	bl	8001f40 <_kill>
 800c25e:	1c43      	adds	r3, r0, #1
 800c260:	d102      	bne.n	800c268 <_kill_r+0x1c>
 800c262:	682b      	ldr	r3, [r5, #0]
 800c264:	b103      	cbz	r3, 800c268 <_kill_r+0x1c>
 800c266:	6023      	str	r3, [r4, #0]
 800c268:	bd38      	pop	{r3, r4, r5, pc}
 800c26a:	bf00      	nop
 800c26c:	20006248 	.word	0x20006248

0800c270 <_getpid_r>:
 800c270:	f7f5 be5e 	b.w	8001f30 <_getpid>

0800c274 <_init>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	bf00      	nop
 800c278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27a:	bc08      	pop	{r3}
 800c27c:	469e      	mov	lr, r3
 800c27e:	4770      	bx	lr

0800c280 <_fini>:
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c282:	bf00      	nop
 800c284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c286:	bc08      	pop	{r3}
 800c288:	469e      	mov	lr, r3
 800c28a:	4770      	bx	lr
